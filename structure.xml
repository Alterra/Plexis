<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="Plexis CMS">
  <file path="index.php" hash="bcc906ecf418825335d91bb9c9cd660d" package="System">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="author" description="Steven Wilson (Wilson212)"/>
      <tag line="2" name="author" description="Tony (Syke)"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="package" description="System"/>
    </docblock>
    <include line="35" type="Require" package="Default">
      <name/>
    </include>
    <include line="36" type="Require" package="Default">
      <name/>
    </include>
    <include line="37" type="Require" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="17" package="System">
      <name>TIME_START</name>
      <full_name>\TIME_START</full_name>
      <value>microtime(true)</value>
    </constant>
    <constant namespace="global" line="20" package="System">
      <name>DS</name>
      <full_name>\DS</full_name>
      <value>DIRECTORY_SEPARATOR</value>
    </constant>
    <constant namespace="global" line="23" package="System">
      <name>ROOT</name>
      <full_name>\ROOT</full_name>
      <value>dirname(__FILE__)</value>
    </constant>
    <constant namespace="global" line="26" package="System">
      <name>SYSTEM_PATH</name>
      <full_name>\SYSTEM_PATH</full_name>
      <value>ROOT . DS . 'system'</value>
    </constant>
    <constant namespace="global" line="29" package="System">
      <name>MOD_REWRITE</name>
      <full_name>\MOD_REWRITE</full_name>
      <value>isset($_SERVER["HTTP_MOD_REWRITE"]) &amp;&amp; $_SERVER["HTTP_MOD_REWRITE"] == "On"</value>
    </constant>
  </file>
  <file path="system\core\AutoLoader.php" hash="740a0292af004247f76c99adbdbe1142" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Autoloader.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Autoloader"/>
    </docblock>
    <include line="176" type="Require" package="Default">
      <name/>
    </include>
    <include line="194" type="Require" package="Default">
      <name/>
    </include>
    <include line="208" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="24" package="Core">
      <extends/>
      <name>AutoLoader</name>
      <full_name>\Core\AutoLoader</full_name>
      <docblock line="12">
        <description>This class is an advanced autoloader for missing class references.</description>
        <long-description>&lt;p&gt;Able to register namespace specific paths, as well as prefix
specific paths.&lt;/p&gt;

&lt;p&gt;This class was taken from the Symfony2 package, and re-written for
the use of Plexis CMS.&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Fabien Potencier &lt;fabien.potencier@symfony-project.org&gt;"/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="30" namespace="Core" package="Default">
        <name>$isRegistered</name>
        <default>false</default>
        <docblock line="26">
          <description>A bool that states whether the Autoloader is registered with spl_autoload</description>
          <long-description/>
          <tag line="26" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="36" namespace="Core" package="Default">
        <name>$paths</name>
        <default>array()</default>
        <docblock line="32">
          <description>An array of registered paths</description>
          <long-description/>
          <tag line="32" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="42" namespace="Core" package="Default">
        <name>$namespaces</name>
        <default>array()</default>
        <docblock line="38">
          <description>An array of registered namepace =&gt; path</description>
          <long-description/>
          <tag line="38" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="48" namespace="Core" package="Default">
        <name>$prefixes</name>
        <default>array()</default>
        <docblock line="44">
          <description>An array of registered prefix =&gt; path</description>
          <long-description/>
          <tag line="44" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="56" package="Core">
        <name>Register</name>
        <full_name>Register</full_name>
        <docblock line="50">
          <description>Registers the AutoLoader class with spl_autoload.</description>
          <long-description>&lt;p&gt;Multiple
calls to this method will not yeild any additional results.&lt;/p&gt;</long-description>
          <tag line="50" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="70" package="Core">
        <name>UnRegister</name>
        <full_name>UnRegister</full_name>
        <docblock line="65">
          <description>Un-Registers the AutoLoader class with spl_autoload</description>
          <long-description/>
          <tag line="65" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="87" package="Core">
        <name>RegisterPath</name>
        <full_name>RegisterPath</full_name>
        <docblock line="79">
          <description>Registers a path for the autoload to search for classes.</description>
          <long-description>&lt;p&gt;Namespaced
and prefixed registered paths will be searched first if the class
is namespaced, or prefixed.&lt;/p&gt;</long-description>
          <tag line="79" name="param" description="Full path to search for a class" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="104" package="Core">
        <name>RegisterNamespace</name>
        <full_name>RegisterNamespace</full_name>
        <docblock line="93">
          <description>Registers a path for the autoloader to search in when searching
for a specific namespaced class.</description>
          <long-description>&lt;p&gt;When calling this method more
than once with the same namespace, the path(s) will just be added
to the current ruuning list of paths for that namespace&lt;/p&gt;</long-description>
          <tag line="93" name="param" description="The namespace we are registering" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="param" description="Full path, or an array of paths&#13;&#10;  to search for the namespaced class'." type="string|array" variable="$path">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="93" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
        <argument line="104">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="123" package="Core">
        <name>RegisterPrefix</name>
        <full_name>RegisterPrefix</full_name>
        <docblock line="112">
          <description>Registers a path for the autoload to search for when searching
for a prefixed class.</description>
          <long-description>&lt;p&gt;When calling this method more than once
with the same prefix, the path(s) will just be added to the current
ruuning list of paths for that prefix&lt;/p&gt;</long-description>
          <tag line="112" name="param" description="The class prefix we are registering" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="param" description="Full path, or an array of paths&#13;&#10;  to search for the prefixed class'" type="string|array" variable="$path">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="112" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
        <argument line="123">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="137" package="Core">
        <name>GetNamespaces</name>
        <full_name>GetNamespaces</full_name>
        <docblock line="131">
          <description>Returns an array of all registered namespaces as keys, and an array
of registered paths for that namespace as values</description>
          <long-description/>
          <tag line="131" name="return" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="148" package="Core">
        <name>GetPrefixes</name>
        <full_name>GetPrefixes</full_name>
        <docblock line="142">
          <description>Returns an array of all registered prefixes as keys, and an array
of registered paths for that prefix as values</description>
          <long-description/>
          <tag line="142" name="return" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="161" package="Core">
        <name>LoadClass</name>
        <full_name>LoadClass</full_name>
        <docblock line="153">
          <description>Method used to search all registered paths for a missing class
reference (used by the spl_autoload method)</description>
          <long-description/>
          <tag line="153" name="param" description="The class being loaded" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="153" name="return" description="Returns TRUE if the class is found, and file was&#13;&#10;  included successfully." type="Bool">
            <type by_reference="false">Bool</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\Benchmark.php" hash="075b7968e46329b5bcaf15714981d3a2" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Benchmark.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Benchmark"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="19" package="Core">
      <extends/>
      <name>Benchmark</name>
      <full_name>\Core\Benchmark</full_name>
      <docblock line="12">
        <description>This class is used to benchmark certain parts of the system.</description>
        <long-description>&lt;p&gt;You
can define new start and stop times, and get elapsed times as well&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="25" namespace="Core" package="Default">
        <name>$start</name>
        <default>array()</default>
        <docblock line="21">
          <description>An array of benchmark start times ($name =&gt; time)</description>
          <long-description/>
          <tag line="21" name="var" description="" type="float[]">
            <type by_reference="false">float[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="31" namespace="Core" package="Default">
        <name>$stop</name>
        <default>array()</default>
        <docblock line="27">
          <description>An array of benchmark stop times ($name =&gt; time)</description>
          <long-description/>
          <tag line="27" name="var" description="" type="float[]">
            <type by_reference="false">float[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="38" package="Core">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="33">
          <description>When this method is called (automatically), the system start time is defined</description>
          <long-description/>
          <tag line="33" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="52" package="Core">
        <name>Start</name>
        <full_name>Start</full_name>
        <docblock line="43">
          <description>Starts a new timer</description>
          <long-description>&lt;p&gt;When this method is called, a new timer will begin for the provided
benchmark name&lt;/p&gt;</long-description>
          <tag line="43" name="param" description="The name given for this benchmark timer" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="65" package="Core">
        <name>Stop</name>
        <full_name>Stop</full_name>
        <docblock line="57">
          <description>Stops a defined timer</description>
          <long-description>&lt;p&gt;When this method is called, the provided timer name will be stopped&lt;/p&gt;</long-description>
          <tag line="57" name="param" description="The name given for this benchmark timer" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="80" package="Core">
        <name>ElapsedTime</name>
        <full_name>ElapsedTime</full_name>
        <docblock line="71">
          <description>Returns the final time from start to finish for a benchmark</description>
          <long-description/>
          <tag line="71" name="param" description="The name given for this benchmark timer" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="71" name="param" description="How many numbers after the &quot;.&quot; do we show?" type="int" variable="$decimals">
            <type by_reference="false">int</type>
          </tag>
          <tag line="71" name="param" description="Stop the timer as well?" type="bool" variable="$stop">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="71" name="return" description="The time it took from start to finish. FALSE&#13;&#10;if no timer was set in the first place." type="float|bool">
            <type by_reference="false">float</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="80">
          <name>$decimals</name>
          <default>3</default>
          <type/>
        </argument>
        <argument line="80">
          <name>$stop</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="104" package="Core">
        <name>FetchAll</name>
        <full_name>FetchAll</full_name>
        <docblock line="97">
          <description>Returns the an array of all registered benchmarks, and thier times.</description>
          <long-description/>
          <tag line="97" name="param" description="How many numbers after the &quot;.&quot; do we show?" type="int" variable="$decimals">
            <type by_reference="false">int</type>
          </tag>
          <tag line="97" name="param" description="Stop the timer for all benchmarks as well?" type="bool" variable="$stopAll">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="97" name="return" description="The time it took from start to finish." type="float|bool">
            <type by_reference="false">float</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$decimals</name>
          <default/>
          <type/>
        </argument>
        <argument line="104">
          <name>$stopAll</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="123" package="Core">
        <name>MemoryUsage</name>
        <full_name>MemoryUsage</full_name>
        <docblock line="118">
          <description>Returns the amount of memory the system has used to load the page</description>
          <long-description/>
          <tag line="118" name="return" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Config.php" hash="830be07811ed9c65b1dfeece66d709ee" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Config.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Config"/>
    </docblock>
    <include line="123" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="19" package="Core">
      <extends/>
      <name>Config</name>
      <full_name>\Core\Config</full_name>
      <docblock line="12">
        <description>Main Config class.</description>
        <long-description>&lt;p&gt;Used to load, set, and save variables used
in the config file.&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="25" namespace="Core" package="Default">
        <name>$data</name>
        <default>array()</default>
        <docblock line="21">
          <description>An array of all out stored containers / variables</description>
          <long-description/>
          <tag line="21" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="31" namespace="Core" package="Default">
        <name>$files</name>
        <default>array()</default>
        <docblock line="27">
          <description>A list of our loaded config files</description>
          <long-description/>
          <tag line="27" name="var" description="" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="40" package="Core">
        <name>GetVar</name>
        <full_name>GetVar</full_name>
        <docblock line="33">
          <description>Returns the variable ($key) value in a config file.</description>
          <long-description/>
          <tag line="33" name="param" description="Config variable name" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="return" description="May return NULL if the var is not set" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="40">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="56" package="Core">
        <name>FetchVars</name>
        <full_name>FetchVars</full_name>
        <docblock line="49">
          <description>Returns all variables in an array from the the config file.</description>
          <long-description/>
          <tag line="49" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="return" description="Array of variables ($key =&gt; $value).&#13;&#10;May return NULL if the var is not set" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="75" package="Core">
        <name>SetVar</name>
        <full_name>SetVar</full_name>
        <docblock line="65">
          <description>Sets the variable ($key) value.</description>
          <long-description>&lt;p&gt;If not saved, default value
will be returned as soon as page is re-loaded / changed.&lt;/p&gt;</long-description>
          <tag line="65" name="param" description="Config variable name to be set, or an&#13;&#10;array of $key =&gt; $value" type="string|array" variable="$key">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="param" description="The config variable's new value" type="string" variable="$val">
            <type by_reference="false">string</type>
          </tag>
          <tag line="65" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="65" name="return" description="Returns false if the config file denies set perms" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$val</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="75">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="108" package="Core">
        <name>Load</name>
        <full_name>Load</full_name>
        <docblock line="96">
          <description>Loads a config file, and adds its defined variables to the $data array</description>
          <long-description/>
          <tag line="96" name="param" description="Full path to the config file, includeing name" type="string" variable="$_Cfile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="param" description="The container name we are storing this configs" type="string" variable="$_Cname">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="param" description="If all of the config vars are stored in an array,&#13;&#10;   whats the array variable name?" type="string" variable="$_Carray">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="throws" description="if the config file does not exist" type="\FileNotFoundException">
            <type by_reference="false">\FileNotFoundException</type>
          </tag>
          <tag line="96" name="return" description="Returns false if the config file cannot be found or read" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$_Cfile</name>
          <default/>
          <type/>
        </argument>
        <argument line="108">
          <name>$_Cname</name>
          <default/>
          <type/>
        </argument>
        <argument line="108">
          <name>$_Carray</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="158" package="Core">
        <name>UnLoad</name>
        <full_name>UnLoad</full_name>
        <docblock line="152">
          <description>This method is used to unload a config</description>
          <long-description/>
          <tag line="152" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="152" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="169" package="Core">
        <name>IsLoaded</name>
        <full_name>IsLoaded</full_name>
        <docblock line="163">
          <description>This method returns if a config name is loaded</description>
          <long-description/>
          <tag line="163" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="163" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="181" package="Core">
        <name>Save</name>
        <full_name>Save</full_name>
        <docblock line="174">
          <description>Saves all set config variables to the config file, and makes
a backup of the current config file</description>
          <long-description/>
          <tag line="174" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="174" name="return" description="true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="257" package="Core">
        <name>Restore</name>
        <full_name>Restore</full_name>
        <docblock line="250">
          <description>This method is used to undo the last Save.</description>
          <long-description>&lt;p&gt;.bak file must be
in the config folder&lt;/p&gt;</long-description>
          <tag line="250" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="250" name="return" description="true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\Controller.php" hash="59ce8ae40224b4195693ad6681ce02ba" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Controller.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Controller"/>
    </docblock>
    <include line="94" type="Require" package="Default">
      <name/>
    </include>
    <include line="134" type="Require" package="Default">
      <name/>
    </include>
    <include line="228" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="29" package="Core">
      <extends/>
      <name>Controller</name>
      <full_name>\Core\Controller</full_name>
      <docblock line="20">
        <description>Class used to assist modules, by providing useful methods.</description>
        <long-description>&lt;p&gt;This class is to be extended by modules, in order to provide some common
and useful methods for the child class.&lt;/p&gt;</long-description>
        <tag line="20" name="author" description="Steven Wilson"/>
        <tag line="20" name="package" description="Core"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" namespace="Core" package="Default">
        <name>$modulePath</name>
        <default/>
        <docblock line="31">
          <description>The root path to the module extending this class</description>
          <long-description/>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" namespace="Core" package="Default">
        <name>$moduleUri</name>
        <default/>
        <docblock line="37">
          <description>The http path to the module's root folder</description>
          <long-description/>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" namespace="Core" package="Default">
        <name>$moduleName</name>
        <default/>
        <docblock line="43">
          <description>The child module name</description>
          <long-description/>
          <tag line="43" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="58" package="Core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="49">
          <description>Sets up the correct $modulePath and $moduleName variables</description>
          <long-description/>
          <tag line="49" name="param" description="The Module object of the child Module. Not to be&#13;&#10;  confused with the child controller, but the argument passed to the chile&#13;&#10;  controller." type="string" variable="$Module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$Module</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="84" package="Core">
        <name>loadModel</name>
        <full_name>loadModel</full_name>
        <docblock line="70">
          <description>Loads a model for the child controller.</description>
          <long-description>&lt;p&gt;The model will be searched for in the modules "models" folder. The
result will also be stored in a class variable, the name of the class:
"$this-&gt;{$name}".&lt;/p&gt;</long-description>
          <tag line="70" name="param" description="The modal name to load" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="param" description="An array or parameters to pass to the constructor.&#13;&#10;  Default empty array." type="mixed[]" variable="$params">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="70" name="return" description="The constructed modal object, or false if the model&#13;&#10;  could not be located." type="object|bool">
            <type by_reference="false">object</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="84">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="125" package="Core">
        <name>loadHelper</name>
        <full_name>loadHelper</full_name>
        <docblock line="118">
          <description>Loads a helper file from the modules helper folder</description>
          <long-description/>
          <tag line="118" name="param" description="The helper name to load (no file extension)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="return" description="Returns true if the helper file was found, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="155" package="Core">
        <name>loadView</name>
        <full_name>loadView</full_name>
        <docblock line="138">
          <description>Loads a view file for the child controller (See detailed description)</description>
          <long-description>&lt;p&gt;The first path searched is the current template's module/views
folder. If the template does not contain a view for the current module,
then the modules view folder will be checked... If a view file cannot
be located on either of those paths, a ViewNotFoundException will be thrown
unless the variable $silence is set to true, in which case a false will be retuned.&lt;/p&gt;</long-description>
          <tag line="138" name="param" description="The view filename to load (no extension)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="138" name="param" description="The name of the views javascript file (located in the&#13;&#10;  modules JS folder). Leave null for no file, or to use the default template's view&#13;&#10;  js file." type="string" variable="$jsFile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="138" name="return" description="Returns false if the view file cannot be located,&#13;&#10;  (and $silence is set to true), a Library\View object otherwise" type="\Library\View|bool">
            <type by_reference="false">\Library\View</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="155">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="155">
          <name>$jsFile</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="189" package="Core">
        <name>addScript</name>
        <full_name>addScript</full_name>
        <docblock line="181">
          <description>Includes a module's js file in the final layouts head tag</description>
          <long-description/>
          <tag line="181" name="param" description="The  name of the JS file located in the&#13;&#10;  modules JS folder" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="181" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="202" package="Core">
        <name>addStylesheet</name>
        <full_name>addStylesheet</full_name>
        <docblock line="194">
          <description>Includes a module's css file in the final layouts head tag</description>
          <long-description/>
          <tag line="194" name="param" description="The  name of the CSS file located in the&#13;&#10;  modules CSS folder" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="218" package="Core">
        <name>loadController</name>
        <full_name>loadController</full_name>
        <docblock line="207">
          <description>Loads a controller from the current modules folder, and returns a new
  instance of that class</description>
          <long-description/>
          <tag line="207" name="param" description="The name of the controller to load. The&#13;&#10;result will also be stored in a class variable, the name of the class:&#13;&#10;&quot;$this-&gt;{$name}&quot;." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="return" description="Returns the constructed controller or false if&#13;&#10;  the controller doesnt exist" type="object|bool">
            <type by_reference="false">object</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="247" package="Core">
        <name>loadConfig</name>
        <full_name>loadConfig</full_name>
        <docblock line="235">
          <description>Loads a config file from the modules config folder</description>
          <long-description/>
          <tag line="235" name="param" description="The name of the config file to load (no exension)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="235" name="param" description="The config file id (name of the config, used for&#13;&#10;  fetching and setting variables)" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="235" name="param" description="If all the config varaiables are in an array,&#13;&#10;  what is the name of the array?" type="string" variable="$arrayName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="235" name="return" description="Returns false if the file cannot be read or located, true&#13;&#10;  otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="247">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="247">
          <name>$arrayName</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="272" package="Core">
        <name>requireAuth</name>
        <full_name>requireAuth</full_name>
        <docblock line="261">
          <description>When called, if the user is not logged in, the login screen will be shown.</description>
          <long-description>&lt;p&gt;NOTE: This method will stop execution of the current request if the user
is not logged in (Guest), and the current script will stop executing.&lt;/p&gt;</long-description>
          <tag line="261" name="param" description="When set to true, the login screen will be displayed.&#13;&#10;  If set to false, a 403 &quot;Forbidden&quot; screen is shown instead." type="bool" variable="$showLogin">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="261" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="272">
          <name>$showLogin</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="313" package="Core">
        <name>requirePermission</name>
        <full_name>requirePermission</full_name>
        <docblock line="300">
          <description>When called, if the user does not have the specified permission, a 403 "forbidden"
screen will be displayed, or a redirection will occur (depending on vars).</description>
          <long-description>&lt;p&gt;NOTE: This method will stop execution of the current request when called if the user
does not have the specified permission, and the current script will stop executing.&lt;/p&gt;</long-description>
          <tag line="300" name="param" description="The name of the permission this user is required to have." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="300" name="param" description="The redirect URI (or url). If set to false, a 403 &quot;forbidden&quot;&#13;&#10;  screen will be displayed instead of a redirect." type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="300" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="313">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="313">
          <name>$uri</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="338" package="Core">
        <name>throwExceptions</name>
        <full_name>throwExceptions</full_name>
        <docblock line="329">
          <description>Tells the Core Controller whether or not to throw exceptions.</description>
          <long-description/>
          <tag line="329" name="param" description="Do we throw exceptions?" type="bool" variable="$bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="329" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="329" name="todo" description="Finish this option to throw exceptions in the main controller"/>
        </docblock>
        <argument line="338">
          <name>$bool</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\database\Driver.php" hash="e8a1e1ebad37e575ff67c74734b213c6" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Database/Driver.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Driver"/>
    </docblock>
    <include line="498" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Database" line="21" package="Database">
      <extends>\PDO</extends>
      <name>Driver</name>
      <full_name>\Database\Driver</full_name>
      <docblock line="12">
        <description>PDO extension driver</description>
        <long-description>&lt;p&gt;This class is returned from the Database::Connect() method&lt;/p&gt;</long-description>
        <tag line="12" name="see" description="\Core\Database::Connect()" refers="\Core\Database::Connect()"/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Database"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" namespace="Database" package="Default">
        <name>$driver</name>
        <default/>
        <docblock line="23">
          <description>The PDO object</description>
          <long-description/>
          <tag line="23" name="var" description="Object" type="\PDO">
            <type by_reference="false">\PDO</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" namespace="Database" package="Default">
        <name>$last_query</name>
        <default>''</default>
        <docblock line="29">
          <description>The last query string</description>
          <long-description/>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" namespace="Database" package="Default">
        <name>$queries</name>
        <default>array()</default>
        <docblock line="35">
          <description>All sql statements that have been ran</description>
          <long-description/>
          <tag line="35" name="var" description="" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" namespace="Database" package="Default">
        <name>$sprints</name>
        <default/>
        <docblock line="41">
          <description>Replacements for the last query</description>
          <long-description/>
          <tag line="41" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" namespace="Database" package="Default">
        <name>$num_rows</name>
        <default/>
        <docblock line="47">
          <description>Our last queries number of rows / affected rows</description>
          <long-description/>
          <tag line="47" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" namespace="Database" package="Default">
        <name>$statistics</name>
        <default>array('total_time' =&gt; 0, 'total_queries' =&gt; 0)</default>
        <docblock line="53">
          <description>Queries statistics.</description>
          <long-description/>
          <tag line="53" name="var" description="" type="int[]">
            <type by_reference="false">int[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="65" namespace="Database" package="Default">
        <name>$result</name>
        <default/>
        <docblock line="62">
          <description>The result of the last query</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="73" package="Database">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="67">
          <description>Creates the connection to the database using PDO</description>
          <long-description/>
          <tag line="67" name="param" description="The database connection info array" type="string[]" variable="$i">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$i</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="97" package="Database">
        <name>query</name>
        <full_name>query</full_name>
        <docblock line="87">
          <description>Main method for querying the database.</description>
          <long-description>&lt;p&gt;This method also
benchmarks times for each query, as well as stores the query
in the $sql array.&lt;/p&gt;</long-description>
          <tag line="87" name="param" description="The query to run" type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="param" description="An array or replacemtnts of (?)'s in the $query" type="mixed[]" variable="$sprints">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="87" name="param" description="Trigger an error upon error?" type="bool" variable="$report_error">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="87" name="return" description="Returns this object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="97">
          <name>$sprints</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="97">
          <name>$report_error</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="156" package="Database">
        <name>exec</name>
        <full_name>exec</full_name>
        <docblock line="147">
          <description>Wrapper for PDO's exec method.</description>
          <long-description>&lt;p&gt;We are intercepting
so we can add the query to our statistics, and catch errors&lt;/p&gt;</long-description>
          <tag line="147" name="param" description="The query to run" type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="147" name="param" description="Trigger an error upon error?" type="bool" variable="$report_error">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="147" name="return" description="Returns false on error, or the number of rows affected&#13;&#10;  on success." type="int|bool">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="156">
          <name>$report_error</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="195" package="Database">
        <name>fetchAll</name>
        <full_name>fetchAll</full_name>
        <docblock line="187">
          <description>Fetches a multi demensional array (multiple rows) of data from the database.</description>
          <long-description/>
          <tag line="187" name="param" description="The PDO array type to return" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="param" description="" type="string" variable="$param">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="return" description="Returns false if there are no rows to return, or&#13;&#10;  an array of rows on success" type="mixed[]|bool">
            <type by_reference="false">mixed[]</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$type</name>
          <default>'ASSOC'</default>
          <type/>
        </argument>
        <argument line="195">
          <name>$param</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="218" package="Database">
        <name>fetchRow</name>
        <full_name>fetchRow</full_name>
        <docblock line="211">
          <description>Fetches an array of columns from the database.</description>
          <long-description/>
          <tag line="211" name="param" description="The PDO array type to return" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="211" name="return" description="Returns false if there was no result, or&#13;&#10;  an array of columns on success" type="mixed[]|bool">
            <type by_reference="false">mixed[]</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$type</name>
          <default>'ASSOC'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="237" package="Database">
        <name>fetchColumn</name>
        <full_name>fetchColumn</full_name>
        <docblock line="230">
          <description>Fetches a column from the last query result</description>
          <long-description/>
          <tag line="230" name="param" description="The column index id" type="int" variable="$col">
            <type by_reference="false">int</type>
          </tag>
          <tag line="230" name="return" description="Returns false if there was no result, or&#13;&#10;  the value of the column" type="mixed|bool">
            <type by_reference="false">mixed</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$col</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="250" package="Database">
        <name>getFetchType</name>
        <full_name>getFetchType</full_name>
        <docblock line="244">
          <description>Return the PDO fetch type</description>
          <long-description/>
          <tag line="244" name="param" description="The PDO array type to return" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="244" name="return" description="The PDO fetch type ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="274" package="Database">
        <name>insert</name>
        <full_name>insert</full_name>
        <docblock line="267">
          <description>An easy method that will insert data into a table</description>
          <long-description/>
          <tag line="267" name="param" description="The table name we are inserting into" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="267" name="param" description="An array of &quot;column =&gt; value&quot;'s" type="mixed[]" variable="$data">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="267" name="return" description="Returns TRUE on success of FALSE on error" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="274">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="274">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="308" package="Database">
        <name>update</name>
        <full_name>update</full_name>
        <docblock line="299">
          <description>An easy method that will update an existing row in a table</description>
          <long-description/>
          <tag line="299" name="param" description="The table name we are updating" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="299" name="param" description="An array of &quot;column =&gt; value&quot;'s" type="mixed[]" variable="$data">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="299" name="param" description="The where statement Ex: &quot;id = 5&quot;&#13;&#10;  Also accepts an array of $column =&gt; $value" type="string|string[]" variable="$where">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="299" name="return" description="Returns TRUE on success of FALSE on error" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="308">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="308">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="308">
          <name>$where</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="351" package="Database">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="343">
          <description>An easy method that will delete data from a table</description>
          <long-description/>
          <tag line="343" name="param" description="The table name we are updating" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="343" name="param" description="The where statement Ex: &quot;id = 5&quot;&#13;&#10;  Also accepts an array of $column =&gt; $value" type="string|string[]" variable="$where">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="343" name="return" description="Returns TRUE on success of FALSE on error" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="351">
          <name>$where</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="383" package="Database">
        <name>numRows</name>
        <full_name>numRows</full_name>
        <docblock line="370">
          <description>Returns the number of rows affected, or number of rows in the result.</description>
          <long-description>&lt;p&gt;This method returns 1 of 2 things. A) either the number of
affected rows during the last insert/delete/update query. Or
B) The number of rows (count) in the result array.&lt;/p&gt;</long-description>
          <tag line="370" name="param" description="- Setting this to TRUE will return The&#13;&#10;  real number of rows. This is not needed unless the last&#13;&#10;  query was a SELECT query, and you are NOT using the mysql&#13;&#10;  driver." type="bool" variable="$real">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="370" name="return" description="Returns the number of rows in the last query" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="383">
          <name>$real</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="430" package="Database">
        <name>serverInfo</name>
        <full_name>serverInfo</full_name>
        <docblock line="425">
          <description>Returns the DB server information</description>
          <long-description/>
          <tag line="425" name="return" description="Returns the driver, and database server version" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="444" package="Database">
        <name>statistics</name>
        <full_name>statistics</full_name>
        <docblock line="438">
          <description>Returns the statistic information of this connection</description>
          <long-description/>
          <tag line="438" name="return" description="Returns the total query time for all queries, and&#13;&#10;  total number of queries ran on this connection" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="455" package="Database">
        <name>getAllQueries</name>
        <full_name>getAllQueries</full_name>
        <docblock line="449">
          <description>Returns an array of all queries thus far and each queries
statistical data such as query time.</description>
          <long-description/>
          <tag line="449" name="return" description="" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="465" package="Database">
        <name>reset</name>
        <full_name>reset</full_name>
        <docblock line="460">
          <description>Clears out and resets the query statistics</description>
          <long-description/>
          <tag line="460" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="481" package="Database">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="474">
          <description>Magic method to load driver extensions</description>
          <long-description/>
          <tag line="474" name="param" description="Name of the extension we are searching for." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="474" name="return" description="Returns false if the extension class&#13;&#10;  doesnt exist" type="object|bool">
            <type by_reference="false">object</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="481">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Database" line="511" package="Database">
        <name>triggerError</name>
        <full_name>triggerError</full_name>
        <docblock line="506">
          <description>Triggers a database error</description>
          <long-description/>
          <tag line="506" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Database.php" hash="ff5c521db092036f2897d77478aa5bc3" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Database.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Database"/>
      <tag line="2" name="contains" description="DatabaseConnectError"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="22" package="Database">
      <extends/>
      <name>Database</name>
      <full_name>\Core\Database</full_name>
      <docblock line="16">
        <description>Database Factory Class</description>
        <long-description/>
        <tag line="16" name="author" description="Steven Wilson"/>
        <tag line="16" name="package" description="Database"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="28" namespace="Core" package="Default">
        <name>$connections</name>
        <default>array()</default>
        <docblock line="24">
          <description>An array of all stored connections</description>
          <long-description/>
          <tag line="24" name="var" description="" type="\Database\Driver[]">
            <type by_reference="false">\Database\Driver[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="47" package="Database">
        <name>Connect</name>
        <full_name>Connect</full_name>
        <docblock line="30">
          <description>Initiates a new database connection.</description>
          <long-description/>
          <tag line="30" name="param" description="Name or ID of the connection" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="30" name="param" description="The database connection information&#13;&#10;    array(&#13;&#10;      'driver'&#13;&#10;      'host'&#13;&#10;      'port'&#13;&#10;      'database'&#13;&#10;      'username'&#13;&#10;      'password')" type="array" variable="$info">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="param" description="If connection already exists, setting to true&#13;&#10;   will overwrite the old connection ID with the new connection" type="bool" variable="$new">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="30" name="return" description="Returns a Database Driver Object" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
          <tag line="30" name="throws" description="if there is a database connection error" type="\Core\DatabaseConnectError">
            <type by_reference="false">\Core\DatabaseConnectError</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="47">
          <name>$info</name>
          <default/>
          <type/>
        </argument>
        <argument line="47">
          <name>$new</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="71" package="Database">
        <name>GetConnection</name>
        <full_name>GetConnection</full_name>
        <docblock line="64">
          <description>Returns the connection object for the given Name or ID</description>
          <long-description/>
          <tag line="64" name="param" description="Name or ID of the connection" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="Returns a Database Driver Object,&#13;&#10;   or false of the connection $name doesnt exist" type="bool|\Database\Driver">
            <type by_reference="false">bool</type>
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Core" line="84" package="Database\Exceptions">
      <extends>\Exception</extends>
      <name>DatabaseConnectError</name>
      <full_name>\Core\DatabaseConnectError</full_name>
      <docblock line="79">
        <description>Database connection exception.</description>
        <long-description>&lt;p&gt;Thrown when there is an error connecting to the database&lt;/p&gt;</long-description>
        <tag line="79" name="package" description="Database"/>
        <tag line="79" name="subpackage" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\ErrorHandler.php" hash="973920120be579b2cf721294a6cc9139" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/ErrorHandler.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="ErrorHandler"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="19" package="Core">
      <extends/>
      <name>ErrorHandler</name>
      <full_name>\Core\ErrorHandler</full_name>
      <docblock line="12">
        <description>Responsible for handling all errors, and execptions, and displaying
an error page</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="26" package="Core">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="21">
          <description>Class Constructor (Internally called)</description>
          <long-description/>
          <tag line="21" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="38" package="Core">
        <name>SetErrorHandler</name>
        <full_name>SetErrorHandler</full_name>
        <docblock line="31">
          <description>This method is used to set a custom class and method for displaying errors</description>
          <long-description/>
          <tag line="31" name="param" description="The controller class name" type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="31" name="param" description="The method to the classname for displaying the error" type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="31" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$controller</name>
          <default/>
          <type/>
        </argument>
        <argument line="38">
          <name>$action</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="53" package="Core">
        <name>TriggerError</name>
        <full_name>TriggerError</full_name>
        <docblock line="43">
          <description>Main method for showing an error.</description>
          <long-description>&lt;p&gt;Not garunteed to display the error, just
depends on the users error reporting level.&lt;/p&gt;</long-description>
          <tag line="43" name="param" description="Error level. the error levels share the php constants error levels" type="int" variable="$lvl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="43" name="param" description="The error message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="The filename in which the error was triggered from" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="The line number in which the error was triggered from" type="int" variable="$line">
            <type by_reference="false">int</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$lvl</name>
          <default/>
          <type/>
        </argument>
        <argument line="53">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="53">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
        <argument line="53">
          <name>$line</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="67" package="Core">
        <name>HandlePHPError</name>
        <full_name>HandlePHPError</full_name>
        <docblock line="58">
          <description>Same method as TriggerError, except this method is called by php internally</description>
          <long-description/>
          <tag line="58" name="param" description="Error level. the error levels share the php constants error levels" type="int" variable="$lvl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="param" description="The error message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The filename in which the error was triggered from" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The line number in which the error was triggered from" type="int" variable="$line">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$lvl</name>
          <default/>
          <type/>
        </argument>
        <argument line="67">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="67">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
        <argument line="67">
          <name>$line</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="80" package="Core">
        <name>HandleException</name>
        <full_name>HandleException</full_name>
        <docblock line="74">
          <description>Main method for handling exceptions</description>
          <long-description/>
          <tag line="74" name="param" description="The thrown exception" type="\Exception" variable="$e">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="74" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$e</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="96" package="Core">
        <name>DisplayError</name>
        <full_name>DisplayError</full_name>
        <docblock line="85">
          <description>Displays the error screen</description>
          <long-description/>
          <tag line="85" name="param" description="Error level. the error levels share the php constants error levels" type="int" variable="$lvl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="85" name="param" description="The error message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="param" description="The filename in which the error was triggered from" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="param" description="The line number in which the error was triggered from" type="int" variable="$line">
            <type by_reference="false">int</type>
          </tag>
          <tag line="85" name="param" description="Php thrown error or exception?" type="bool" variable="$php">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="85" name="param" description="Is this an exception?" type="bool" variable="$exception">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="85" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$lvl</name>
          <default/>
          <type/>
        </argument>
        <argument line="96">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="96">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
        <argument line="96">
          <name>$line</name>
          <default/>
          <type/>
        </argument>
        <argument line="96">
          <name>$php</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="96">
          <name>$exception</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="143" package="Core">
        <name>ErrorLevelToText</name>
        <full_name>ErrorLevelToText</full_name>
        <docblock line="137">
          <description>Converts a php error constant level to a string</description>
          <long-description/>
          <tag line="137" name="param" description="The error constant" type="int" variable="$lvl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="137" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$lvl</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\EventHandler.php" hash="6580cc548c9ce9f24646252d82c3a246" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/EventHandler.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="EventHandler"/>
      <tag line="2" name="contains" description="InvalidCallableException"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="20" package="Core">
      <extends/>
      <name>EventHandler</name>
      <full_name>\Core\EventHandler</full_name>
      <docblock line="13">
        <description>Responsible for initializing the controller, and
calling on the action method.</description>
        <long-description/>
        <tag line="13" name="author" description="Steven Wilson"/>
        <tag line="13" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="26" namespace="Core" package="Default">
        <name>$events</name>
        <default>array()</default>
        <docblock line="22">
          <description>An array of eventname =&gt; callbacks[]</description>
          <long-description/>
          <tag line="22" name="var" description="" type="callable[]">
            <type by_reference="false">callable[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="36" package="Core">
        <name>Trigger</name>
        <full_name>Trigger</full_name>
        <docblock line="28">
          <description>Triggers an event.</description>
          <long-description/>
          <tag line="28" name="param" description="The event name" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="28" name="param" description="Array of params to be passed to all callbacks&#13;&#10;   registered for this event." type="mixed[]" variable="$params">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="28" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$event</name>
          <default/>
          <type/>
        </argument>
        <argument line="36">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="99" package="Core">
        <name>Register</name>
        <full_name>Register</full_name>
        <docblock line="90">
          <description>Registers a new class-&gt;method or function to be called when an
event is fired.</description>
          <long-description/>
          <tag line="90" name="param" description="Name of the event to register for" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="param" description="the callback to proccess the event when fired" type="callable" variable="$callback">
            <type by_reference="false">callable</type>
          </tag>
          <tag line="90" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="90" name="throws" description="if the callback is not a callable" type="\Core\InvalidCallableException">
            <type by_reference="false">\Core\InvalidCallableException</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$event</name>
          <default/>
          <type/>
        </argument>
        <argument line="99">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Core" line="115" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidCallableException</name>
      <full_name>\Core\InvalidCallableException</full_name>
      <docblock line="110">
        <description>Invalid Callable Exception, Thrown when a callback is invalid</description>
        <long-description/>
        <tag line="110" name="package" description="Core"/>
        <tag line="110" name="subpackage" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\exceptions\ArgumentException.php" hash="1e20a12a538af6cbe18ceb0cadad78c4" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="16" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>ArgumentException</name>
      <full_name>\ArgumentException</full_name>
      <docblock line="9">
        <description>A common exception thrown by many classes for passing invalid arguments</description>
        <long-description/>
        <tag line="9" name="package" description="Core"/>
        <tag line="9" name="subpackage" description="Exceptions"/>
        <tag line="9" name="file" description="System/Core/Exceptions/ArgumentException.php"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\exceptions\ControllerNotFoundException.php" hash="b5cfe04e1aa35d881ad4036b2517aacc" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="15" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>ControllerNotFoundException</name>
      <full_name>\ControllerNotFoundException</full_name>
      <docblock line="9">
        <description>Thrown when the controller class does not exist in the controllers path</description>
        <long-description/>
        <tag line="9" name="package" description="Core"/>
        <tag line="9" name="subpackage" description="Exceptions"/>
        <tag line="9" name="see" description="\Core\Module::dispatch()" refers="\Core\Module::dispatch()"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\exceptions\DirectoryNotFoundException.php" hash="f68b92486501f9fc6a8b86a84d716114" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="16" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>DirectoryNotFoundException</name>
      <full_name>\DirectoryNotFoundException</full_name>
      <docblock line="9">
        <description>An exception thrown by the DirectoryInfo class when a directory could not be found.</description>
        <long-description/>
        <tag line="9" name="package" description="Core"/>
        <tag line="9" name="subpackage" description="Exceptions"/>
        <tag line="9" name="file" description="System/Core/Exceptions/DirectoryNotFoundException.php"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\exceptions\FileNotFoundException.php" hash="e7b763ecf1c0854f5b61a87616c15d13" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="16" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>FileNotFoundException</name>
      <full_name>\FileNotFoundException</full_name>
      <docblock line="9">
        <description>A common exception thrown by many classes when a file cannot be found.</description>
        <long-description/>
        <tag line="9" name="package" description="Core"/>
        <tag line="9" name="subpackage" description="Exceptions"/>
        <tag line="9" name="file" description="System/Core/Exceptions/FileNotFoundException.php"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\exceptions\IOException.php" hash="e48504e30476e97d3eb82ab28f81f416" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="16" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>IOException</name>
      <full_name>\IOException</full_name>
      <docblock line="9">
        <description>An exception thrown when filesystem releated errors occur</description>
        <long-description/>
        <tag line="9" name="package" description="Core"/>
        <tag line="9" name="subpackage" description="Exceptions"/>
        <tag line="9" name="file" description="System/Core/Exceptions/IOException.php"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\exceptions\MethodNotFoundException.php" hash="e907e049df24a071b854a96bc3fe2a99" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="16" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>MethodNotFoundException</name>
      <full_name>\MethodNotFoundException</full_name>
      <docblock line="9">
        <description>Thrown when the action method does not exist in the controller</description>
        <long-description/>
        <tag line="9" name="package" description="Core"/>
        <tag line="9" name="subpackage" description="Exceptions"/>
        <tag line="9" name="see" description="\Core\Module::dispatch()" refers="\Core\Module::dispatch()"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\exceptions\ModuleNotFoundException.php" hash="abd5cd11674ff911fb153415e3fbf8c0" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="16" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>ModuleNotFoundException</name>
      <full_name>\ModuleNotFoundException</full_name>
      <docblock line="9">
        <description>Thrown when a provided module path is not a valid directory.</description>
        <long-description/>
        <tag line="9" name="package" description="Core"/>
        <tag line="9" name="subpackage" description="Exceptions"/>
        <tag line="9" name="see" description="\Core\Module" refers="\Core\Module"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\exceptions\SecurityException.php" hash="a4073936999b195d9e7a8a157713f9ba" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="16" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>SecurityException</name>
      <full_name>\SecurityException</full_name>
      <docblock line="9">
        <description>A common exception thrown by many classes for security purposes.</description>
        <long-description/>
        <tag line="9" name="package" description="Core"/>
        <tag line="9" name="subpackage" description="Exceptions"/>
        <tag line="9" name="file" description="System/Core/Exceptions/SecurityException.php"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\Filesystem.php" hash="17f8350fb8c22d74831db0abbe5cc797" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Filesystem.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Filesystem"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="18" package="Core">
      <extends/>
      <name>Filesystem</name>
      <full_name>\Core\Filesystem</full_name>
      <docblock line="12">
        <description>A class built to easily manage files and directories</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="26" package="Core">
        <name>IsWritable</name>
        <full_name>IsWritable</full_name>
        <docblock line="20">
          <description>This method is used to return whether a file OR directory is writable.</description>
          <long-description/>
          <tag line="20" name="param" description="The complete path to the file or directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="69" package="Core">
        <name>IsReadable</name>
        <full_name>IsReadable</full_name>
        <docblock line="62">
          <description>This method is used to return whether a file OR directory is
readable and can be opened.</description>
          <long-description/>
          <tag line="62" name="param" description="The complete path to the file or directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="113" package="Core">
        <name>CreateDir</name>
        <full_name>CreateDir</full_name>
        <docblock line="106">
          <description>Creates a new directory</description>
          <long-description/>
          <tag line="106" name="param" description="The complete path to the new directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="106" name="param" description="The desired chmod on the folder" type="int" variable="$chmod">
            <type by_reference="false">int</type>
          </tag>
          <tag line="106" name="return" description="Returns true if the directory was created successfully." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="113">
          <name>$chmod</name>
          <default>511</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="143" package="Core">
        <name>RemoveDir</name>
        <full_name>RemoveDir</full_name>
        <docblock line="135">
          <description>Removes a directory.</description>
          <long-description>&lt;p&gt;You must use caution
with this method as its recursive, and will delete all sub files
and directories&lt;/p&gt;</long-description>
          <tag line="135" name="param" description="The complete path to the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="135" name="return" description="Returns true if the directory was removed successfully." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="218" package="Core">
        <name>ReadDir</name>
        <full_name>ReadDir</full_name>
        <docblock line="197">
          <description>Reads the contents a directory.</description>
          <long-description/>
          <tag line="197" name="param" description="The complete path to the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="197" name="param" description="Detailed information about files and fodlers?" type="bool" variable="$detailed">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="197" name="param" description="Set the desired level or sub levels to read&#13;&#10;as well, -1 is unlimited." type="int" variable="$recursive">
            <type by_reference="false">int</type>
          </tag>
          <tag line="197" name="return" description="| string[] &lt;br /&gt;&#13;&#10;     &lt;ul&gt;&#13;&#10;          &lt;li&gt;'type' =&gt; &quot;file&quot; OR &quot;folder&quot;&lt;/li&gt;&#13;&#10;          &lt;li&gt;'name' =&gt; &quot;Name of the file / folder&quot;&lt;/li&gt;&#13;&#10;          &lt;li&gt;'path' =&gt; &quot;/path/to/folder/&quot; (with trailing slash)&lt;/li&gt;&#13;&#10;          &lt;li&gt;'file_list' =&gt; array() // Array of sub files and Dirs // Folders Only!&lt;/li&gt;&#13;&#10;     &lt;/ul&gt;&#13;&#10;     IF $detailed is TRUE:&#13;&#10;     &lt;ul&gt;&#13;&#10;          &lt;li&gt;'size' =&gt; (int) filesize // Files only!&lt;/li&gt;&#13;&#10;          &lt;li&gt;'modified' =&gt; (int) Last modification timestamp&lt;/li&gt;&#13;&#10;          &lt;li&gt;'accessed' =&gt; (int) Last accessed timestamp&lt;/li&gt;&#13;&#10;     &lt;/ul&gt;" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="218">
          <name>$detailed</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="218">
          <name>$recursive</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="311" package="Core">
        <name>CreateFile</name>
        <full_name>CreateFile</full_name>
        <docblock line="302">
          <description>Creates a new file.</description>
          <long-description/>
          <tag line="302" name="param" description="The complete path to the new file" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="302" name="param" description="The contents to place in the file.&#13;&#10;  If contents are an array, they will be serialized using the php&#13;&#10;  function &lt;i&gt;serialize()&lt;/i&gt;. Default value is null" type="string|mixed[]" variable="$contents">
            <type by_reference="false">string</type>
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="302" name="return" description="Returns true if the file was created successfully" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="311">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
        <argument line="311">
          <name>$contents</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="348" package="Core">
        <name>DeleteFile</name>
        <full_name>DeleteFile</full_name>
        <docblock line="342">
          <description>Deletes a file</description>
          <long-description/>
          <tag line="342" name="param" description="The complete path to the file" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="342" name="return" description="Returns true if the file was deleted successfully" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="348">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="372" package="Core">
        <name>ListFiles</name>
        <full_name>ListFiles</full_name>
        <docblock line="366">
          <description>Lists an array of files in a directory</description>
          <long-description/>
          <tag line="366" name="param" description="The complete path to the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="366" name="return" description="Returns an array of all the filenames in the directory" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="372">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="429" package="Core">
        <name>ListFolders</name>
        <full_name>ListFolders</full_name>
        <docblock line="413">
          <description>Lists an array of folders in a directory</description>
          <long-description/>
          <tag line="413" name="param" description="The complete path to the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="413" name="param" description="Set the desired level or sub levels to read&#13;&#10;   as well, -1 is unlimited." type="int" variable="$recursive">
            <type by_reference="false">int</type>
          </tag>
          <tag line="413" name="return" description="&lt;br /&gt;&#13;&#10;     &lt;ul&gt;&#13;&#10;         &lt;li&gt;No Sub-Directories =&gt; (String) foldername&lt;/li&gt;&#13;&#10;         &lt;li&gt;With Sub-Directories =&gt; Array&#13;&#10;             &lt;ul&gt;&#13;&#10;                 &lt;li&gt;(String) Sub Directory Name&lt;/li&gt;&#13;&#10;             &lt;/ul&gt;&#13;&#10;         &lt;/li&gt;&#13;&#10;     &lt;/ul&gt;" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="429">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="429">
          <name>$recursive</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="485" package="Core">
        <name>Size</name>
        <full_name>Size</full_name>
        <docblock line="478">
          <description>Method is used to get the size of a file or folder</description>
          <long-description/>
          <tag line="478" name="param" description="The complete path to the file / directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="478" name="param" description="Format the bytes into human readable? ( 11.7 MB )" type="bool" variable="$format">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="478" name="return" description="" type="int|string">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="485">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="485">
          <name>$format</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="553" package="Core">
        <name>Copy</name>
        <full_name>Copy</full_name>
        <docblock line="546">
          <description>Copies the contents of a source file, to another file</description>
          <long-description/>
          <tag line="546" name="param" description="The complete path to the source file" type="string" variable="$src">
            <type by_reference="false">string</type>
          </tag>
          <tag line="546" name="param" description="The complete path to the destination file" type="string" variable="$dest">
            <type by_reference="false">string</type>
          </tag>
          <tag line="546" name="return" description="Returns true on success, or false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="553">
          <name>$src</name>
          <default/>
          <type/>
        </argument>
        <argument line="553">
          <name>$dest</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="587" package="Core">
        <name>Rename</name>
        <full_name>Rename</full_name>
        <docblock line="580">
          <description>Rename's a file</description>
          <long-description/>
          <tag line="580" name="param" description="The complete path to the source file / folder" type="string" variable="$src">
            <type by_reference="false">string</type>
          </tag>
          <tag line="580" name="param" description="The complete path to the destination file / folder" type="string" variable="$dest">
            <type by_reference="false">string</type>
          </tag>
          <tag line="580" name="return" description="Returns true on success, or false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="587">
          <name>$src</name>
          <default/>
          <type/>
        </argument>
        <argument line="587">
          <name>$dest</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="617" package="Core">
        <name>Delete</name>
        <full_name>Delete</full_name>
        <docblock line="608">
          <description>Determines if the path given is a folder OR a file,
and removes it accordinly using this class's RemoveDir and
DeleteFile methods</description>
          <long-description/>
          <tag line="608" name="param" description="The complete path to the source file / folder" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="608" name="param" description="An array of files / folders to remove" type="string[]" variable="$files">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="608" name="return" description="Returns true on success, or false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="617">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="617">
          <name>$files</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="663" package="Core">
        <name>FormatSize</name>
        <full_name>FormatSize</full_name>
        <docblock line="657">
          <description>Converts an int or float size into a human readable format</description>
          <long-description/>
          <tag line="657" name="param" description="The size to be converted" type="int|float" variable="$size">
            <type by_reference="false">int</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="657" name="return" description="The human readable size" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="663">
          <name>$size</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\io\DirectoryInfo.php" hash="8bc1e5185c5741925a1b5236f0ac104d" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/IO/DirectoryInfo.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="DirectoryInfo"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core\IO" line="20" package="Core\IO">
      <extends/>
      <name>DirectoryInfo</name>
      <full_name>\Core\IO\DirectoryInfo</full_name>
      <docblock line="12">
        <description>A Directory class used to preform advanced operations and provide information
about the directory.</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
        <tag line="12" name="subpackage" description="IO"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" namespace="Core\IO" package="Default">
        <name>$filelist</name>
        <default>array()</default>
        <docblock line="22">
          <description>An array of files in this directory</description>
          <long-description/>
          <tag line="22" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" namespace="Core\IO" package="Default">
        <name>$subdirs</name>
        <default>array()</default>
        <docblock line="28">
          <description>An array of sub directories in this directory</description>
          <long-description/>
          <tag line="28" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" namespace="Core\IO" package="Default">
        <name>$parentDir</name>
        <default/>
        <docblock line="34">
          <description>Full path to the parent directory</description>
          <long-description/>
          <tag line="34" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="Core\IO" package="Default">
        <name>$rootPath</name>
        <default/>
        <docblock line="40">
          <description>Full path to the current directory</description>
          <long-description/>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="61" package="Core\IO">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="46">
          <description>Class Constructor</description>
          <long-description/>
          <tag line="46" name="param" description="The full path the the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="Create the directory if it doesnt exist?" type="bool" variable="$create">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="46" name="throws" description="Thrown if the $path directory doesnt exist,&#13;&#10;  $create is set to true, and there was an error creating the directory" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="46" name="throws" description="If the $path directory does not exist,&#13;&#10;  and $create is set to false." type="\DirectoryNotFoundException">
            <type by_reference="false">\DirectoryNotFoundException</type>
          </tag>
          <tag line="46" name="throws" description="Thrown if the $path directory could not be opened&#13;&#10;  for various security reasons such as permissions." type="\SecurityException">
            <type by_reference="false">\SecurityException</type>
          </tag>
          <tag line="46" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="61">
          <name>$create</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="94" package="Core\IO">
        <name>name</name>
        <full_name>name</full_name>
        <docblock line="89">
          <description>Returns the base folder name</description>
          <long-description/>
          <tag line="89" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="104" package="Core\IO">
        <name>fullpath</name>
        <full_name>fullpath</full_name>
        <docblock line="99">
          <description>Returns the full path to the folder, including the folder name</description>
          <long-description/>
          <tag line="99" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="114" package="Core\IO">
        <name>fileCount</name>
        <full_name>fileCount</full_name>
        <docblock line="109">
          <description>Returns the amount of files in the directory</description>
          <long-description/>
          <tag line="109" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="124" package="Core\IO">
        <name>dirCount</name>
        <full_name>dirCount</full_name>
        <docblock line="119">
          <description>Returns the amount of subdirectories in the directory</description>
          <long-description/>
          <tag line="119" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="136" package="Core\IO">
        <name>hasFile</name>
        <full_name>hasFile</full_name>
        <docblock line="129">
          <description>Returns if a file exists within the directory</description>
          <long-description/>
          <tag line="129" name="param" description="The name of the file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="129" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="148" package="Core\IO">
        <name>hasDir</name>
        <full_name>hasDir</full_name>
        <docblock line="141">
          <description>Returns if a subdirectory exists within the directory</description>
          <long-description/>
          <tag line="141" name="param" description="The name of the subdirectory" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="141" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="148">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="161" package="Core\IO">
        <name>getFile</name>
        <full_name>getFile</full_name>
        <docblock line="153">
          <description>Fetches a file within the directory</description>
          <long-description/>
          <tag line="153" name="param" description="The name of the file to fetch" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="153" name="return" description="The fileinfo object of $name file, or&#13;&#10;  false if the file does not exist." type="\Core\IO\FileInfo|bool">
            <type by_reference="false">\Core\IO\FileInfo</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="180" package="Core\IO">
        <name>getFileList</name>
        <full_name>getFileList</full_name>
        <docblock line="172">
          <description>Fetches an array of files withing the directory</description>
          <long-description/>
          <tag line="172" name="param" description="Sort by asscending? If set to false,&#13;&#10;  files will be set descending." type="bool" variable="$sortAsc">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="172" name="return" description="The fileinfo object of each file in the directory" type="\Core\IO\FileInfo[]">
            <type by_reference="false">\Core\IO\FileInfo[]</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$sortAsc</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="203" package="Core\IO">
        <name>getDir</name>
        <full_name>getDir</full_name>
        <docblock line="191">
          <description>Fetches a subdirectory within the directory</description>
          <long-description/>
          <tag line="191" name="param" description="The name of the directory to fetch" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="191" name="throws" description="If the $path directory does not exist,&#13;&#10;  and $create is set to false." type="\DirectoryNotFoundException">
            <type by_reference="false">\DirectoryNotFoundException</type>
          </tag>
          <tag line="191" name="throws" description="Thrown if the $path directory could not be opened&#13;&#10;  for various security reasons such as permissions." type="\SecurityException">
            <type by_reference="false">\SecurityException</type>
          </tag>
          <tag line="191" name="return" description="The fileinfo object of $name file." type="\Core\IO\DirectoryInfo">
            <type by_reference="false">\Core\IO\DirectoryInfo</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="218" package="Core\IO">
        <name>getDirList</name>
        <full_name>getDirList</full_name>
        <docblock line="208">
          <description>Fetches an array of subdirectory's within the directory</description>
          <long-description/>
          <tag line="208" name="param" description="Sort by asscending? If set to false,&#13;&#10;  files will be set descending." type="bool" variable="$sortAsc">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="208" name="return" description="Returns an array of DirectoryInfo for each&#13;&#10;  sub directory. If there was an exception thrown while opening a sub directory, a&#13;&#10;  string filepath will be in place of the DirectoryInfo class." type="\Core\IO\DirectoryInfo[]|string[]">
            <type by_reference="false">\Core\IO\DirectoryInfo[]</type>
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$sortAsc</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="242" package="Core\IO">
        <name>getFilesWithExt</name>
        <full_name>getFilesWithExt</full_name>
        <docblock line="234">
          <description>Fetches an array of files with a specified file extension</description>
          <long-description/>
          <tag line="234" name="param" description="The file extension, without the dot." type="string" variable="$ext">
            <type by_reference="false">string</type>
          </tag>
          <tag line="234" name="return" description="The fileinfo object of each file in the directory&#13;&#10;  with the specified extension" type="\Core\IO\FileInfo[]">
            <type by_reference="false">\Core\IO\FileInfo[]</type>
          </tag>
        </docblock>
        <argument line="242">
          <name>$ext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="266" package="Core\IO">
        <name>getFilesModifiedSince</name>
        <full_name>getFilesModifiedSince</full_name>
        <docblock line="258">
          <description>Fetches an array of files that have been modified since the timestamp provided</description>
          <long-description/>
          <tag line="258" name="param" description="The timestamp" type="int" variable="$timestamp">
            <type by_reference="false">int</type>
          </tag>
          <tag line="258" name="return" description="The fileinfo object of each file in the directory&#13;&#10;  that have been modified since the provided timestamp" type="\Core\IO\FileInfo[]">
            <type by_reference="false">\Core\IO\FileInfo[]</type>
          </tag>
        </docblock>
        <argument line="266">
          <name>$timestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="291" package="Core\IO">
        <name>getFilesModifiedBefore</name>
        <full_name>getFilesModifiedBefore</full_name>
        <docblock line="283">
          <description>Fetches an array of files that have been modified before the timestamp provided</description>
          <long-description/>
          <tag line="283" name="param" description="The timestamp" type="int" variable="$timestamp">
            <type by_reference="false">int</type>
          </tag>
          <tag line="283" name="return" description="The fileinfo object of each file in the directory&#13;&#10;  that have been modified before the provided timestamp" type="\Core\IO\FileInfo[]">
            <type by_reference="false">\Core\IO\FileInfo[]</type>
          </tag>
        </docblock>
        <argument line="291">
          <name>$timestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="316" package="Core\IO">
        <name>getFilesAccessedSince</name>
        <full_name>getFilesAccessedSince</full_name>
        <docblock line="308">
          <description>Fetches an array of files that have been accessed since the timestamp provided</description>
          <long-description/>
          <tag line="308" name="param" description="The timestamp" type="int" variable="$timestamp">
            <type by_reference="false">int</type>
          </tag>
          <tag line="308" name="return" description="The fileinfo object of each file in the directory&#13;&#10;  that have been accessed since the provided timestamp" type="\Core\IO\FileInfo[]">
            <type by_reference="false">\Core\IO\FileInfo[]</type>
          </tag>
        </docblock>
        <argument line="316">
          <name>$timestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="341" package="Core\IO">
        <name>getFilesAccessedBefore</name>
        <full_name>getFilesAccessedBefore</full_name>
        <docblock line="333">
          <description>Fetches an array of files that have been accessed before the timestamp provided</description>
          <long-description/>
          <tag line="333" name="param" description="The timestamp" type="int" variable="$timestamp">
            <type by_reference="false">int</type>
          </tag>
          <tag line="333" name="return" description="The fileinfo object of each file in the directory&#13;&#10;  that have been accessed before the provided timestamp" type="\Core\IO\FileInfo[]">
            <type by_reference="false">\Core\IO\FileInfo[]</type>
          </tag>
        </docblock>
        <argument line="341">
          <name>$timestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="368" package="Core\IO">
        <name>chmod</name>
        <full_name>chmod</full_name>
        <docblock line="359">
          <description>Fetches or sets the permissions of the directory</description>
          <long-description/>
          <tag line="359" name="param" description="The permission level to set on the directory (chmod).&#13;&#10;  If left unset, the current chmod will be returned." type="int" variable="$ch">
            <type by_reference="false">int</type>
          </tag>
          <tag line="359" name="return" description="Returns the current folder chmod if $ch is left null,&#13;&#10;  otherwise, returns the success value of setting the permissions." type="int|bool">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="368">
          <name>$ch</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="390" package="Core\IO">
        <name>moveTo</name>
        <full_name>moveTo</full_name>
        <docblock line="376">
          <description>Moves the directory and all of its contents to a new path.</description>
          <long-description>&lt;p&gt;The old directory will not be removed until the new directory is created successfully.&lt;/p&gt;</long-description>
          <tag line="376" name="param" description="The full path to move the contents of this&#13;&#10;  folder to." type="string" variable="$newPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="376" name="throws" description="Thrown if there was an error creating the new directory path" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="376" name="throws" description="Thrown if the $newPath directory could not be opened&#13;&#10;  for various security reasons such as permissions." type="\SecurityException">
            <type by_reference="false">\SecurityException</type>
          </tag>
          <tag line="376" name="return" description="Returns the success value of the folder being moved." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="390">
          <name>$newPath</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="418" package="Core\IO">
        <name>rename</name>
        <full_name>rename</full_name>
        <docblock line="407">
          <description>Renames the directory.</description>
          <long-description/>
          <tag line="407" name="param" description="The new name of the directory" type="string" variable="$newName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="407" name="throws" description="Thrown if there was an error creating the new directory path" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="407" name="throws" description="Thrown if the directory could not be opened&#13;&#10;  for various security reasons such as permissions." type="\SecurityException">
            <type by_reference="false">\SecurityException</type>
          </tag>
          <tag line="407" name="return" description="Returns the success value of the folder being renamed." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="418">
          <name>$newName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="439" package="Core\IO">
        <name>truncate</name>
        <full_name>truncate</full_name>
        <docblock line="432">
          <description>Completly empties a directory of all files and subfolders</description>
          <long-description/>
          <tag line="432" name="throws" description="Thrown if there was an error removing a file or directory" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="432" name="return" description="Returns the success value of the folder being truncated." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="488" package="Core\IO">
        <name>createDir</name>
        <full_name>createDir</full_name>
        <docblock line="480">
          <description>Creates a new sub directory</description>
          <long-description/>
          <tag line="480" name="param" description="The basename of the subdirectory" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="480" name="param" description="The folder permissions (chmod)" type="int" variable="$chmod">
            <type by_reference="false">int</type>
          </tag>
          <tag line="480" name="return" description="Returns the success value of the folder being created." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="488">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="488">
          <name>$chmod</name>
          <default>511</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="520" package="Core\IO">
        <name>removeDir</name>
        <full_name>removeDir</full_name>
        <docblock line="508">
          <description>Removes a sub directory.</description>
          <long-description>&lt;p&gt;This method should be used with caution as
it is recursive, and will delete all sub files and directories in the
specified folder.&lt;/p&gt;</long-description>
          <tag line="508" name="param" description="The basename of the subdirectory" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="508" name="throws" description="Thrown if the subdir does not exist" type="\DirectoryNotFoundException">
            <type by_reference="false">\DirectoryNotFoundException</type>
          </tag>
          <tag line="508" name="throws" description="Thrown if there was an error removing a file or directory" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="508" name="return" description="Returns the success value of the folder being removed." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="520">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="547" package="Core\IO">
        <name>createFile</name>
        <full_name>createFile</full_name>
        <docblock line="537">
          <description>Creates a new file withing the directory.</description>
          <long-description/>
          <tag line="537" name="param" description="The basename of the new file." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="537" name="param" description="The contents to be put into the file.&#13;&#10;  If an array is passed, each array index will be treated as a new line&#13;&#10;  (implode(&quot;\n&quot;, $contents))" type="string|string[]" variable="$contents">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="537" name="return" description="Returns the success value of the file being created." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="547">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="547">
          <name>$contents</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="582" package="Core\IO">
        <name>removeFile</name>
        <full_name>removeFile</full_name>
        <docblock line="575">
          <description>Removes a file from the directory.</description>
          <long-description/>
          <tag line="575" name="param" description="The basename of the new file." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="575" name="return" description="Returns the success value of the file being deleted." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="582">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="604" package="Core\IO">
        <name>size</name>
        <full_name>size</full_name>
        <docblock line="593">
          <description>Fetches the size of all files within the directory, including
those in all subdirectories (full recursive).</description>
          <long-description>&lt;p&gt;This method will not factor in the size of files within directories
that cannot be opened due to permissions.&lt;/p&gt;</long-description>
          <tag line="593" name="param" description="Format the size into a human readable format?" type="bool" variable="$format">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="593" name="return" description="Returns the size of all sub files recursivly" type="float|string">
            <type by_reference="false">float</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="604">
          <name>$format</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="636" package="Core\IO">
        <name>isWritable</name>
        <full_name>isWritable</full_name>
        <docblock line="631">
          <description>Returns whether this directory is writable or not.</description>
          <long-description/>
          <tag line="631" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core\IO" line="658" package="Core\IO">
        <name>refresh</name>
        <full_name>refresh</full_name>
        <docblock line="652">
          <description>Scans the current directory, and setting the filelist and subdir list
variables.</description>
          <long-description/>
          <tag line="652" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="690" package="Core\IO">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="685">
          <description>When used as a string, this object returns the fullpath to the folder.</description>
          <long-description/>
          <tag line="685" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\io\FileInfo.php" hash="3d4b54dee3947cb09427bc7a4a2fd1fe" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/IO/FileInfo.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="DirectoryInfo"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core\IO" line="20" package="Core\IO">
      <extends/>
      <name>FileInfo</name>
      <full_name>\Core\IO\FileInfo</full_name>
      <docblock line="12">
        <description>A File class used to preform advanced operations and provide information
about the file.</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
        <tag line="12" name="subpackage" description="IO"/>
      </docblock>
      <constant namespace="Core\IO" line="26" package="Core\IO">
        <name>OVERWRITE</name>
        <full_name>OVERWRITE</full_name>
        <value>0</value>
        <docblock line="22">
          <description>File mode OVERWRITE</description>
          <long-description/>
          <tag line="22" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core\IO" line="32" package="Core\IO">
        <name>PREPEND</name>
        <full_name>PREPEND</full_name>
        <value>1</value>
        <docblock line="28">
          <description>File mode PREPEND</description>
          <long-description/>
          <tag line="28" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core\IO" line="38" package="Core\IO">
        <name>APPEND</name>
        <full_name>APPEND</full_name>
        <value>2</value>
        <docblock line="34">
          <description>File mode APPEND</description>
          <long-description/>
          <tag line="34" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="44" namespace="Core\IO" package="Default">
        <name>$parentDir</name>
        <default/>
        <docblock line="40">
          <description>The full path to the file's parent directory</description>
          <long-description/>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" namespace="Core\IO" package="Default">
        <name>$filepath</name>
        <default/>
        <docblock line="46">
          <description>The full path to the file's current location, including the filename</description>
          <long-description/>
          <tag line="46" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="65" package="Core\IO">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="52">
          <description>Class Constructor</description>
          <long-description/>
          <tag line="52" name="param" description="The full path the the file" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="param" description="Create the file if it doesnt exist?" type="bool" variable="$create">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="52" name="throws" description="Thrown if the $path directory doesnt exist,&#13;&#10;  $create is set to true, and there was an error creating the file." type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="52" name="throws" description="If the $path file does not exist, and $create is set to false." type="\FileNotFoundException">
            <type by_reference="false">\FileNotFoundException</type>
          </tag>
          <tag line="52" name="throws" description="Thrown if the $path is not a file at all, but rather a directory" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="52" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="65">
          <name>$create</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="102" package="Core\IO">
        <name>getContents</name>
        <full_name>getContents</full_name>
        <docblock line="94">
          <description>Returns the contents of the file</description>
          <long-description/>
          <tag line="94" name="param" description="If set to true, the contents will be returned as an array.&#13;&#10;  Each array index will be a new line within the file." type="bool" variable="$asArray">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="94" name="return" description="" type="string|string[]">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$asArray</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="117" package="Core\IO">
        <name>putContents</name>
        <full_name>putContents</full_name>
        <docblock line="107">
          <description>Sets or adds contents of the file</description>
          <long-description/>
          <tag line="107" name="param" description="The contents to be stored in the file.&#13;&#10;  If an array is passed, each array index will be treated as a new line within&#13;&#10;  the file." type="string|string[]" variable="$contents">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="107" name="param" description="The write mode for the contents (See class constants)." type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="107" name="return" description="Returns TRUE on success, or FALSE on failure." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$contents</name>
          <default/>
          <type/>
        </argument>
        <argument line="117">
          <name>$mode</name>
          <default>self::OVERWRITE</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="138" package="Core\IO">
        <name>name</name>
        <full_name>name</full_name>
        <docblock line="133">
          <description>Returns the base file name</description>
          <long-description/>
          <tag line="133" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="148" package="Core\IO">
        <name>filepath</name>
        <full_name>filepath</full_name>
        <docblock line="143">
          <description>Returns the full path to the file, including the file name</description>
          <long-description/>
          <tag line="143" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="161" package="Core\IO">
        <name>getParentDir</name>
        <full_name>getParentDir</full_name>
        <docblock line="153">
          <description>Returns the directory that the file is located in</description>
          <long-description/>
          <tag line="153" name="param" description="If set to true, The string path will be&#13;&#10;  returned, otherwise the DirectoryInfo object of the dir will be returned" type="bool" variable="$asString">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="153" name="return" description="" type="string|\Core\IO\DirectoryInfo">
            <type by_reference="false">string</type>
            <type by_reference="false">\Core\IO\DirectoryInfo</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$asString</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="180" package="Core\IO">
        <name>moveTo</name>
        <full_name>moveTo</full_name>
        <docblock line="166">
          <description>Moves the file to a new location.</description>
          <long-description>&lt;p&gt;The old file will not be removed until the new file is created successfully.&lt;/p&gt;</long-description>
          <tag line="166" name="param" description="The full path to move the file to" type="string" variable="$newPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="param" description="If set, the file will also be renamed in its new location" type="string" variable="$newName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="throws" description="Thrown if there was an error creating the new directory path" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="166" name="throws" description="Thrown if the $newPath directory could not be opened&#13;&#10;  for various security reasons such as permissions." type="\SecurityException">
            <type by_reference="false">\SecurityException</type>
          </tag>
          <tag line="166" name="return" description="Returns true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$newPath</name>
          <default/>
          <type/>
        </argument>
        <argument line="180">
          <name>$newName</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="209" package="Core\IO">
        <name>copyTo</name>
        <full_name>copyTo</full_name>
        <docblock line="200">
          <description>Creates a copy of the file to the specified file location</description>
          <long-description/>
          <tag line="200" name="param" description="The name of the file to copy to" type="string" variable="$fileName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="200" name="param" description="The path to the new file if not in the current&#13;&#10;  file directory." type="string" variable="$newPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="200" name="return" description="Returns true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="209">
          <name>$fileName</name>
          <default/>
          <type/>
        </argument>
        <argument line="209">
          <name>$newPath</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="225" package="Core\IO">
        <name>rename</name>
        <full_name>rename</full_name>
        <docblock line="218">
          <description>Renames the file.</description>
          <long-description/>
          <tag line="218" name="param" description="The new name of the file" type="string" variable="$newName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="218" name="return" description="Returns true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="225">
          <name>$newName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="241" package="Core\IO">
        <name>truncate</name>
        <full_name>truncate</full_name>
        <docblock line="236">
          <description>Completly removes all contents of the file</description>
          <long-description/>
          <tag line="236" name="return" description="Returns true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="259" package="Core\IO">
        <name>modified</name>
        <full_name>modified</full_name>
        <docblock line="253">
          <description>Gets last amodification time of file</description>
          <long-description/>
          <tag line="253" name="return" description="Returns the time the file was last modified,&#13;&#10;or FALSE on failure. The time is returned as a Unix timestamp." type="int|bool">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="270" package="Core\IO">
        <name>accessed</name>
        <full_name>accessed</full_name>
        <docblock line="264">
          <description>Gets last access time of file</description>
          <long-description/>
          <tag line="264" name="return" description="Returns the time the file was last accessed,&#13;&#10;or FALSE on failure. The time is returned as a Unix timestamp." type="int|bool">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="285" package="Core\IO">
        <name>size</name>
        <full_name>size</full_name>
        <docblock line="275">
          <description>Gets the size for the file</description>
          <long-description/>
          <tag line="275" name="param" description="Format the file size to human readable format?" type="bool" variable="$format">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="275" name="param" description="Do we think this file to be over 2 GB? This is used to get&#13;&#10;  an accurate filesize via the command line on 32 bit systems." type="bool" variable="$gt2gb">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="275" name="return" description="Returns false on failure, a float if $format is false, or&#13;&#10;  a string if $format is true" type="float|string|bool">
            <type by_reference="false">float</type>
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="285">
          <name>$format</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="285">
          <name>$gt2gb</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="341" package="Core\IO">
        <name>chmod</name>
        <full_name>chmod</full_name>
        <docblock line="332">
          <description>Fetches or sets the permissions of the file</description>
          <long-description/>
          <tag line="332" name="param" description="The permission level to set on the file (chmod).&#13;&#10;  If left unset, the current chmod will be returned." type="int" variable="$ch">
            <type by_reference="false">int</type>
          </tag>
          <tag line="332" name="return" description="Returns the current file chmod if $ch is left null,&#13;&#10;  otherwise, returns the success value of setting the permissions." type="int|bool">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="341">
          <name>$ch</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="357" package="Core\IO">
        <name>mimeType</name>
        <full_name>mimeType</full_name>
        <docblock line="349">
          <description>Fetches the mime type of this file.</description>
          <long-description/>
          <tag line="349" name="return" description="Returns an array if there is more then&#13;&#10;  1 mime type (Ordered by most common to least), or a string if&#13;&#10;  there is only 1 mime type. Returns false if there is no entry&#13;&#10;  for the given file extenstion" type="string|string[]">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="367" package="Core\IO">
        <name>ext</name>
        <full_name>ext</full_name>
        <docblock line="362">
          <description>Gets the file's extension</description>
          <long-description/>
          <tag line="362" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="377" package="Core\IO">
        <name>isWritable</name>
        <full_name>isWritable</full_name>
        <docblock line="372">
          <description>Returns whether this file is writable or not.</description>
          <long-description/>
          <tag line="372" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="394" package="Core\IO">
        <name>isReadable</name>
        <full_name>isReadable</full_name>
        <docblock line="389">
          <description>Returns whether this file is readable or not.</description>
          <long-description/>
          <tag line="389" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\IO" line="411" package="Core\IO">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="406">
          <description>When used as a string, this object returns the fullpath to the file.</description>
          <long-description/>
          <tag line="406" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Module.php" hash="d113fa38c5dd3cf5ff4920ef7a0569e6" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Module.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Module"/>
    </docblock>
    <include line="117" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="19" package="Core">
      <extends/>
      <name>Module</name>
      <full_name>\Core\Module</full_name>
      <docblock line="12">
        <description>The module class is used to hold information about requested modules,
 as well as execute its controller action methods upon request.</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="25" namespace="Core" package="Default">
        <name>$modules</name>
        <default>array()</default>
        <docblock line="21">
          <description>An array of loaded modules</description>
          <long-description/>
          <tag line="21" name="var" description="" type="\Core\Module[]">
            <type by_reference="false">\Core\Module[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="31" namespace="Core" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="27">
          <description>The module name</description>
          <long-description/>
          <tag line="27" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" namespace="Core" package="Default">
        <name>$rootPath</name>
        <default/>
        <docblock line="33">
          <description>The root path to the module</description>
          <long-description/>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" namespace="Core" package="Default">
        <name>$xml</name>
        <default/>
        <docblock line="39">
          <description>If the module.xml has been requested, its XMLObject is stored here.</description>
          <long-description/>
          <tag line="39" name="var" description="" type="Object">
            <type by_reference="false">Object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="49" namespace="Core" package="Default">
        <name>$log</name>
        <default/>
        <docblock line="45">
          <description>Holds the plexis Logger object</description>
          <long-description/>
          <tag line="45" name="var" description="" type="\Core\Logger">
            <type by_reference="false">\Core\Logger</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="58" package="Core">
        <name>Get</name>
        <full_name>Get</full_name>
        <docblock line="51">
          <description>Main method used to fetch and load modules.</description>
          <long-description>&lt;p&gt;This method acts
like a factory, and stores all loaded modules statically.&lt;/p&gt;</long-description>
          <tag line="51" name="param" description="The name of the module folder" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="Returns a module object" type="\Core\Module">
            <type by_reference="false">\Core\Module</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="73" package="Core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="66">
          <description>Module Constructor.</description>
          <long-description>&lt;p&gt;This method should never be called
by another library or module, but rather called by the
internal Module::Get method&lt;/p&gt;</long-description>
          <tag line="66" name="param" description="The name of the module folder" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="109" package="Core">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="96">
          <description>Invokes a controller and action within the module.</description>
          <long-description/>
          <tag line="96" name="param" description="The controller name to call. Case Sensative!" type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="param" description="The controller method name to execute. Case IN-sensative." type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="param" description="The parameters to pass to the controller method." type="string[]" variable="$params">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="96" name="throws" description="when the controller file cant be found" type="\ControllerNotFoundException">
            <type by_reference="false">\ControllerNotFoundException</type>
          </tag>
          <tag line="96" name="throws" description="when the controller doesnt have the given action,&#13;&#10;  or the action method is not a public method" type="\MethodNotFoundException">
            <type by_reference="false">\MethodNotFoundException</type>
          </tag>
          <tag line="96" name="return" description="Returns whatever the method returns, Most likely null." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$controller</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$action</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="142" package="Core">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="137">
          <description>Returns the modules name</description>
          <long-description/>
          <tag line="137" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="153" package="Core">
        <name>getRootPath</name>
        <full_name>getRootPath</full_name>
        <docblock line="147">
          <description>Returns the path to the modules root folder</description>
          <long-description/>
          <tag line="147" name="return" description="Returns the set controller path, or false&#13;&#10;  if the path isnt set" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="164" package="Core">
        <name>getModuleXml</name>
        <full_name>getModuleXml</full_name>
        <docblock line="158">
          <description>Returns the data stored in the Modules XML file.</description>
          <long-description/>
          <tag line="158" name="return" description="Returns an object of class SimpleXMLElement with properties&#13;&#10;  containing the data held within the XML document" type="\SimpleXMLElement">
            <type by_reference="false">\SimpleXMLElement</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="177" package="Core">
        <name>hasAdmin</name>
        <full_name>hasAdmin</full_name>
        <docblock line="172">
          <description>Returns whetther the module supports admin integration</description>
          <long-description/>
          <tag line="172" name="return" description="Returns true if the module has admin pages, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="191" package="Core">
        <name>install</name>
        <full_name>install</full_name>
        <docblock line="182">
          <description>Installs the module and defines its routes with the router</description>
          <long-description/>
          <tag line="182" name="throws" description="Thrown if there is the install method in&#13;&#10;  the admin extension controller returns false. Also thrown if&#13;&#10;  if the install method itself throws an exception." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="182" name="return" description="Returns true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="247" package="Core">
        <name>uninstall</name>
        <full_name>uninstall</full_name>
        <docblock line="237">
          <description>Removes the module from the database, declaring the module as Uninstalled</description>
          <long-description/>
          <tag line="237" name="throws" description="Thrown if there is the uninstall method in&#13;&#10;  the admin extension controller returns false. Also thrown if&#13;&#10;  if the uninstall method itself throws an exception." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="237" name="return" description="Returns true if the module was uninstalled. May return&#13;&#10;  false if the module was never installed in the first place." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="283" package="Core">
        <name>isInstalled</name>
        <full_name>isInstalled</full_name>
        <docblock line="278">
          <description>Returns whether or not the module is installed in the plexis database.</description>
          <long-description/>
          <tag line="278" name="return" description="Returns true if the module is installed, false otherwise." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Request.php" hash="85b90e20e044004584a9841556d6c3cd" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Request.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Request"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="20" package="Core">
      <extends/>
      <name>Request</name>
      <full_name>\Core\Request</full_name>
      <docblock line="12">
        <description>This class provides information for the current Request.</description>
        <long-description>&lt;p&gt;Such information
like all the Post and GET data, the URI string, the Remote IP, Referer,
the base URL, website root, and more.&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <constant namespace="Core" line="26" package="Core">
        <name>PROTOCOL_HTTP</name>
        <full_name>PROTOCOL_HTTP</full_name>
        <value>'http'</value>
        <docblock line="22">
          <description>HTTP protocol method</description>
          <long-description/>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core" line="32" package="Core">
        <name>PROTOCOL_HTTPS</name>
        <full_name>PROTOCOL_HTTPS</full_name>
        <value>'https'</value>
        <docblock line="28">
          <description>HTTPS protocol method</description>
          <long-description/>
          <tag line="28" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core" line="38" package="Core">
        <name>PROTOCOL_FTP</name>
        <full_name>PROTOCOL_FTP</full_name>
        <value>'ftp'</value>
        <docblock line="34">
          <description>FTP protocol method</description>
          <long-description/>
          <tag line="34" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core" line="44" package="Core">
        <name>PROTOCOL_SSL</name>
        <full_name>PROTOCOL_SSL</full_name>
        <value>'ssl'</value>
        <docblock line="40">
          <description>SSL protocol method</description>
          <long-description/>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core" line="50" package="Core">
        <name>METHOD_POST</name>
        <full_name>METHOD_POST</full_name>
        <value>'POST'</value>
        <docblock line="46">
          <description>POST method</description>
          <long-description/>
          <tag line="46" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core" line="56" package="Core">
        <name>METHOD_GET</name>
        <full_name>METHOD_GET</full_name>
        <value>'GET'</value>
        <docblock line="52">
          <description>GET method</description>
          <long-description/>
          <tag line="52" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core" line="62" package="Core">
        <name>METHOD_PUT</name>
        <full_name>METHOD_PUT</full_name>
        <value>'PUT'</value>
        <docblock line="58">
          <description>PUT method</description>
          <long-description/>
          <tag line="58" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core" line="68" package="Core">
        <name>METHOD_DELETE</name>
        <full_name>METHOD_DELETE</full_name>
        <value>'DELETE'</value>
        <docblock line="64">
          <description>DELETE method</description>
          <long-description/>
          <tag line="64" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="74" namespace="Core" package="Default">
        <name>$protocol</name>
        <default>'http'</default>
        <docblock line="70">
          <description>Current protocol</description>
          <long-description/>
          <tag line="70" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="80" namespace="Core" package="Default">
        <name>$baseurl</name>
        <default/>
        <docblock line="76">
          <description>the site's base url (the root of the website)</description>
          <long-description/>
          <tag line="76" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="86" namespace="Core" package="Default">
        <name>$domain</name>
        <default/>
        <docblock line="82">
          <description>Http domain name (no trailing paths after the .com)</description>
          <long-description/>
          <tag line="82" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="93" namespace="Core" package="Default">
        <name>$webroot</name>
        <default/>
        <docblock line="88">
          <description>The web root is the trailing path after the domain name.</description>
          <long-description>&lt;p&gt;The base url is the Domain name, plus the webroot&lt;/p&gt;</long-description>
          <tag line="88" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="99" namespace="Core" package="Default">
        <name>$queryString</name>
        <default/>
        <docblock line="95">
          <description>The query string passed with the request</description>
          <long-description/>
          <tag line="95" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="105" namespace="Core" package="Default">
        <name>$clientIp</name>
        <default/>
        <docblock line="101">
          <description>The remote IP address connected to this request</description>
          <long-description/>
          <tag line="101" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="114" package="Core">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="108">
          <description>Class Constructor (called automatically)</description>
          <long-description>&lt;p&gt;Initializes the class properties&lt;/p&gt;</long-description>
          <tag line="108" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="148" package="Core">
        <name>Input</name>
        <full_name>Input</full_name>
        <docblock line="143">
          <description>Returns data from the 'php://input'</description>
          <long-description/>
          <tag line="143" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="158" package="Core">
        <name>Method</name>
        <full_name>Method</full_name>
        <docblock line="153">
          <description>Returns the request http method (GET, POST, PUT etc)</description>
          <long-description/>
          <tag line="153" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="174" package="Core">
        <name>Referer</name>
        <full_name>Referer</full_name>
        <docblock line="169">
          <description>Returns the reffering website url</description>
          <long-description/>
          <tag line="169" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="194" package="Core">
        <name>Query</name>
        <full_name>Query</full_name>
        <docblock line="185">
          <description>Returns the url query string</description>
          <long-description/>
          <tag line="185" name="param" description="The GET array id to return. Leave null to return all GET data" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="185" name="param" description="The default return value if the GET array key doesnt&#13;&#10;   exist. Default is null." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="185" name="return" description="Returns $default if the GET key doesnt exist. Returns a&#13;&#10;  string[] if no $key is provided, or the value of $key if the array key exists" type="string|string[]|mixed">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="194">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="211" package="Core">
        <name>Post</name>
        <full_name>Post</full_name>
        <docblock line="202">
          <description>Returns the POST var specified, or all POST data</description>
          <long-description/>
          <tag line="202" name="param" description="The POST array id to return. Leave null to return all POST data" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="202" name="param" description="The default return value if the POST array key doesnt&#13;&#10;   exist. Default is null." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="202" name="return" description="Returns $default if the POST key doesnt exist. Returns a&#13;&#10;  string[] if no $key is provided, or the value of $key if the array key exists." type="string|string[]|mixed">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="211">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="228" package="Core">
        <name>Cookie</name>
        <full_name>Cookie</full_name>
        <docblock line="219">
          <description>Returns the Cookie name specified, or all Cookie data</description>
          <long-description/>
          <tag line="219" name="param" description="The cookie name to return. Leave null to return all cookie data" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="219" name="param" description="The default return value if the Cookie name doesnt&#13;&#10;   exist. Default is null." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="219" name="return" description="Returns $default if the Cookie name doesnt exist. Returns a&#13;&#10;  string[] if no $key is provided, or the value of $key if the cookie exists." type="string|string[]|mixed">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="228">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="228">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="243" package="Core">
        <name>Accepts</name>
        <full_name>Accepts</full_name>
        <docblock line="236">
          <description>Returns the an array of what formats the client is accepting</description>
          <long-description/>
          <tag line="236" name="param" description="The type to return" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="236" name="todo" description="Finish the method, and provide better description"/>
          <tag line="236" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$type</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="257" package="Core">
        <name>AcceptsLanguage</name>
        <full_name>AcceptsLanguage</full_name>
        <docblock line="248">
          <description>Returns a string or string[] of what languages the client accepts</description>
          <long-description/>
          <tag line="248" name="param" description="If a language is provided here, the method will return&#13;&#10;   true or false based on whehter the client accepts the language" type="string" variable="$lang">
            <type by_reference="false">string</type>
          </tag>
          <tag line="248" name="return" description="Returns the language, or an array of&#13;&#10;languages the client accpets. If $lang is set, then this method returns&#13;&#10;a bool based on whehter the client accepts the language" type="string|string[]|bool">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$lang</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="275" package="Core">
        <name>ClientIp</name>
        <full_name>ClientIp</full_name>
        <docblock line="269">
          <description>Returns the Remote connected IP address</description>
          <long-description/>
          <tag line="269" name="return" description="The validated remote IP address. Returns 0.0.0.0 if&#13;&#10;  the IP address could not be determined" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="334" package="Core">
        <name>IsAjax</name>
        <full_name>IsAjax</full_name>
        <docblock line="329">
          <description>Returns the whether the request is an ajax request</description>
          <long-description/>
          <tag line="329" name="return" description="If the requeset is an ajax request (HTTP_X_REQUESTED_WITH =&gt; xmlhttprequest)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="345" package="Core">
        <name>Header</name>
        <full_name>Header</full_name>
        <docblock line="339">
          <description>Returns the value of the specified header passed</description>
          <long-description/>
          <tag line="339" name="param" description="The header name to be returned" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="339" name="return" description="Returns false if the header isnt set" type="string|bool">
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="345">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="356" package="Core">
        <name>BaseUrl</name>
        <full_name>BaseUrl</full_name>
        <docblock line="351">
          <description>Returns the site's base URL</description>
          <long-description/>
          <tag line="351" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="366" package="Core">
        <name>Protocol</name>
        <full_name>Protocol</full_name>
        <docblock line="361">
          <description>Returns the current requests protocol</description>
          <long-description/>
          <tag line="361" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Response.php" hash="48d6e1b87feb4183d22f911e74c912f5" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Response.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Response"/>
      <tag line="2" name="contains" description="OutputSentException"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="21" package="Core">
      <extends/>
      <name>Response</name>
      <full_name>\Core\Response</full_name>
      <docblock line="13">
        <description>This class is used to send a proper formated reponse to the client.</description>
        <long-description>&lt;p&gt;You can set headers, cookies, status codes, and protocol within
this class.&lt;/p&gt;</long-description>
        <tag line="13" name="author" description="Steven Wilson"/>
        <tag line="13" name="package" description="Core"/>
      </docblock>
      <constant namespace="Core" line="26" package="Core">
        <name>HTTP_10</name>
        <full_name>HTTP_10</full_name>
        <value>'HTTP/1.0'</value>
        <docblock line="23">
          <description>HTTP protocol 1.0</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="Core" line="31" package="Core">
        <name>HTTP_11</name>
        <full_name>HTTP_11</full_name>
        <value>'HTTP/1.1'</value>
        <docblock line="28">
          <description>HTTP protocol 1.1</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="37" namespace="Core" package="Default">
        <name>$status</name>
        <default>200</default>
        <docblock line="33">
          <description>Status code to be returned in the response</description>
          <long-description/>
          <tag line="33" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="43" namespace="Core" package="Default">
        <name>$protocol</name>
        <default>self::HTTP_11</default>
        <docblock line="39">
          <description>Response Protocol (HTTP/1.0 | 1.1)</description>
          <long-description/>
          <tag line="39" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="49" namespace="Core" package="Default">
        <name>$charset</name>
        <default>'UTF-8'</default>
        <docblock line="45">
          <description>Content encoding</description>
          <long-description/>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="55" namespace="Core" package="Default">
        <name>$contentType</name>
        <default>'text/html'</default>
        <docblock line="51">
          <description>Content Mime Type</description>
          <long-description/>
          <tag line="51" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="61" namespace="Core" package="Default">
        <name>$headers</name>
        <default>array()</default>
        <docblock line="57">
          <description>Array of headers to be sent with the response</description>
          <long-description/>
          <tag line="57" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="67" namespace="Core" package="Default">
        <name>$cookies</name>
        <default>array()</default>
        <docblock line="63">
          <description>Array of cookies to be sent with the response</description>
          <long-description/>
          <tag line="63" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="73" namespace="Core" package="Default">
        <name>$body</name>
        <default>null</default>
        <docblock line="69">
          <description>The response body (contents)</description>
          <long-description/>
          <tag line="69" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="79" namespace="Core" package="Default">
        <name>$cacheDirectives</name>
        <default>array()</default>
        <docblock line="75">
          <description>Array of cahce directives to be sent with the response</description>
          <long-description/>
          <tag line="75" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="85" namespace="Core" package="Default">
        <name>$outputSent</name>
        <default>false</default>
        <docblock line="81">
          <description>Used to determine if output / headers have been sent already</description>
          <long-description/>
          <tag line="81" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="91" namespace="Core" package="Default">
        <name>$statusCodes</name>
        <default>array(100 =&gt; 'Continue', 101 =&gt; 'Switching Protocols', 200 =&gt; 'OK', 201 =&gt; 'Created', 202 =&gt; 'Accepted', 203 =&gt; 'Non-Authoritative Information', 204 =&gt; 'No Content', 205 =&gt; 'Reset Content', 206 =&gt; 'Partial Content', 300 =&gt; 'Multiple Choices', 301 =&gt; 'Moved Permanently', 302 =&gt; 'Found', 303 =&gt; 'See Other', 304 =&gt; 'Not Modified', 305 =&gt; 'Use Proxy', 307 =&gt; 'Temporary Redirect', 400 =&gt; 'Bad Request', 401 =&gt; 'Unauthorized', 402 =&gt; 'Payment Required', 403 =&gt; 'Forbidden', 404 =&gt; 'Not Found', 405 =&gt; 'Method Not Allowed', 406 =&gt; 'Not Acceptable', 407 =&gt; 'Proxy Authentication Required', 408 =&gt; 'Request Timeout', 409 =&gt; 'Conflict', 410 =&gt; 'Gone', 411 =&gt; 'Length Required', 412 =&gt; 'Precondition Failed', 413 =&gt; 'Request Entity Too Large', 414 =&gt; 'Request-URI Too Long', 415 =&gt; 'Unsupported Media Type', 416 =&gt; 'Requested Range Not Satisfiable', 417 =&gt; 'Expectation Failed', 500 =&gt; 'Internal Server Error', 501 =&gt; 'Not Implemented', 502 =&gt; 'Bad Gateway', 503 =&gt; 'Service Unavailable', 504 =&gt; 'Gateway Timeout', 505 =&gt; 'HTTP Version Not Supported', 509 =&gt; 'Bandwidth Limit Exceeded')</default>
        <docblock line="87">
          <description>Array of $statusCode =&gt; $description</description>
          <long-description/>
          <tag line="87" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="152" package="Core">
        <name>Send</name>
        <full_name>Send</full_name>
        <docblock line="144">
          <description>This method takes all the response headers, cookies, and current
buffered contents, and sends them back to the client.</description>
          <long-description>&lt;p&gt;After this
methid is called, any output will most likely cause a content length
error for our client.&lt;/p&gt;</long-description>
          <tag line="144" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="188" package="Core">
        <name>Body</name>
        <full_name>Body</full_name>
        <docblock line="179">
          <description>Sets or returns the body of the response, based on
if a variable is passed setting the contents or not.</description>
          <long-description/>
          <tag line="179" name="param" description="The body contents. Leave null if retrieving&#13;&#10;  the current set contents." type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="179" name="return" description="If $content is left null, the current&#13;&#10;  contents are returned" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$content</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="207" package="Core">
        <name>AppendBody</name>
        <full_name>AppendBody</full_name>
        <docblock line="201">
          <description>Appends data to the current body</description>
          <long-description/>
          <tag line="201" name="param" description="The body contents to append." type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="201" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="207">
          <name>$content</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="223" package="Core">
        <name>StatusCode</name>
        <full_name>StatusCode</full_name>
        <docblock line="216">
          <description>Sets or returns the status code</description>
          <long-description/>
          <tag line="216" name="param" description="The status code to be set" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="216" name="return" description="If $code is left null, the current status&#13;&#10;  code is returned" type="int|void">
            <type by_reference="false">int</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="223">
          <name>$code</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="250" package="Core">
        <name>ContentType</name>
        <full_name>ContentType</full_name>
        <docblock line="243">
          <description>Sets or returns the content type</description>
          <long-description/>
          <tag line="243" name="param" description="The content type to be set" type="string" variable="$val">
            <type by_reference="false">string</type>
          </tag>
          <tag line="243" name="return" description="If $val is left null, the current content&#13;&#10;  type is returned" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$val</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="270" package="Core">
        <name>Encoding</name>
        <full_name>Encoding</full_name>
        <docblock line="263">
          <description>Sets or returns the content encoding</description>
          <long-description/>
          <tag line="263" name="param" description="The content encoding to be set" type="string" variable="$val">
            <type by_reference="false">string</type>
          </tag>
          <tag line="263" name="return" description="If $val is left null, the current content&#13;&#10;  encoding is returned" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="270">
          <name>$val</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="290" package="Core">
        <name>SetHeader</name>
        <full_name>SetHeader</full_name>
        <docblock line="283">
          <description>Sets a header $key to the given $value</description>
          <long-description/>
          <tag line="283" name="param" description="The header key or name" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="283" name="param" description="The header key's or name's value to be set" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="283" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="290">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="290">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="320" package="Core">
        <name>SetCookie</name>
        <full_name>SetCookie</full_name>
        <docblock line="311">
          <description>Sets a cookies value</description>
          <long-description/>
          <tag line="311" name="param" description="The cookie name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="311" name="param" description="The cookies value" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="311" name="param" description="The UNIX timestamp the cookie expires" type="int" variable="$expires">
            <type by_reference="false">int</type>
          </tag>
          <tag line="311" name="param" description="The cookie path" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="311" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="320">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="320">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="320">
          <name>$expires</name>
          <default/>
          <type/>
        </argument>
        <argument line="320">
          <name>$path</name>
          <default>'/'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="340" package="Core">
        <name>Protocol</name>
        <full_name>Protocol</full_name>
        <docblock line="333">
          <description>Sets or returns the http protocol</description>
          <long-description/>
          <tag line="333" name="param" description="The protocol to use (HTTP_10 | HTTP_11)" type="string" variable="$code">
            <type by_reference="false">string</type>
          </tag>
          <tag line="333" name="return" description="If $code is null, the current protocol&#13;&#10;  is returned" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="340">
          <name>$code</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="372" package="Core">
        <name>Redirect</name>
        <full_name>Redirect</full_name>
        <docblock line="358">
          <description>This method sets a redirect header, and status code.</description>
          <long-description>&lt;p&gt;When this
method is called, if the $wait param is greater then 1, headers
will be sent.&lt;/p&gt;</long-description>
          <tag line="358" name="param" description="The redirect URL. If a relative path&#13;&#10;  is passed here, the site's URL will be appended" type="string" variable="$location">
            <type by_reference="false">string</type>
          </tag>
          <tag line="358" name="param" description="The wait time (in seconds) before the redirect&#13;&#10;  takes affect. If set to a non 0 value, the page will still be&#13;&#10;   rendered. Default is 0 seconds." type="int" variable="$wait">
            <type by_reference="false">int</type>
          </tag>
          <tag line="358" name="param" description="The redirect status. 301 is moved permanently,&#13;&#10;  and 307 is a temporary redirect. Default is 301." type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="358" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="372">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
        <argument line="372">
          <name>$wait</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="372">
          <name>$status</name>
          <default>301</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="405" package="Core">
        <name>HasRedirects</name>
        <full_name>HasRedirects</full_name>
        <docblock line="400">
          <description>Returns a bool of whether a redirect has been set or not</description>
          <long-description/>
          <tag line="400" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="415" package="Core">
        <name>ClearRedirects</name>
        <full_name>ClearRedirects</full_name>
        <docblock line="410">
          <description>Removes all current redirects that are set</description>
          <long-description/>
          <tag line="410" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="429" package="Core">
        <name>ClearHeaders</name>
        <full_name>ClearHeaders</full_name>
        <docblock line="424">
          <description>Removes all current headers that are set</description>
          <long-description/>
          <tag line="424" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="439" package="Core">
        <name>ClearCookies</name>
        <full_name>ClearCookies</full_name>
        <docblock line="434">
          <description>Removes all current cookies that are modified</description>
          <long-description/>
          <tag line="434" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="450" package="Core">
        <name>Reset</name>
        <full_name>Reset</full_name>
        <docblock line="444">
          <description>Removes all current changes to the response, including the current
body buffer</description>
          <long-description/>
          <tag line="444" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="466" package="Core">
        <name>OutputSent</name>
        <full_name>OutputSent</full_name>
        <docblock line="461">
          <description>Returns a bool based on whether the headers and output have been sent</description>
          <long-description/>
          <tag line="461" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="484" package="Core">
        <name>SendCookies</name>
        <full_name>SendCookies</full_name>
        <docblock line="479">
          <description>Sends all cookies</description>
          <long-description/>
          <tag line="479" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="499" package="Core">
        <name>SendHeader</name>
        <full_name>SendHeader</full_name>
        <docblock line="492">
          <description>Sends a header</description>
          <long-description/>
          <tag line="492" name="param" description="The name of the header" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="492" name="param" description="The value of the header" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="492" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="499">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="499">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="520" package="Core">
        <name>SendContentLength</name>
        <full_name>SendContentLength</full_name>
        <docblock line="515">
          <description>Sends the contents length</description>
          <long-description/>
          <tag line="515" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="534" package="Core">
        <name>SendContentType</name>
        <full_name>SendContentType</full_name>
        <docblock line="529">
          <description>Sends the content type</description>
          <long-description/>
          <tag line="529" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="551" package="Core">
        <name>SendBody</name>
        <full_name>SendBody</full_name>
        <docblock line="546">
          <description>Echo's out the body contents</description>
          <long-description/>
          <tag line="546" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Core" line="563" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>OutputSentException</name>
      <full_name>\Core\OutputSentException</full_name>
      <docblock line="557">
        <description>Output Sent Exception, Thrown when headers have already been set, and a Repsonse method is called</description>
        <long-description/>
        <tag line="557" name="package" description="Core"/>
        <tag line="557" name="subpackage" description="Exceptions"/>
        <tag line="557" name="file" description="System/Core/Response.php"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\router\Route.php" hash="46add8081bcd0c8b2bca562fea76a596" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Router/Route.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Route"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core\Router" line="19" package="Core\Router">
      <extends/>
      <name>Route</name>
      <full_name>\Core\Router\Route</full_name>
      <docblock line="12">
        <description>A Route object, used to compare URI's for route matches</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
        <tag line="12" name="subpackage" description="Router"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" namespace="Core\Router" package="Default">
        <name>$match</name>
        <default/>
        <docblock line="21">
          <description>The regex match for this route.</description>
          <long-description/>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" namespace="Core\Router" package="Default">
        <name>$replace</name>
        <default/>
        <docblock line="27">
          <description>The replacement for the match, in a route that successfulyy
tests against the match</description>
          <long-description/>
          <tag line="27" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="42" package="Core\Router">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="34">
          <description>Class Constructor.</description>
          <long-description/>
          <tag line="34" name="param" description="The regular expresion to test routes against" type="string" variable="$match">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="a replacement route, or an array or 2 routes,&#13;&#10;  the first being the replacement for a normal route, and the second&#13;&#10;  for ajax requests." type="string|string[]" variable="$replace">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$match</name>
          <default/>
          <type/>
        </argument>
        <argument line="42">
          <name>$replace</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="72" package="Core\Router">
        <name>match</name>
        <full_name>match</full_name>
        <docblock line="62">
          <description>Tests the passed route against the routes regular expression for a match.</description>
          <long-description/>
          <tag line="62" name="param" description="The URI route to test." type="string" variable="$route">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="param" description="[Reference Variable] Returns the controller, action, and&#13;&#10;  params if the route is a match." type="string[]" variable="$data">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="62" name="return" description="Returns true if the route is a match for the Route's regular expression,&#13;&#10;  false otherwise." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$route</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$data</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="122" package="Core\Router">
        <name>getMatch</name>
        <full_name>getMatch</full_name>
        <docblock line="117">
          <description>Returns the regular expression for this route.</description>
          <long-description/>
          <tag line="117" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="132" package="Core\Router">
        <name>getReplacement</name>
        <full_name>getReplacement</full_name>
        <docblock line="127">
          <description>Returns the replacments for this route.</description>
          <long-description/>
          <tag line="127" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\router\RouteCollection.php" hash="d21e01beba5a448f83ad72be1010aafe" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Router/RouteCollection.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="RouteCollection"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core\Router" line="19" package="Core\Router">
      <extends/>
      <name>RouteCollection</name>
      <full_name>\Core\Router\RouteCollection</full_name>
      <docblock line="12">
        <description>A container class to hold route information for the router.</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
        <tag line="12" name="subpackage" description="Router"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" namespace="Core\Router" package="Default">
        <name>$routes</name>
        <default>array()</default>
        <docblock line="21">
          <description>A Multi-Demensional array of route information</description>
          <long-description/>
          <tag line="21" name="var" description="" type="\Core\Router\Route[]">
            <type by_reference="false">\Core\Router\Route[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="34" package="Core\Router">
        <name>addRoute</name>
        <full_name>addRoute</full_name>
        <docblock line="27">
          <description>Adds a route for a module, and URI segements</description>
          <long-description/>
          <tag line="27" name="param" description="The route object to add" type="\Core\Router\Route" variable="$route">
            <type by_reference="false">\Core\Router\Route</type>
          </tag>
          <tag line="27" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$route</name>
          <default/>
          <type>\Core\Router\Route</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="47" package="Core\Router">
        <name>merge</name>
        <full_name>merge</full_name>
        <docblock line="40">
          <description>Merges another RouteCollections route with this collection.</description>
          <long-description/>
          <tag line="40" name="param" description="The route collection to merge with" type="\Core\Router\RouteCollection" variable="$Routes">
            <type by_reference="false">\Core\Router\RouteCollection</type>
          </tag>
          <tag line="40" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$Routes</name>
          <default/>
          <type>\Core\Router\RouteCollection</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="61" package="Core\Router">
        <name>removeRoute</name>
        <full_name>removeRoute</full_name>
        <docblock line="54">
          <description>Removes the specified route from the list of routes.</description>
          <long-description/>
          <tag line="54" name="param" description="The regular expression to remove" type="string" variable="$route">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$route</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="75" package="Core\Router">
        <name>hasRoute</name>
        <full_name>hasRoute</full_name>
        <docblock line="66">
          <description>Returns whether there is a match to the URI route supplied.</description>
          <long-description/>
          <tag line="66" name="param" description="The route string" type="string" variable="$route">
            <type by_reference="false">string</type>
          </tag>
          <tag line="66" name="param" description="[Reference Variable] Returns the controller,&#13;&#10;  action, and params if the route is a match." type="string[]" variable="$match">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="66" name="return" description="Returns whether or not a match was found" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$route</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$match</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core\Router" line="92" package="Core\Router">
        <name>getRoutes</name>
        <full_name>getRoutes</full_name>
        <docblock line="87">
          <description>Returns a list of all defined routes in this stack.</description>
          <long-description/>
          <tag line="87" name="return" description="" type="\Core\Router\Route[]">
            <type by_reference="false">\Core\Router\Route[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Router.php" hash="919fdf9e1090e286103527f5972bb2da" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/Router.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Router"/>
    </docblock>
    <include line="84" type="Include" package="Default">
      <name/>
    </include>
    <include line="411" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="26" package="Core">
      <extends/>
      <name>Router</name>
      <full_name>\Core\Router</full_name>
      <docblock line="14">
        <description>The Router is used to determine which module and action to load for
the current request.</description>
        <long-description>&lt;p&gt;When called, this object works with the Request object to determine
the current uri, and analyze it to determine which module, controller,
and method to load. This object also handles the adding and removing of
routes that are stored in the plexis database.&lt;/p&gt;</long-description>
        <tag line="14" name="author" description="Steven Wilson"/>
        <tag line="14" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="32" namespace="Core" package="Default">
        <name>$routed</name>
        <default>false</default>
        <docblock line="28">
          <description>Have we routed the url yet?</description>
          <long-description/>
          <tag line="28" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="38" namespace="Core" package="Default">
        <name>$RequestHandled</name>
        <default>false</default>
        <docblock line="34">
          <description>Specified whether the main request was handled</description>
          <long-description/>
          <tag line="34" name="var" description="" type="\Core\Module">
            <type by_reference="false">\Core\Module</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="44" namespace="Core" package="Default">
        <name>$DB</name>
        <default/>
        <docblock line="40">
          <description>The Plexis Database Object</description>
          <long-description/>
          <tag line="40" name="var" description="" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="50" namespace="Core" package="Default">
        <name>$Routes</name>
        <default/>
        <docblock line="46">
          <description>The route stack of all defined routes</description>
          <long-description/>
          <tag line="46" name="var" description="" type="\Core\Router\RouteCollection">
            <type by_reference="false">\Core\Router\RouteCollection</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="56" namespace="Core" package="Default">
        <name>$Log</name>
        <default/>
        <docblock line="52">
          <description>Holds the plexis Logger object</description>
          <long-description/>
          <tag line="52" name="var" description="" type="\Core\Logger">
            <type by_reference="false">\Core\Logger</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="65" package="Core">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="58">
          <description>This method analyzes the current URL request, and loads the
module in which claims the URL route.</description>
          <long-description>&lt;p&gt;This method is called
automatically, and will not do anything if called again.&lt;/p&gt;</long-description>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="103" package="Core">
        <name>HandleRequest</name>
        <full_name>HandleRequest</full_name>
        <docblock line="98">
          <description>Executes the main request.</description>
          <long-description/>
          <tag line="98" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="179" package="Core">
        <name>Execute</name>
        <full_name>Execute</full_name>
        <docblock line="167">
          <description>This method analyzes a uri string, and executes the module
tied to the route.</description>
          <long-description>&lt;p&gt;If the route cannot be parsed, a 404 error
will be thrown&lt;/p&gt;</long-description>
          <tag line="167" name="param" description="The uri string to be routed." type="string" variable="$route">
            <type by_reference="false">string</type>
          </tag>
          <tag line="167" name="param" description="Proccess the route in ajax mode?&#13;&#10;  If the main request is ajax, then setting this to&#13;&#10;  true will execute the route as a normal HTTP request." type="bool" variable="$isAjax">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="167" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$route</name>
          <default/>
          <type/>
        </argument>
        <argument line="179">
          <name>$isAjax</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="241" package="Core">
        <name>Forge</name>
        <full_name>Forge</full_name>
        <docblock line="223">
          <description>This method is similar to execute, but does not call on
the module to preform any actions.</description>
          <long-description>&lt;p&gt;Instead, the data required
to correctly invoke the module, as well as the Core\Module
itself is returned.&lt;/p&gt;</long-description>
          <tag line="223" name="param" description="The uri string to be routed." type="string" variable="$route">
            <type by_reference="false">string</type>
          </tag>
          <tag line="223" name="param" description="[Reference Variable] This variable will&#13;&#10;  pass back the request data, such as the controller, action,&#13;&#10;  and parameters to be used to invoke the module. This variable&#13;&#10;  will be empty if the module could not be routed." type="string[]" variable="$data">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="223" name="param" description="Proccess the route in ajax mode?&#13;&#10;  If the main request is ajax, then setting this to&#13;&#10;  true will execute the route as a normal HTTP request." type="bool" variable="$isAjax">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="223" name="return" description="Returns false if the request leads to a 404,&#13;&#10;  otherwise the module object will be returned." type="\Core\Module|bool">
            <type by_reference="false">\Core\Module</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="241">
          <name>$route</name>
          <default/>
          <type/>
        </argument>
        <argument line="241">
          <name>$data</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="241">
          <name>$isAjax</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="269" package="Core">
        <name>AddRoutes</name>
        <full_name>AddRoutes</full_name>
        <docblock line="262">
          <description>Adds a list new route rules in the database for future route matching</description>
          <long-description/>
          <tag line="262" name="param" description="The route stack container" type="\Core\Router\RouteCollection" variable="$routes">
            <type by_reference="false">\Core\Router\RouteCollection</type>
          </tag>
          <tag line="262" name="return" description="Returns true if successfull, false otherwise." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="269">
          <name>$routes</name>
          <default/>
          <type>\Core\Router\RouteCollection</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="292" package="Core">
        <name>RemoveRoute</name>
        <full_name>RemoveRoute</full_name>
        <docblock line="285">
          <description>Removes a defined route from the database</description>
          <long-description/>
          <tag line="285" name="param" description="The routes array key in routes.php" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="285" name="return" description="Returns true on success" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="292">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="312" package="Core">
        <name>FetchRoutes</name>
        <full_name>FetchRoutes</full_name>
        <docblock line="307">
          <description>Returns the route collection containing all defined routes.</description>
          <long-description/>
          <tag line="307" name="return" description="" type="\Core\Router\RouteCollection">
            <type by_reference="false">\Core\Router\RouteCollection</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="328" package="Core">
        <name>LoadModule</name>
        <full_name>LoadModule</full_name>
        <docblock line="317">
          <description>Checks a module and action for a matching route.</description>
          <long-description/>
          <tag line="317" name="param" description="The route to map for a module" type="string" variable="$route">
            <type by_reference="false">string</type>
          </tag>
          <tag line="317" name="param" description="[Reference Variable] This variable will&#13;&#10;  pass back the request data, such as the controller, action,&#13;&#10;  and parameters to be used to invoke the module." type="string[]" variable="$data">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="317" name="return" description="Returns false if there is no database route,&#13;&#10;  or if the module matched does not exist." type="\Core\Module|bool">
            <type by_reference="false">\Core\Module</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="328">
          <name>$route</name>
          <default/>
          <type/>
        </argument>
        <argument line="328">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\XssFilter.php" hash="59fb140fb93aed0788cc8f10b33a2ae6" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Core/XssFilter.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="XssFilter"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="21" package="Core">
      <extends/>
      <name>XssFilter</name>
      <full_name>\Core\XssFilter</full_name>
      <docblock line="12">
        <description>A Cross Site Scripting security filter class</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="author" description="Daniel Morris"/>
        <tag line="12" name="contributors" description="Gianpaolo Racca, Ghislain Picard, Marco Wandschneider, Chris Tobin and Andrew Eddie."/>
        <tag line="12" name="copyright" description="Daniel Morris, Plexis Dev team"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <constant namespace="Core" line="27" package="Core">
        <name>WHITELIST</name>
        <full_name>WHITELIST</full_name>
        <value>0</value>
        <docblock line="23">
          <description>Constant containing the cleaning method of whitelist</description>
          <long-description/>
          <tag line="23" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Core" line="33" package="Core">
        <name>BLACKLIST</name>
        <full_name>BLACKLIST</full_name>
        <value>1</value>
        <docblock line="29">
          <description>Constant containing the cleaning method of blacklist</description>
          <long-description/>
          <tag line="29" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="39" namespace="Core" package="Default">
        <name>$tagsArray</name>
        <default>array()</default>
        <docblock line="35">
          <description>Array of tags to be filtered</description>
          <long-description/>
          <tag line="35" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" namespace="Core" package="Default">
        <name>$attrArray</name>
        <default>array()</default>
        <docblock line="41">
          <description>Array of attributes to be filtered</description>
          <long-description/>
          <tag line="41" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" namespace="Core" package="Default">
        <name>$tagsMethod</name>
        <default>self::WHITELIST</default>
        <docblock line="47">
          <description>Tags list cleaning method (whitelist or blacklist)</description>
          <long-description/>
          <tag line="47" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" namespace="Core" package="Default">
        <name>$attrMethod</name>
        <default>self::WHITELIST</default>
        <docblock line="53">
          <description>Attributes list cleaning method (whitelist or blacklist)</description>
          <long-description/>
          <tag line="53" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" namespace="Core" package="Default">
        <name>$useBlacklist</name>
        <default>true</default>
        <docblock line="59">
          <description>Automatically remove blacklisted tags and attrubutes</description>
          <long-description/>
          <tag line="59" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="70" package="Core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="65">
          <description>Constructor.</description>
          <long-description/>
          <tag line="65" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="93" package="Core">
        <name>addTag</name>
        <full_name>addTag</full_name>
        <docblock line="85">
          <description>Adds a tag to the array of tags to be filtered.</description>
          <long-description>&lt;p&gt;Adding tags does not clear
the current array of tags&lt;/p&gt;</long-description>
          <tag line="85" name="param" description="The html tag name to be filtered" type="string" variable="$tag">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$tag</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="108" package="Core">
        <name>addTagsArray</name>
        <full_name>addTagsArray</full_name>
        <docblock line="100">
          <description>Adds an array of tags to be filtered.</description>
          <long-description>&lt;p&gt;Adding tags does not clear
the current array of tags&lt;/p&gt;</long-description>
          <tag line="100" name="param" description="An array of html tag names to be filtered" type="string[]" variable="$tags">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$tags</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="124" package="Core">
        <name>addAttr</name>
        <full_name>addAttr</full_name>
        <docblock line="116">
          <description>Adds an attribute to the array of attributes to be filtered.</description>
          <long-description>&lt;p&gt;Adding attributes does not clear the current array of attributes&lt;/p&gt;</long-description>
          <tag line="116" name="param" description="The html attribute name to be filtered" type="string" variable="$attr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="116" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$attr</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="139" package="Core">
        <name>addAttrArray</name>
        <full_name>addAttrArray</full_name>
        <docblock line="131">
          <description>Adds an array of attributes to be filtered.</description>
          <long-description>&lt;p&gt;Adding attributes does not clear
the current array of attributes&lt;/p&gt;</long-description>
          <tag line="131" name="param" description="An array of html attribute names to be filtered" type="string[]" variable="$attrs">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="131" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="158" package="Core">
        <name>setTagsMethod</name>
        <full_name>setTagsMethod</full_name>
        <docblock line="147">
          <description>Sets the tag method for filtering.</description>
          <long-description/>
          <tag line="147" name="param" description="The filter method. This value will either be&#13;&#10;  the constant value of XssFilter::WHITELIST or XssFilter::BLACKLIST.&#13;&#10;  If set to whitelist, all tags that are NOT defined will be removed.&#13;&#10;  If set to blacklist, all tags defined &lt;b&gt;will&lt;/b&gt; be removed from the source,&#13;&#10;  and all non-defined tags will &lt;b&gt;not&lt;/b&gt; be filtered out" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="147" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="177" package="Core">
        <name>setAttrMethod</name>
        <full_name>setAttrMethod</full_name>
        <docblock line="166">
          <description>Sets the attribute method for filtering.</description>
          <long-description/>
          <tag line="166" name="param" description="The filter method. This value will either be&#13;&#10;  the constant value of XssFilter::WHITELIST or XssFilter::BLACKLIST.&#13;&#10;  If set to whitelist, all attributes that are NOT defined will be removed.&#13;&#10;  If set to blacklist, all attributes defined &lt;b&gt;will&lt;/b&gt; be removed from the source,&#13;&#10;  and all non-defined attributes will &lt;b&gt;not&lt;/b&gt; be filtered out" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="166" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="194" package="Core">
        <name>useBlacklist</name>
        <full_name>useBlacklist</full_name>
        <docblock line="185">
          <description>Defines whether the filter should use the blacklist of tags and attributes,
and automatically remove them.</description>
          <long-description>&lt;p&gt;Blacklist is enabled by default.&lt;/p&gt;</long-description>
          <tag line="185" name="param" description="Auto remove blacklisted tags and attributes? Blacklisted tags and&#13;&#10;  attributes are defined in the &quot;system/config/xssfilter.class.php&quot; config file." type="bool" variable="$bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="185" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$bool</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="207" package="Core">
        <name>clean</name>
        <full_name>clean</full_name>
        <docblock line="199">
          <description>Cleans a source string, using the Xss Filter tags and methods defined.</description>
          <long-description/>
          <tag line="199" name="param" description="The source to be cleaned. May also be an array&#13;&#10;  of strings to be cleaned" type="string|string[]" variable="$source">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="199" name="return" description="The cleaned source" type="string|string[]">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="207">
          <name>$source</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="237" package="Core">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="230">
          <description>Removes all unwanted tags and attributes</description>
          <long-description/>
          <tag line="230" name="param" description="The source to be cleaned." type="string" variable="$source">
            <type by_reference="false">string</type>
          </tag>
          <tag line="230" name="return" description="Returns the cleaned source" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$source</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="255" package="Core">
        <name>filterTags</name>
        <full_name>filterTags</full_name>
        <docblock line="248">
          <description>Internal method for removing all unwanted tags</description>
          <long-description/>
          <tag line="248" name="param" description="The source to be cleaned." type="string" variable="$source">
            <type by_reference="false">string</type>
          </tag>
          <tag line="248" name="return" description="Returns the cleaned source" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="255">
          <name>$source</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="417" package="Core">
        <name>filterAttr</name>
        <full_name>filterAttr</full_name>
        <docblock line="410">
          <description>Internal method for removing all unwanted attributes</description>
          <long-description/>
          <tag line="410" name="param" description="An array of attribute sets in a tag" type="string[]" variable="$attrSet">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="410" name="return" description="Returns an array of filtered atrribute sets" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="417">
          <name>$attrSet</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="507" package="Core">
        <name>decode</name>
        <full_name>decode</full_name>
        <docblock line="500">
          <description>Decodes all html entities from the source</description>
          <long-description/>
          <tag line="500" name="param" description="The source to be converted." type="string" variable="$source">
            <type by_reference="false">string</type>
          </tag>
          <tag line="500" name="return" description="Returns the converted source" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="507">
          <name>$source</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\helpers\ajax.php" hash="e45846d785add27cc0a318021d9f664a" package="Helpers\Ajax">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Helpers/Ajax.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="author" description="Plexis Dev Team"/>
      <tag line="2" name="package" description="Helpers"/>
      <tag line="2" name="subpackage" description="Ajax"/>
    </docblock>
    <function namespace="global" line="26" package="Helpers\Ajax">
      <name>dataTablesFormat</name>
      <full_name>\dataTablesFormat</full_name>
      <docblock line="13">
        <description>Formats an array into a jQuery.datatables format</description>
        <long-description/>
        <tag line="13" name="param" description="An array of mixed array, containing the data&#13;&#10;  to format." type="array[]" variable="$data">
          <type by_reference="false">array[]</type>
        </tag>
        <tag line="13" name="param" description="Total records, before filtering (i.e. the&#13;&#10;  total number of records in the database)" type="int" variable="$totalRecords">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="param" description="Total records, after filtering&#13;&#10;  (i.e. the total number of records after filtering has been applied -&#13;&#10;  not just the number of records being returned in this result set)" type="int" variable="$totalDisplayRecords">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="return" description="Returns the correctly formatted json_encoded array." type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="26">
        <name>$data</name>
        <default/>
        <type>array</type>
      </argument>
      <argument line="26">
        <name>$totalRecords</name>
        <default>false</default>
        <type/>
      </argument>
      <argument line="26">
        <name>$totalDisplayRecords</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="system\helpers\html.php" hash="d381eef6ae5063202baea3ef03be5cac" package="Helpers\Html">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Helpers/Html.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="author" description="Plexis Dev Team"/>
      <tag line="2" name="package" description="Helpers"/>
      <tag line="2" name="subpackage" description="Html"/>
    </docblock>
    <function namespace="global" line="20" package="Helpers\Html">
      <name>br</name>
      <full_name>\br</full_name>
      <docblock line="13">
        <description>Creates a number of html breaks to be repeated</description>
        <long-description/>
        <tag line="13" name="param" description="The number of breaks" type="int" variable="$count">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="return" description="A string containing the number ($count) of breaks" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="20">
        <name>$count</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="36" package="Helpers\Html">
      <name>nbs</name>
      <full_name>\nbs</full_name>
      <docblock line="29">
        <description>Creates a number of non-breaking spaces to be repeated</description>
        <long-description/>
        <tag line="29" name="param" description="The number of spaces" type="int" variable="$count">
          <type by_reference="false">int</type>
        </tag>
        <tag line="29" name="return" description="A string containing the number ($count) of non-breaking spaces" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="36">
        <name>$count</name>
        <default/>
        <type/>
      </argument>
    </function>
  </file>
  <file path="system\helpers\io.php" hash="6c76e0a56e42e49fa64660cde367cb6e" package="Helpers\IO">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Helpers/Io.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="author" description="Plexis Dev Team"/>
      <tag line="2" name="package" description="Helpers"/>
      <tag line="2" name="subpackage" description="IO"/>
    </docblock>
    <function namespace="global" line="24" package="Helpers\IO">
      <name>path</name>
      <full_name>\path</full_name>
      <docblock line="13">
        <description>Combines several string arguments into a file path.</description>
        <long-description/>
        <tag line="13" name="param" description="The pieces of the path, passed as&#13;&#10;  individual arguments. Each argument can be a single dimmensional&#13;&#10;  array of paths, a string folder / filename, or a mixture of the two.&#13;&#10;  Dots may also be passed ( . &amp; .. ) to change directory levels" type="string|string[]" variable="$parts">
          <type by_reference="false">string</type>
          <type by_reference="false">string[]</type>
        </tag>
        <tag line="13" name="return" description="Returns the full path using the correct system&#13;&#10;  directory separater" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="24">
        <name>$parts</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="68" package="Helpers\IO">
      <name>truePath</name>
      <full_name>\truePath</full_name>
      <docblock line="56">
        <description>This function is to return a complete root path from a relative path.</description>
        <long-description>&lt;p&gt;This function is meant to replace PHP's extremely buggy realpath().&lt;/p&gt;</long-description>
        <tag line="56" name="param" description="The original path, can be relative. Dots may also be&#13;&#10;  passed ( . &amp; .. ) to change directory levels. If the $path starts with a&#13;&#10;  forward slash, the $path will be interpreted as &quot;from the root folder&quot; on&#13;&#10;  Unix machines." type="string" variable="$path">
          <type by_reference="false">string</type>
        </tag>
        <tag line="56" name="return" description="The resolved path without a trailing slash, it might not exist." type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="68">
        <name>$path</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="112" package="Helpers\IO">
      <name>formatSize</name>
      <full_name>\formatSize</full_name>
      <docblock line="105">
        <description>Formats a file size to human readable format</description>
        <long-description/>
        <tag line="105" name="param" description="The size in bytes" type="string|float|int" variable="$size">
          <type by_reference="false">string</type>
          <type by_reference="false">float</type>
          <type by_reference="false">int</type>
        </tag>
        <tag line="105" name="return" description="Returns a formatted size ( Ex: 32.6 MB )" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="112">
        <name>$size</name>
        <default/>
        <type/>
      </argument>
    </function>
  </file>
  <file path="system\helpers\validation.php" hash="fc15bfa12d81ff64674e2376523a26fe" package="Helpers\Validation">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Helpers/Validation.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="author" description="Plexis Dev Team"/>
      <tag line="2" name="package" description="Helpers"/>
      <tag line="2" name="subpackage" description="Validation"/>
    </docblock>
    <function namespace="global" line="20" package="Helpers\Validation">
      <name>isValidIp</name>
      <full_name>\isValidIp</full_name>
      <docblock line="13">
        <description>Checks an IP address, returning whether its a valid, Non-Private IP.</description>
        <long-description/>
        <tag line="13" name="param" description="The ip address to check." type="string" variable="$ip">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="return" description="Returns true if the given IP address is a valid, Non-Private IP, false otherwise" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="20">
        <name>$ip</name>
        <default/>
        <type/>
      </argument>
    </function>
  </file>
  <file path="system\library\Auth.php" hash="e2486aa140623a0087ab4972dcb842b7" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/Auth.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Auth"/>
      <tag line="2" name="contains" description="InvalidUsernameException"/>
      <tag line="2" name="contains" description="InvalidPasswordException"/>
      <tag line="2" name="contains" description="InvalidEmailException"/>
      <tag line="2" name="contains" description="AccountBannedException"/>
      <tag line="2" name="contains" description="IpBannedException"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="34" package="Library">
      <extends/>
      <name>Auth</name>
      <full_name>\Library\Auth</full_name>
      <docblock line="26">
        <description>Authorization and User class.</description>
        <long-description>&lt;p&gt;This class is used to proccess user's, and thier permissions&lt;/p&gt;</long-description>
        <tag line="26" name="author" description="Steven Wilson"/>
        <tag line="26" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="40" namespace="Library" package="Default">
        <name>$started</name>
        <default>false</default>
        <docblock line="36">
          <description>Session started? Used internally</description>
          <long-description/>
          <tag line="36" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="46" namespace="Library" package="Default">
        <name>$expireTime</name>
        <default/>
        <docblock line="42">
          <description>When the sessoin expires</description>
          <long-description/>
          <tag line="42" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="52" namespace="Library" package="Default">
        <name>$DB</name>
        <default/>
        <docblock line="48">
          <description>Database Driver object for the Plexis database</description>
          <long-description/>
          <tag line="48" name="var" description="" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="58" namespace="Library" package="Default">
        <name>$realm</name>
        <default/>
        <docblock line="54">
          <description>The Realm object from the wowlib</description>
          <long-description/>
          <tag line="54" name="var" description="" type="\Wowlib\Realm">
            <type by_reference="false">\Wowlib\Realm</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="64" namespace="Library" package="Default">
        <name>$sessionid</name>
        <default>0</default>
        <docblock line="60">
          <description>The sessions id</description>
          <long-description/>
          <tag line="60" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="70" namespace="Library" package="Default">
        <name>$permissions</name>
        <default/>
        <docblock line="66">
          <description>Current users access permissions</description>
          <long-description/>
          <tag line="66" name="var" description="" type="int[]">
            <type by_reference="false">int[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="76" namespace="Library" package="Default">
        <name>$data</name>
        <default>array('logged_in' =&gt; false, 'id' =&gt; 0, 'username' =&gt; 'Guest', 'ip_address' =&gt; '0.0.0.0')</default>
        <docblock line="72">
          <description>Users data array</description>
          <long-description/>
          <tag line="72" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="90" package="Library">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="83">
          <description>Contructor method (called internally)</description>
          <long-description>&lt;p&gt;Initiates the user sessions and such&lt;/p&gt;</long-description>
          <tag line="83" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="119" package="Library">
        <name>StartSession</name>
        <full_name>StartSession</full_name>
        <docblock line="112">
          <description>Internal method used to check to if the user is logged in by session.</description>
          <long-description>&lt;p&gt;If not then a username, id, and account level are set at guest.
Also checks for login expire time.&lt;/p&gt;</long-description>
          <tag line="112" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="224" package="Library">
        <name>Login</name>
        <full_name>Login</full_name>
        <docblock line="211">
          <description>Method used to proccess a user login</description>
          <long-description/>
          <tag line="211" name="param" description="The username to proccess" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="211" name="param" description="Unencrypted password to the account" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="211" name="throws" description="Thrown if the username contains illegal characters, or is too short/long" type="\Library\InvalidUsernameException">
            <type by_reference="false">\Library\InvalidUsernameException</type>
          </tag>
          <tag line="211" name="throws" description="Thrown if the password contains illegal characters, or is too short" type="\Library\InvalidPasswordException">
            <type by_reference="false">\Library\InvalidPasswordException</type>
          </tag>
          <tag line="211" name="throws" description="Thrown if the username or password is incorrect" type="\Library\InvalidCredentialsException">
            <type by_reference="false">\Library\InvalidCredentialsException</type>
          </tag>
          <tag line="211" name="throws" description="Thrown if the account is banned" type="\Library\AccountBannedException">
            <type by_reference="false">\Library\AccountBannedException</type>
          </tag>
          <tag line="211" name="return" description="Return true if the user is logged in, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="224">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
        <argument line="224">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="311" package="Library">
        <name>Register</name>
        <full_name>Register</full_name>
        <docblock line="294">
          <description>Method used to create a new account</description>
          <long-description/>
          <tag line="294" name="param" description="The account username to create" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="param" description="Unencrypted password to the account" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="param" description="New accounts email address" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="param" description="The secret question ID. Leave null for no secrect question" type="int" variable="$sq">
            <type by_reference="false">int</type>
          </tag>
          <tag line="294" name="param" description="The secret question answer. Leave null for no secrect question" type="string" variable="$sa">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="throws" description="Thrown if the username is invalid." type="\Library\InvalidUsernameException">
            <type by_reference="false">\Library\InvalidUsernameException</type>
          </tag>
          <tag line="294" name="throws" description="Thrown if the password is invalid" type="\Library\InvalidPasswordException">
            <type by_reference="false">\Library\InvalidPasswordException</type>
          </tag>
          <tag line="294" name="throws" description="Thrown if the email is not a real email" type="\Library\InvalidEmailException">
            <type by_reference="false">\Library\InvalidEmailException</type>
          </tag>
          <tag line="294" name="throws" description="Thrown if the account name is already taken" type="\Library\AccountExistsException">
            <type by_reference="false">\Library\AccountExistsException</type>
          </tag>
          <tag line="294" name="throws" description="Thrown if the ip address is banned" type="\Library\IpBannedException">
            <type by_reference="false">\Library\IpBannedException</type>
          </tag>
          <tag line="294" name="return" description="The account ID upon success, false otherwise" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="311">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
        <argument line="311">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
        <argument line="311">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="311">
          <name>$sq</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="311">
          <name>$sa</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="419" package="Library">
        <name>LoadPermissions</name>
        <full_name>LoadPermissions</full_name>
        <docblock line="411">
          <description>Loads the permissions specific to this user</description>
          <long-description/>
          <tag line="411" name="param" description="The group id" type="int" variable="$gid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="411" name="param" description="The list of all permissions for the usergroup" type="int[]" variable="$perms">
            <type by_reference="false">int[]</type>
          </tag>
          <tag line="411" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="419">
          <name>$gid</name>
          <default/>
          <type/>
        </argument>
        <argument line="419">
          <name>$perms</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="459" package="Library">
        <name>HasPermission</name>
        <full_name>HasPermission</full_name>
        <docblock line="452">
          <description>Used to find if user has a specified permission</description>
          <long-description/>
          <tag line="452" name="param" description="Permission name" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="452" name="return" description="Returns true if the user has permissions, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="459">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="476" package="Library">
        <name>Logout</name>
        <full_name>Logout</full_name>
        <docblock line="468">
          <description>Logs the user out and sets all session variables to Guest.</description>
          <long-description/>
          <tag line="468" name="param" description="Start a new session? Should only&#13;&#10;be set internally in this class." type="bool" variable="$newSession">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="468" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="476">
          <name>$newSession</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="504" package="Library">
        <name>IsGuest</name>
        <full_name>IsGuest</full_name>
        <docblock line="498">
          <description>Returns whether the current connected client is a guest.</description>
          <long-description/>
          <tag line="498" name="return" description="Returns true if the client is a guest, or true if&#13;&#10;  a user session is valid (logged in)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="516" package="Library">
        <name>IsLoggedIn</name>
        <full_name>IsLoggedIn</full_name>
        <docblock line="509">
          <description>Returns whether the current connected client is a guest.</description>
          <long-description>&lt;p&gt;This method is opposite of Auth::IsGuest()&lt;/p&gt;</long-description>
          <tag line="509" name="return" description="Returns true if the client is logged in, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="526" package="Library">
        <name>GetUserData</name>
        <full_name>GetUserData</full_name>
        <docblock line="521">
          <description>Returns the clients information such as username and user id</description>
          <long-description/>
          <tag line="521" name="return" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="538" package="Library">
        <name>_initUser</name>
        <full_name>_initUser</full_name>
        <docblock line="531">
          <description>This method is used to initiate a user when an ID or username is determined</description>
          <long-description/>
          <tag line="531" name="param" description="The account id" type="int" variable="$userid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="531" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="538">
          <name>$userid</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Library" line="657" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidUsernameException</name>
      <full_name>\Library\InvalidUsernameException</full_name>
      <docblock line="649">
        <description>Thrown by the Auth Class when the provided username is invalid in format (Too long, Too short)</description>
        <long-description/>
        <tag line="649" name="package" description="Library"/>
        <tag line="649" name="subpackage" description="Exceptions"/>
        <tag line="649" name="file" description="System/Library/Auth.php"/>
        <tag line="649" name="see" description="\Library\Auth" refers="\Library\Auth"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="667" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidPasswordException</name>
      <full_name>\Library\InvalidPasswordException</full_name>
      <docblock line="659">
        <description>Thrown by the Auth Class when the provided password is invalid in format too short</description>
        <long-description/>
        <tag line="659" name="package" description="Library"/>
        <tag line="659" name="subpackage" description="Exceptions"/>
        <tag line="659" name="file" description="System/Library/Auth.php"/>
        <tag line="659" name="see" description="\Library\Auth" refers="\Library\Auth"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="675" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidEmailException</name>
      <full_name>\Library\InvalidEmailException</full_name>
      <docblock line="669">
        <description>Thrown by the Auth Class when the provided email is invalid.</description>
        <long-description/>
        <tag line="669" name="package" description="Library"/>
        <tag line="669" name="subpackage" description="Exceptions"/>
        <tag line="669" name="see" description="\Library\Auth::Login()" refers="\Library\Auth::Login()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="683" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidCredentialsException</name>
      <full_name>\Library\InvalidCredentialsException</full_name>
      <docblock line="677">
        <description>Thrown by the Auth Class when a login fails due to invalid username or password</description>
        <long-description/>
        <tag line="677" name="package" description="Library"/>
        <tag line="677" name="subpackage" description="Exceptions"/>
        <tag line="677" name="see" description="\Library\Auth" refers="\Library\Auth"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="692" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>AccountExistsException</name>
      <full_name>\Library\AccountExistsException</full_name>
      <docblock line="685">
        <description>Thrown by the Auth Class during the Register method, if the account name provided already exists</description>
        <long-description/>
        <tag line="685" name="package" description="Library"/>
        <tag line="685" name="subpackage" description="Exceptions"/>
        <tag line="685" name="file" description="System/Library/Auth.php"/>
        <tag line="685" name="see" description="\Library\Auth::Register()" refers="\Library\Auth::Register()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="701" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>AccountBannedException</name>
      <full_name>\Library\AccountBannedException</full_name>
      <docblock line="694">
        <description>Thrown by the Auth Class when logging in, and the account name is banned</description>
        <long-description/>
        <tag line="694" name="package" description="Library"/>
        <tag line="694" name="subpackage" description="Exceptions"/>
        <tag line="694" name="file" description="System/Library/Auth.php"/>
        <tag line="694" name="see" description="\Library\Auth::Login()" refers="\Library\Auth::Login()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="710" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>IpBannedException</name>
      <full_name>\Library\IpBannedException</full_name>
      <docblock line="703">
        <description>Thrown by the Auth Class when registering an account, and the Remote IP is banned.</description>
        <long-description/>
        <tag line="703" name="package" description="Library"/>
        <tag line="703" name="subpackage" description="Exceptions"/>
        <tag line="703" name="file" description="System/Library/Auth.php"/>
        <tag line="703" name="see" description="\Library\Auth::Register()" refers="\Library\Auth::Register()"/>
      </docblock>
    </class>
  </file>
  <file path="system\library\Breadcrumb.php" hash="f2d918d583b3bcfed2d9fc4b03cf59e6" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/Breadcrumb.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Breadcrumb"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>Breadcrumb</name>
      <full_name>\Library\Breadcrumb</full_name>
      <docblock line="12">
        <description>A breadcrumb building class</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="20" namespace="Library" package="Default">
        <name>$breadcrumbs</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="22" package="Library">
        <name>Append</name>
        <full_name>Append</full_name>
        <argument line="22">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="22">
          <name>$href</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="30" package="Library">
        <name>Generate</name>
        <full_name>Generate</full_name>
        <argument line="30">
          <name>$ulClass</name>
          <default>'breadcrumb'</default>
          <type/>
        </argument>
        <argument line="30">
          <name>$liClass</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="30">
          <name>$divider</name>
          <default>""</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="32" package="Library">
        <name>GenerateListsOnly</name>
        <full_name>GenerateListsOnly</full_name>
        <argument line="32">
          <name>$cssClass</name>
          <default>"breadcrum"</default>
          <type/>
        </argument>
        <argument line="32">
          <name>$divider</name>
          <default>""</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="45" package="Library">
        <name>GenerateString</name>
        <full_name>GenerateString</full_name>
        <argument line="45">
          <name>$tpl</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$first_tpl</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="47" package="Library">
        <name>getList</name>
        <full_name>getList</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="20" code="50018">No DocBlock was found for property $breadcrumbs</error>
      <error line="22" code="50010">No DocBlock was found for method Append()</error>
      <error line="30" code="50010">No DocBlock was found for method Generate()</error>
      <error line="32" code="50010">No DocBlock was found for method GenerateListsOnly()</error>
      <error line="45" code="50010">No DocBlock was found for method GenerateString()</error>
      <error line="47" code="50010">No DocBlock was found for method getList()</error>
    </parse_markers>
  </file>
  <file path="system\library\Cache.php" hash="d00ba39f6fb6b741d3655055ae5fb7e2" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/Cache.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Cache"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>Cache</name>
      <full_name>\Library\Cache</full_name>
      <docblock line="12">
        <description>Simple Cache class for the CMS</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="24" namespace="Library" package="Default">
        <name>$path</name>
        <default/>
        <docblock line="20">
          <description>The cache path</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="33" package="Library">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="26">
          <description>Contructor method (called internally)</description>
          <long-description>&lt;p&gt;Initiates the default cache path&lt;/p&gt;</long-description>
          <tag line="26" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="45" package="Library">
        <name>SetPath</name>
        <full_name>SetPath</full_name>
        <docblock line="38">
          <description>Sets the cache folder path</description>
          <long-description/>
          <tag line="38" name="param" description="The path to the new cache folder" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="59" package="Library">
        <name>Get</name>
        <full_name>Get</full_name>
        <docblock line="52">
          <description>Reads and returns the contents of a cache file</description>
          <long-description/>
          <tag line="52" name="param" description="The name of the cache file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="return" description="Returns the cache files contents" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="91" package="Library">
        <name>Save</name>
        <full_name>Save</full_name>
        <docblock line="82">
          <description>Reads and returns the contents of a cache file</description>
          <long-description/>
          <tag line="82" name="param" description="The name of the cache file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="param" description="The contents to be stored in the cache" type="string" variable="$contents">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="param" description="The expire time in seconds from now" type="int" variable="$expire">
            <type by_reference="false">int</type>
          </tag>
          <tag line="82" name="return" description="Returns true if the save is successfull, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="91">
          <name>$contents</name>
          <default/>
          <type/>
        </argument>
        <argument line="91">
          <name>$expire</name>
          <default>86400</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="119" package="Library">
        <name>Delete</name>
        <full_name>Delete</full_name>
        <docblock line="112">
          <description>Deletes a cache file</description>
          <long-description/>
          <tag line="112" name="param" description="The name of the cache file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="return" description="Returns true of the delete was successfull, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="143" package="Library">
        <name>Clear</name>
        <full_name>Clear</full_name>
        <docblock line="138">
          <description>Deletes all cache files from the cache folder</description>
          <long-description/>
          <tag line="138" name="return" description="Returns true of the delete was successfull, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="168" package="Library">
        <name>ExpireTime</name>
        <full_name>ExpireTime</full_name>
        <docblock line="161">
          <description>Reads and returns the expire time for the file in UNIX timestamp</description>
          <long-description/>
          <tag line="161" name="param" description="The name of the cache file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="161" name="return" description="Returns UNIX timestamp expire time" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\library\DataTables.php" hash="c3c92d4b2ab5e47de7f7def5b736c0c6" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/DataTables.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="DataTables"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>DataTables</name>
      <full_name>\Library\DataTables</full_name>
      <docblock line="12">
        <description>A jQuery Datatables server side record class for PDO database records</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" namespace="Library" package="Default">
        <name>$data</name>
        <default/>
        <docblock line="20">
          <description>An array or $_POST or $_GET data for proccessing</description>
          <long-description/>
          <tag line="20" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="31" namespace="Library" package="Default">
        <name>$dataProp</name>
        <default>'aaData'</default>
        <docblock line="26">
          <description>The dataprop to be returned.</description>
          <long-description/>
          <tag line="26" name="see" description="\Library\http://datatables.net/usage/options#sAjaxDataProp" refers="\Library\http://datatables.net/usage/options#sAjaxDataProp"/>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="40" package="Library">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="33">
          <description>Class Contructor.</description>
          <long-description/>
          <tag line="33" name="param" description="The method used by datatables (GET or POST)" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="throws" description="Thrown if no datatabes request was made." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$method</name>
          <default>'GET'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="57" package="Library">
        <name>setDataProp</name>
        <full_name>setDataProp</full_name>
        <docblock line="48">
          <description>Sets the DataProp or array key of rows expected from DataTables.</description>
          <long-description/>
          <tag line="48" name="see" description="\Library\http://datatables.net/usage/options#sAjaxDataProp" refers="\Library\http://datatables.net/usage/options#sAjaxDataProp"/>
          <tag line="48" name="param" description="The dataprop" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="74" package="Library">
        <name>generate</name>
        <full_name>generate</full_name>
        <docblock line="62">
          <description>Generates all the data, based on the rows added, for datatables to read
off of.</description>
          <long-description>&lt;p&gt;The data will still need to be encoded with json_encode()&lt;/p&gt;</long-description>
          <tag line="62" name="param" description="The array of DB columns to process" type="string[]" variable="$aColumns">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="62" name="param" description="The index column such as &quot;id&quot;" type="string[]" variable="$sIndexColumn">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="62" name="param" description="The table we are query'ing" type="string" variable="$sTable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="param" description="Additional WHERE statements" type="string" variable="$cWhere">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="param" description="The PDO Database Object" type="\Database\Driver" variable="$DB">
            <type by_reference="false">\Database\Driver</type>
          </tag>
          <tag line="62" name="return" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$aColumns</name>
          <default/>
          <type/>
        </argument>
        <argument line="74">
          <name>$sIndexColumn</name>
          <default/>
          <type/>
        </argument>
        <argument line="74">
          <name>$sTable</name>
          <default/>
          <type/>
        </argument>
        <argument line="74">
          <name>$cWhere</name>
          <default/>
          <type/>
        </argument>
        <argument line="74">
          <name>$DB</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\library\DataTablesArray.php" hash="2c7dd9431e611896cfc58dbecb4f3600" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/DataTablesArray.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="DataTablesArray"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>DataTablesArray</name>
      <full_name>\Library\DataTablesArray</full_name>
      <docblock line="12">
        <description>A jQuery Datatables server side record class for PHP arrays</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" namespace="Library" package="Default">
        <name>$rows</name>
        <default>array()</default>
        <docblock line="20">
          <description>An array or rows and columns for output</description>
          <long-description/>
          <tag line="20" name="var" description="" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="30" namespace="Library" package="Default">
        <name>$data</name>
        <default/>
        <docblock line="26">
          <description>An array or $_POST or $_GET data for proccessing</description>
          <long-description/>
          <tag line="26" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" namespace="Library" package="Default">
        <name>$dataProp</name>
        <default>'aaData'</default>
        <docblock line="32">
          <description>The dataprop to be returned.</description>
          <long-description/>
          <tag line="32" name="see" description="\Library\http://datatables.net/usage/options#sAjaxDataProp" refers="\Library\http://datatables.net/usage/options#sAjaxDataProp"/>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="48" package="Library">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="39">
          <description>Class Contructor.</description>
          <long-description/>
          <tag line="39" name="param" description="The method used by datatables (GET or POST)" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="param" description="An array of (Row =&gt; array of column values) to&#13;&#10;  add to the list." type="array[]" variable="$data">
            <type by_reference="false">array[]</type>
          </tag>
          <tag line="39" name="throws" description="Thrown if no datatabes request was made." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$method</name>
          <default>'GET'</default>
          <type/>
        </argument>
        <argument line="48">
          <name>$data</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="74" package="Library">
        <name>addRow</name>
        <full_name>addRow</full_name>
        <docblock line="63">
          <description>Adds a row to the list of rows.</description>
          <long-description>&lt;p&gt;Each parameter passed to this function is a new column
within the row. You may also put 1 variable as an array of rows.&lt;/p&gt;</long-description>
          <tag line="63" name="throws" description="Thrown if the amount of column passed does not&#13;&#10;  equal the amount of columns expected for each row." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="63" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="101" package="Library">
        <name>setDataProp</name>
        <full_name>setDataProp</full_name>
        <docblock line="92">
          <description>Sets the DataProp or array key of rows expected from DataTables.</description>
          <long-description/>
          <tag line="92" name="see" description="\Library\http://datatables.net/usage/options#sAjaxDataProp" refers="\Library\http://datatables.net/usage/options#sAjaxDataProp"/>
          <tag line="92" name="param" description="The dataprop" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="112" package="Library">
        <name>generate</name>
        <full_name>generate</full_name>
        <docblock line="106">
          <description>Generates all the data, based on the rows added, for datatables to read
off of.</description>
          <long-description>&lt;p&gt;The data will still need to be encoded with json_encode()&lt;/p&gt;</long-description>
          <tag line="106" name="return" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Library" line="135" package="Library">
        <name>buildData</name>
        <full_name>buildData</full_name>
        <docblock line="129">
          <description>Takes the added rows, applies filtering and sorting, and returns the
proper requested data for datatables.</description>
          <long-description/>
          <tag line="129" name="return" description="" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\library\Gravatar.php" hash="1c42a0918e5449c2207adc8c8d40b360" package="gravatarlib">
    <docblock line="2">
      <description>===================================================================</description>
      <long-description>&lt;h2&gt;GravatarLib - Gravatar PHP 5.3 OOP Library&lt;/h2&gt;</long-description>
      <tag line="2" name="category" description="gravatarlib"/>
      <tag line="2" name="package" description="gravatarlib"/>
      <tag line="2" name="author" description="emberlabs.org"/>
      <tag line="2" name="copyright" description="(c) 2011 emberlabs.org"/>
      <tag line="2" name="license" description="MIT License"/>
      <tag line="2" name="link" description="===================================================================&#13;&#10;This source file is subject to the MIT license that is bundled&#13;&#10;with this package in the file LICENSE." link="https://github.com/emberlabs/gravatarlib"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="36" package="Library">
      <extends/>
      <name>Gravatar</name>
      <full_name>\Library\Gravatar</full_name>
      <docblock line="25">
        <description>A lightweight library for working with gravatars en masse.</description>
        <long-description>&lt;p&gt;Used for setting a ton of options and then just passing in
only the essential data needed.&lt;/p&gt;</long-description>
        <tag line="25" name="category" description="gravatarlib"/>
        <tag line="25" name="package" description="Library"/>
        <tag line="25" name="author" description="emberlabs.org"/>
        <tag line="25" name="license" description="MIT License"/>
        <tag line="25" name="link" description="https://github.com/emberlabs/gravatarlib" link="https://github.com/emberlabs/gravatarlib"/>
      </docblock>
      <constant namespace="Library" line="66" package="Library">
        <name>HTTP_URL</name>
        <full_name>HTTP_URL</full_name>
        <value>'http://www.gravatar.com/avatar/'</value>
      </constant>
      <constant namespace="Library" line="67" package="Library">
        <name>HTTPS_URL</name>
        <full_name>HTTPS_URL</full_name>
        <value>'https://secure.gravatar.com/avatar/'</value>
      </constant>
      <property final="false" static="false" visibility="protected" line="41" namespace="Library" package="Default">
        <name>$size</name>
        <default>80</default>
        <docblock line="38">
          <description/>
          <long-description/>
          <tag line="38" name="var" description="- The size to use for avatars." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" namespace="Library" package="Default">
        <name>$default_image</name>
        <default>false</default>
        <docblock line="43">
          <description/>
          <long-description/>
          <tag line="43" name="var" description="- The default image to use - either a string of the gravatar-recognized default image &quot;type&quot; to use, a URL, or false if using the...default gravatar default image (hah)" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" namespace="Library" package="Default">
        <name>$max_rating</name>
        <default>'g'</default>
        <docblock line="48">
          <description/>
          <long-description/>
          <tag line="48" name="var" description="- The maximum rating to allow for the avatar." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" namespace="Library" package="Default">
        <name>$use_secure_url</name>
        <default>false</default>
        <docblock line="53">
          <description/>
          <long-description/>
          <tag line="53" name="var" description="- Should we use the secure (HTTPS) URL base?" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" namespace="Library" package="Default">
        <name>$param_cache</name>
        <default>NULL</default>
        <docblock line="58">
          <description/>
          <long-description/>
          <tag line="58" name="var" description="- A temporary internal cache of the URL parameters to use." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="74" package="Library">
        <name>getAvatarSize</name>
        <full_name>getAvatarSize</full_name>
        <docblock line="70">
          <description>Get the currently set avatar size.</description>
          <long-description/>
          <tag line="70" name="return" description="- The current avatar size in use." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="86" package="Library">
        <name>setAvatarSize</name>
        <full_name>setAvatarSize</full_name>
        <docblock line="79">
          <description>Set the avatar size to use.</description>
          <long-description/>
          <tag line="79" name="param" description="- The avatar size to use, must be less than 512 and greater than 0." type="integer" variable="$size">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="79" name="return" description="- Provides a fluent interface." type="\Library\Gravatar">
            <type by_reference="false">\Library\Gravatar</type>
          </tag>
          <tag line="79" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$size</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="110" package="Library">
        <name>getDefaultImage</name>
        <full_name>getDefaultImage</full_name>
        <docblock line="106">
          <description>Get the current default image setting.</description>
          <long-description/>
          <tag line="106" name="return" description="- False if no default image set, string if one is set." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="122" package="Library">
        <name>setDefaultImage</name>
        <full_name>setDefaultImage</full_name>
        <docblock line="115">
          <description>Set the default image to use for avatars.</description>
          <long-description/>
          <tag line="115" name="param" description="- The default image to use. Use boolean false for the gravatar default, a string containing a valid image URL, or a string specifying a recognized gravatar &quot;default&quot;." type="mixed" variable="$image">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="115" name="return" description="- Provides a fluent interface." type="\Library\Gravatar">
            <type by_reference="false">\Library\Gravatar</type>
          </tag>
          <tag line="115" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$image</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="161" package="Library">
        <name>getMaxRating</name>
        <full_name>getMaxRating</full_name>
        <docblock line="157">
          <description>Get the current maximum allowed rating for avatars.</description>
          <long-description/>
          <tag line="157" name="return" description="- The string representing the current maximum allowed rating ('g', 'pg', 'r', 'x')." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="173" package="Library">
        <name>setMaxRating</name>
        <full_name>setMaxRating</full_name>
        <docblock line="166">
          <description>Set the maximum allowed rating for avatars.</description>
          <long-description/>
          <tag line="166" name="param" description="- The maximum rating to use for avatars ('g', 'pg', 'r', 'x')." type="string" variable="$rating">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="return" description="- Provides a fluent interface." type="\Library\Gravatar">
            <type by_reference="false">\Library\Gravatar</type>
          </tag>
          <tag line="166" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="173">
          <name>$rating</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="194" package="Library">
        <name>usingSecureImages</name>
        <full_name>usingSecureImages</full_name>
        <docblock line="190">
          <description>Check if we are using the secure protocol for the image URLs.</description>
          <long-description/>
          <tag line="190" name="return" description="- Are we supposed to use the secure protocol?" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="203" package="Library">
        <name>enableSecureImages</name>
        <full_name>enableSecureImages</full_name>
        <docblock line="199">
          <description>Enable the use of the secure protocol for image URLs.</description>
          <long-description/>
          <tag line="199" name="return" description="- Provides a fluent interface." type="\Library\Gravatar">
            <type by_reference="false">\Library\Gravatar</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="214" package="Library">
        <name>disableSecureImages</name>
        <full_name>disableSecureImages</full_name>
        <docblock line="210">
          <description>Disable the use of the secure protocol for image URLs.</description>
          <long-description/>
          <tag line="210" name="return" description="- Provides a fluent interface." type="\Library\Gravatar">
            <type by_reference="false">\Library\Gravatar</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="227" package="Library">
        <name>buildGravatarURL</name>
        <full_name>buildGravatarURL</full_name>
        <docblock line="221">
          <description>Build the avatar URL based on the provided email address.</description>
          <long-description/>
          <tag line="221" name="param" description="- The email to get the gravatar for." type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="221" name="param" description="- Should we hash the $email variable?  (Useful if the email address has a hash stored already)" type="string" variable="$hash_email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="221" name="return" description="- The XHTML-safe URL to the gravatar." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="227">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="227">
          <name>$hash_email</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="285" package="Library">
        <name>getEmailHash</name>
        <full_name>getEmailHash</full_name>
        <docblock line="280">
          <description>Get the email hash to use (after cleaning the string).</description>
          <long-description/>
          <tag line="280" name="param" description="- The email to get the hash for." type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="280" name="return" description="- The hashed form of the email, post cleaning." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="285">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="302" package="Library">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="291">
          <description>Build the avatar URL based on the provided email address.</description>
          <long-description>&lt;p&gt;...Yeah, it's just an alias of buildGravatarURL.  This is just to make it easier to use as a twig asset.&lt;/p&gt;</long-description>
          <tag line="291" name="param" description="- The email to get the gravatar for." type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="291" name="param" description="- Should we hash the $email variable?  (Useful if the email address has a hash stored already)" type="string" variable="$hash_email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="291" name="return" description="- The XHTML-safe URL to the gravatar." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="291" name="see" description="\Library\Gravatar::buildGravatarURL()" refers="\Library\Gravatar::buildGravatarURL()"/>
        </docblock>
        <argument line="302">
          <name>$email</name>
          <default/>
          <type/>
        </argument>
        <argument line="302">
          <name>$hash_email</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\library\Mime.php" hash="d9bb933f5573d01f85906d4c6464e6ee" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/Mime.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Mime"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>Mime</name>
      <full_name>\Library\Mime</full_name>
      <docblock line="12">
        <description>A File extension mime parser.</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" namespace="Library" package="Default">
        <name>$mimeTypes</name>
        <default>array('htm' =&gt; 'text/html', 'html' =&gt; 'text/html', 'xhtml' =&gt; array('application/xhtml+xml', 'application/xhtml', 'text/xhtml'), 'xhtml-mobile' =&gt; 'application/vnd.wap.xhtml+xml', 'xml' =&gt; array('application/xml', 'text/xml'), 'css' =&gt; 'text/css', 'js' =&gt; 'text/javascript', 'javascript' =&gt; 'text/javascript', 'rss' =&gt; 'application/rss+xml', 'json' =&gt; 'application/json', 'csv' =&gt; array('text/csv', 'application/vnd.ms-excel', 'text/plain'), 'file' =&gt; 'multipart/form-data', 'php' =&gt; 'text/x-php', 'gif' =&gt; 'image/gif', 'jpe' =&gt; 'image/jpeg', 'jpeg' =&gt; 'image/jpeg', 'jpg' =&gt; 'image/jpeg', 'png' =&gt; 'image/png', 'svg' =&gt; 'image/svg+xml', 'svgz' =&gt; 'image/svg+xml', 'ico' =&gt; array('image/x-icon', 'image/vnd.microsoft.icon'), 'exe' =&gt; 'application/octet-stream', 'bin' =&gt; 'application/octet-stream', 'sh' =&gt; 'application/x-sh', 'zip' =&gt; 'application/zip', 'rar' =&gt; 'application/x-rar-compressed', 'gtar' =&gt; 'application/x-gtar', 'gz' =&gt; 'application/x-gzip', 'bz2' =&gt; 'application/x-bzip', '7z' =&gt; 'application/x-7z-compressed', 'tar' =&gt; 'application/x-tar', 'otf' =&gt; 'font/otf', 'ttf' =&gt; 'font/ttf', 'mp2' =&gt; 'audio/mpeg', 'mp3' =&gt; 'audio/mpeg', 'mpga' =&gt; 'audio/mpeg', 'ogg' =&gt; 'audio/ogg', 'oga' =&gt; 'audio/ogg', 'spx' =&gt; 'audio/ogg', 'ra' =&gt; 'audio/x-realaudio', 'ram' =&gt; 'audio/x-pn-realaudio', 'rm' =&gt; 'audio/x-pn-realaudio', 'rpm' =&gt; 'audio/x-pn-realaudio-plugin', 'wav' =&gt; 'audio/x-wav', 'aac' =&gt; 'audio/aac', 'flac' =&gt; 'audio/flac', 'avi' =&gt; array('video/x-msvideo', 'video/avi'), 'mov' =&gt; 'video/quicktime', 'mpe' =&gt; 'video/mpeg', 'mpeg' =&gt; 'video/mpeg', 'mpg' =&gt; 'video/mpeg', 'qt' =&gt; 'video/quicktime', 'ogv' =&gt; 'video/ogg', 'webm' =&gt; 'video/webm', 'mp4' =&gt; 'video/mp4', 'flv' =&gt; 'video/x-flv', 'ics' =&gt; 'text/calendar', 'rtf' =&gt; 'text/rtf', 'rtx' =&gt; 'text/richtext', 'tsv' =&gt; 'text/tab-separated-values', 'tpl' =&gt; 'text/template', 'txt' =&gt; 'text/plain', 'text' =&gt; 'text/plain', 'ief' =&gt; 'image/ief', 'pbm' =&gt; 'image/x-portable-bitmap', 'pgm' =&gt; 'image/x-portable-graymap', 'pnm' =&gt; 'image/x-portable-anymap', 'ppm' =&gt; 'image/x-portable-pixmap', 'ras' =&gt; 'image/cmu-raster', 'rgb' =&gt; 'image/x-rgb', 'tif' =&gt; 'image/tiff', 'tiff' =&gt; 'image/tiff', 'xbm' =&gt; 'image/x-xbitmap', 'xpm' =&gt; 'image/x-xpixmap', 'xwd' =&gt; 'image/x-xwindowdump', 'pdf' =&gt; 'application/pdf', 'psd' =&gt; array('image/vnd.adobe.photoshop', 'application/octet-stream'), 'swf' =&gt; 'application/x-shockwave-flash', 'doc' =&gt; 'application/msword', 'docx' =&gt; 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'xlc' =&gt; 'application/vnd.ms-excel', 'xll' =&gt; 'application/vnd.ms-excel', 'xlm' =&gt; 'application/vnd.ms-excel', 'xls' =&gt; 'application/vnd.ms-excel', 'xlsx' =&gt; 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xlw' =&gt; 'application/vnd.ms-excel', 'pot' =&gt; 'application/vnd.ms-powerpoint', 'pps' =&gt; 'application/vnd.ms-powerpoint', 'ppt' =&gt; 'application/vnd.ms-powerpoint', 'pptx' =&gt; 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'ppz' =&gt; 'application/vnd.ms-powerpoint')</default>
        <docblock line="20">
          <description>An array of ext =&gt; (mime type | mime types[])</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string[]|array[]">
            <type by_reference="false">string[]</type>
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="147" package="Library">
        <name>GetType</name>
        <full_name>GetType</full_name>
        <docblock line="137">
          <description>Returns a mime type for the provided file extension</description>
          <long-description/>
          <tag line="137" name="param" description="The file extension" type="string" variable="$ext">
            <type by_reference="false">string</type>
          </tag>
          <tag line="137" name="return" description="Returns an array if there is more then&#13;&#10;1 mime type (Ordered by most common to least), or a string if&#13;&#10;there is only 1 mime type. Returns false if there is no entry&#13;&#10;for the given file extenstion" type="string|string[]">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$ext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="165" package="Library">
        <name>SetType</name>
        <full_name>SetType</full_name>
        <docblock line="157">
          <description>Sets a mime type for the provided file extension</description>
          <long-description/>
          <tag line="157" name="param" description="The file extension" type="string" variable="$ext">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="param" description="A string or array of mime types" type="string|array" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="157" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$ext</name>
          <default/>
          <type/>
        </argument>
        <argument line="165">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\library\Parser.php" hash="fb1640a63f4dfb417b5503a504adebbe" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/Parser.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Parser"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>Parser</name>
      <full_name>\Library\Parser</full_name>
      <docblock line="12">
        <description>A source parsing class</description>
        <long-description/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="24" namespace="Library" package="Default">
        <name>$l_delim</name>
        <default>'{'</default>
        <docblock line="20">
          <description>Left parsing delimiter</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="30" namespace="Library" package="Default">
        <name>$r_delim</name>
        <default>'}'</default>
        <docblock line="26">
          <description>Right parsing delimeter</description>
          <long-description/>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="40" package="Library">
        <name>SetDelimiters</name>
        <full_name>SetDelimiters</full_name>
        <docblock line="32">
          <description>Sets the template delimiters for psuedo blocks</description>
          <long-description/>
          <tag line="32" name="param" description="The left delimiter" type="string" variable="$l">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="param" description="The right delimiter" type="string" variable="$r">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$l</name>
          <default>'{'</default>
          <type/>
        </argument>
        <argument line="40">
          <name>$r</name>
          <default>'}'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="56" package="Library">
        <name>Parse</name>
        <full_name>Parse</full_name>
        <docblock line="46">
          <description>This method uses all defined template assigned variables
to loop through and replace the Psuedo blocks that contain
variable names</description>
          <long-description/>
          <tag line="46" name="param" description="The source with all the {variables}" type="string" variable="$source">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="Array of variables to be parsed" type="mixed[]" variable="$data">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="46" name="return" description="The parsed contents are returned" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$source</name>
          <default/>
          <type/>
        </argument>
        <argument line="56">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="195" package="Library">
        <name>ParseArray</name>
        <full_name>ParseArray</full_name>
        <docblock line="187">
          <description>Parses an array such as {user.userinfo.username}</description>
          <long-description/>
          <tag line="187" name="param" description="The full unparsed array ( { something.else} )" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="param" description="The actual array that holds the value of $key" type="mixed[]" variable="$array">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="187" name="return" description="Returns the parsed value of the array key" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="195">
          <name>$array</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="248" package="Library">
        <name>ParsePair</name>
        <full_name>ParsePair</full_name>
        <docblock line="240">
          <description>Parses array blocks (  {key} ,,, {/key} ), acts like a foreach loop</description>
          <long-description/>
          <tag line="240" name="param" description="The preg_match of the block {key} (what we need) {/key}" type="string" variable="$match">
            <type by_reference="false">string</type>
          </tag>
          <tag line="240" name="param" description="The array that contains the variables inside the blocks" type="mixed[]" variable="$val">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="240" name="return" description="Returns the parsed foreach loop block" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="248">
          <name>$match</name>
          <default/>
          <type/>
        </argument>
        <argument line="248">
          <name>$val</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\library\Template.php" hash="a4757aa497f21326238a30f154e50e34" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/Template.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Template"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="24" package="Library">
      <extends/>
      <name>Template</name>
      <full_name>\Library\Template</full_name>
      <docblock line="18">
        <description>Template Engine for the CMS</description>
        <long-description/>
        <tag line="18" name="author" description="Steven Wilson"/>
        <tag line="18" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="30" namespace="Library" package="Default">
        <name>$buffer</name>
        <default>null</default>
        <docblock line="26">
          <description>The current body view contents</description>
          <long-description/>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="36" namespace="Library" package="Default">
        <name>$themePath</name>
        <default/>
        <docblock line="32">
          <description>The root path to the themes folder</description>
          <long-description/>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="42" namespace="Library" package="Default">
        <name>$themeName</name>
        <default/>
        <docblock line="38">
          <description>The selected theme name</description>
          <long-description/>
          <tag line="38" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="48" namespace="Library" package="Default">
        <name>$themeUrl</name>
        <default/>
        <docblock line="44">
          <description>The complete http path to the theme root</description>
          <long-description/>
          <tag line="44" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="54" namespace="Library" package="Default">
        <name>$themeConfig</name>
        <default/>
        <docblock line="50">
          <description>Theme xml config object</description>
          <long-description/>
          <tag line="50" name="var" description="" type="\Library\SimpleXMLElement">
            <type by_reference="false">\Library\SimpleXMLElement</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="60" namespace="Library" package="Default">
        <name>$layoutName</name>
        <default>'default'</default>
        <docblock line="56">
          <description>The layout name to be used</description>
          <long-description/>
          <tag line="56" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="66" namespace="Library" package="Default">
        <name>$pageTitle</name>
        <default/>
        <docblock line="62">
          <description>The page title for the title tag (appended after server name)</description>
          <long-description/>
          <tag line="62" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="72" namespace="Library" package="Default">
        <name>$headers</name>
        <default>array()</default>
        <docblock line="68">
          <description>An array of lines to be injected into the layout head tags</description>
          <long-description/>
          <tag line="68" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="78" namespace="Library" package="Default">
        <name>$messages</name>
        <default>array()</default>
        <docblock line="74">
          <description>Array of template messages</description>
          <long-description/>
          <tag line="74" name="var" description="('level', 'message')" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="84" namespace="Library" package="Default">
        <name>$variables</name>
        <default>array()</default>
        <docblock line="80">
          <description>Variables to be parsed in the layout view</description>
          <long-description/>
          <tag line="80" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="90" namespace="Library" package="Default">
        <name>$jsVars</name>
        <default>array()</default>
        <docblock line="86">
          <description>Javascript Variables to be added in the header</description>
          <long-description/>
          <tag line="86" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="105" package="Library">
        <name>Render</name>
        <full_name>Render</full_name>
        <docblock line="92">
          <description>Renders the current body contents into the template layout</description>
          <long-description>&lt;p&gt;If the $return param is false, the Response object will be called
internally, and the Reponse headers and content will be sent to the
browser.&lt;/p&gt;</long-description>
          <tag line="92" name="param" description="When set to true, final rendered template&#13;&#10;  is returned instead of sending the response." type="bool" variable="$return">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="92" name="param" description="Load the layout?" type="bool" variable="$loadLayout">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="92" name="return" description="Only returns the parsed page if $return is true" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$return</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="105">
          <name>$loadLayout</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="147" package="Library">
        <name>LoadModuleView</name>
        <full_name>LoadModuleView</full_name>
        <docblock line="134">
          <description>Loads a view file from the template's module view folder.</description>
          <long-description/>
          <tag line="134" name="param" description="The name of the module (where the view is located)" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="param" description="The name of the view file (no extension)." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="param" description="A reference variable that returns whether or not the&#13;&#10;  template's view had a javascript file for this view" type="bool" variable="$hasJs">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="134" name="throws" description="Thrown if the template does not have the view&#13;&#10;  file for the specified module" type="\Library\ViewNotFoundException">
            <type by_reference="false">\Library\ViewNotFoundException</type>
          </tag>
          <tag line="134" name="return" description="" type="\Library\View">
            <type by_reference="false">\Library\View</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$module</name>
          <default/>
          <type/>
        </argument>
        <argument line="147">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="147">
          <name>$hasJs</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="177" package="Library">
        <name>LoadPartial</name>
        <full_name>LoadPartial</full_name>
        <docblock line="168">
          <description>Loads a partial view file from the template's partials folder.</description>
          <long-description/>
          <tag line="168" name="param" description="The name of the partial view file (no extension)." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="168" name="throws" description="Thrown if the template does not have the partial view" type="\Library\ViewNotFoundException">
            <type by_reference="false">\Library\ViewNotFoundException</type>
          </tag>
          <tag line="168" name="return" description="" type="\Library\View">
            <type by_reference="false">\Library\View</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="195" package="Library">
        <name>SetLayout</name>
        <full_name>SetLayout</full_name>
        <docblock line="186">
          <description>Sets the layout to be loaded for this request</description>
          <long-description/>
          <tag line="186" name="param" description="The name of the layout view file (no extension)." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="186" name="throws" description="Thrown if the template does not have the layout view" type="\Library\ViewNotFoundException">
            <type by_reference="false">\Library\ViewNotFoundException</type>
          </tag>
          <tag line="186" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="213" package="Library">
        <name>Add</name>
        <full_name>Add</full_name>
        <docblock line="200">
          <description>Adds more to contents to be added into the contents section of
the final rendered template.</description>
          <long-description/>
          <tag line="200" name="param" description="The contents to add to the template body" type="string|\Library\View" variable="$contents">
            <type by_reference="false">string</type>
            <type by_reference="false">\Library\View</type>
          </tag>
          <tag line="200" name="param" description="The css file to be loaded for this view" type="string|bool" variable="$css">
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
          <tag line="200" name="param" description="The javascript file to be loaded for this view. When the&#13;&#10;  Template::Render() method is called, a view JS file will be located automatically." type="string|bool" variable="$js">
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
          <tag line="200" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="200" name="todo" description="Finish the $css and $js variables"/>
        </docblock>
        <argument line="213">
          <name>$contents</name>
          <default/>
          <type/>
        </argument>
        <argument line="213">
          <name>$css</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="213">
          <name>$js</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="235" package="Library">
        <name>SetVar</name>
        <full_name>SetVar</full_name>
        <docblock line="227">
          <description>Sets variables to be parsed in the layout</description>
          <long-description/>
          <tag line="227" name="param" description="Name of the variable" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="227" name="param" description="The value of the variable" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="227" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="235">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="235">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="258" package="Library">
        <name>SetJsVar</name>
        <full_name>SetJsVar</full_name>
        <docblock line="250">
          <description>Sets javascript variables to be added in the head tags</description>
          <long-description/>
          <tag line="250" name="param" description="Name of the variable" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="250" name="param" description="The value of the variable" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="250" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="258">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="258">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="284" package="Library">
        <name>SetThemePath</name>
        <full_name>SetThemePath</full_name>
        <docblock line="273">
          <description>Sets the path to the theme folder</description>
          <long-description/>
          <tag line="273" name="param" description="The full path to the theme folder" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="273" name="param" description="The theme name. Set only if you want to also define&#13;&#10;  the theme name as well as the path" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="273" name="throws" description="If the theme config cannot be found" type="\Library\InvalidThemePathException">
            <type by_reference="false">\Library\InvalidThemePathException</type>
          </tag>
          <tag line="273" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="284">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="284">
          <name>$name</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="305" package="Library">
        <name>GetThemePath</name>
        <full_name>GetThemePath</full_name>
        <docblock line="298">
          <description>Returns the current theme path</description>
          <long-description/>
          <tag line="298" name="param" description="Include the current set theme name?" type="bool" variable="$themeName">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="298" name="return" description="The path from the root to the theme folder." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="305">
          <name>$themeName</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="315" package="Library">
        <name>GetThemeUrl</name>
        <full_name>GetThemeUrl</full_name>
        <docblock line="310">
          <description>Returns the theme HTTP url to the root dir.</description>
          <long-description/>
          <tag line="310" name="return" description="The path from the root to the theme folder." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="329" package="Library">
        <name>SetTheme</name>
        <full_name>SetTheme</full_name>
        <docblock line="320">
          <description>Sets the name of the theme to render, where the layout.tpl is located</description>
          <long-description/>
          <tag line="320" name="param" description="The theme name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="320" name="throws" description="If the theme doesnt exist in the theme path" type="\Library\InvalidThemePathException">
            <type by_reference="false">\Library\InvalidThemePathException</type>
          </tag>
          <tag line="320" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="329">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="351" package="Library">
        <name>Message</name>
        <full_name>Message</full_name>
        <docblock line="343">
          <description>Adds a global message to be parsed into the template</description>
          <long-description/>
          <tag line="343" name="param" description="The message level (error, warning, info etc)" type="string" variable="$lvl">
            <type by_reference="false">string</type>
          </tag>
          <tag line="343" name="param" description="The message to be displayed within the rendered template" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="343" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$lvl</name>
          <default/>
          <type/>
        </argument>
        <argument line="351">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="361" package="Library">
        <name>ClearContents</name>
        <full_name>ClearContents</full_name>
        <docblock line="356">
          <description>Clears the current output buffer of the template</description>
          <long-description/>
          <tag line="356" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="380" package="Library">
        <name>AddStylesheet</name>
        <full_name>AddStylesheet</full_name>
        <docblock line="373">
          <description>Appends the header adding a css tag</description>
          <long-description/>
          <tag line="373" name="param" description="The http location of the file" type="string" variable="$location">
            <type by_reference="false">string</type>
          </tag>
          <tag line="373" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="380">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="405" package="Library">
        <name>AddScriptSrc</name>
        <full_name>AddScriptSrc</full_name>
        <docblock line="397">
          <description>Appends the header adding a script tag</description>
          <long-description/>
          <tag line="397" name="param" description="The http location of the file" type="string" variable="$location">
            <type by_reference="false">string</type>
          </tag>
          <tag line="397" name="param" description="The script mime type, as it would be in the html script tag." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="397" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="405">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
        <argument line="405">
          <name>$type</name>
          <default>'text/javascript'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="429" package="Library">
        <name>PageTitle</name>
        <full_name>PageTitle</full_name>
        <docblock line="422">
          <description>Sets the page title (After server title)</description>
          <long-description/>
          <tag line="422" name="param" description="The title of the page" type="string" variable="$title">
            <type by_reference="false">string</type>
          </tag>
          <tag line="422" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="429">
          <name>$title</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="441" package="Library">
        <name>AppendHeader</name>
        <full_name>AppendHeader</full_name>
        <docblock line="434">
          <description>Adds a new line of code to the head tags</description>
          <long-description/>
          <tag line="434" name="param" description="The line to add" type="string" variable="$line">
            <type by_reference="false">string</type>
          </tag>
          <tag line="434" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="441">
          <name>$line</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="457" package="Library">
        <name>BuildHeader</name>
        <full_name>BuildHeader</full_name>
        <docblock line="452">
          <description>Builds the plexis header</description>
          <long-description/>
          <tag line="452" name="return" description="The rendered header data" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="517" package="Library">
        <name>ParseGlobalMessages</name>
        <full_name>ParseGlobalMessages</full_name>
        <docblock line="512">
          <description>Parse the global messages for the template renderer</description>
          <long-description/>
          <tag line="512" name="return" description="The parsed global message contents" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="551" package="Library">
        <name>LoadThemeConfig</name>
        <full_name>LoadThemeConfig</full_name>
        <docblock line="542">
          <description>Internal method for loading the theme's config xml file</description>
          <long-description/>
          <tag line="542" name="throws" description="if the theme isnt set before rendering" type="\Library\ThemeNotSetException">
            <type by_reference="false">\Library\ThemeNotSetException</type>
          </tag>
          <tag line="542" name="throws" description="if the theme is missing its theme&#13;&#10;config file (theme.xml)" type="\Library\MissingThemeConfigException">
            <type by_reference="false">\Library\MissingThemeConfigException</type>
          </tag>
          <tag line="542" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="571" package="Library">
        <name>RenderLayout</name>
        <full_name>RenderLayout</full_name>
        <docblock line="566">
          <description>Internal method for parsing template tags and rendering the layout</description>
          <long-description/>
          <tag line="566" name="return" description="The parsed contents" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Library" line="634" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>ThemeNotSetException</name>
      <full_name>\Library\ThemeNotSetException</full_name>
      <docblock line="627">
        <description>Thrown by the Template Class when the render method is called, but not theme path was set</description>
        <long-description/>
        <tag line="627" name="package" description="Library"/>
        <tag line="627" name="subpackage" description="Exceptions"/>
        <tag line="627" name="file" description="System/Library/Template.php"/>
        <tag line="627" name="see" description="\Library\Template::Render()" refers="\Library\Template::Render()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="643" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidThemePathException</name>
      <full_name>\Library\InvalidThemePathException</full_name>
      <docblock line="636">
        <description>Thrown by the Template Class if the theme path provided is an invalid path</description>
        <long-description/>
        <tag line="636" name="package" description="Library"/>
        <tag line="636" name="subpackage" description="Exceptions"/>
        <tag line="636" name="file" description="System/Library/Template.php"/>
        <tag line="636" name="see" description="\Library\Template::SetThemePath()" refers="\Library\Template::SetThemePath()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="652" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidPageContents</name>
      <full_name>\Library\InvalidPageContents</full_name>
      <docblock line="645">
        <description>Thrown by the Template Class if the contents provided are not a string, or subclass of the View method</description>
        <long-description/>
        <tag line="645" name="package" description="Library"/>
        <tag line="645" name="subpackage" description="Exceptions"/>
        <tag line="645" name="file" description="System/Library/Template.php"/>
        <tag line="645" name="see" description="\Library\Template::Add()" refers="\Library\Template::Add()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="661" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>MissingThemeConfigException</name>
      <full_name>\Library\MissingThemeConfigException</full_name>
      <docblock line="654">
        <description>Thrown by the Template Class if the theme is missing its config file</description>
        <long-description/>
        <tag line="654" name="package" description="Library"/>
        <tag line="654" name="subpackage" description="Exceptions"/>
        <tag line="654" name="file" description="System/Library/Template.php"/>
        <tag line="654" name="see" description="\Library\Template::SetThemePath()" refers="\Library\Template::SetThemePath()"/>
      </docblock>
    </class>
  </file>
  <file path="system\library\View.php" hash="80d074ad47434e48a092cb3d606b2ead" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/View.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="View"/>
      <tag line="2" name="contains" description="ViewNotFoundException"/>
      <tag line="2" name="contains" description="InvalidPageContents"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="20" package="Library">
      <extends/>
      <name>View</name>
      <full_name>\Library\View</full_name>
      <docblock line="14">
        <description>An individual view template class</description>
        <long-description/>
        <tag line="14" name="author" description="Steven Wilson"/>
        <tag line="14" name="package" description="Library"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" namespace="Library" package="Default">
        <name>$contents</name>
        <default/>
        <docblock line="22">
          <description>View contents as a string</description>
          <long-description/>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" namespace="Library" package="Default">
        <name>$variables</name>
        <default>array()</default>
        <docblock line="28">
          <description>Assigned template variables and values</description>
          <long-description/>
          <tag line="28" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="46" package="Library">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="34">
          <description>Contructor</description>
          <long-description/>
          <tag line="34" name="param" description="The file path to the template file, or the tempalte&#13;&#10;  as a string" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="If set to true, $string becomes a filename, and is&#13;&#10;  loaded. If false, $string is treated as the view's contents." type="bool" variable="$isFile">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="34" name="throws" description="if the view file cannot be located" type="\Library\ViewNotFoundException">
            <type by_reference="false">\Library\ViewNotFoundException</type>
          </tag>
          <tag line="34" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="46">
          <name>$isFile</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="64" package="Library">
        <name>set</name>
        <full_name>set</full_name>
        <docblock line="54">
          <description>Sets variables to be replaced in the view</description>
          <long-description/>
          <tag line="54" name="param" description="Name of the variable to be set,&#13;&#10;  or can be an array of key =&gt; value" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="param" description="The value of the variable (not set if $name&#13;&#10;  is an array)" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="54" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="64">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="84" package="Library">
        <name>clearVars</name>
        <full_name>clearVars</full_name>
        <docblock line="79">
          <description>These method clears all the set variables for this view</description>
          <long-description/>
          <tag line="79" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="94" package="Library">
        <name>getVars</name>
        <full_name>getVars</full_name>
        <docblock line="89">
          <description>Fetches all currently set variables</description>
          <long-description/>
          <tag line="89" name="return" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="106" package="Library">
        <name>attachStylesheet</name>
        <full_name>attachStylesheet</full_name>
        <docblock line="99">
          <description>Appends the header adding a css tag</description>
          <long-description/>
          <tag line="99" name="param" description="The http location of the file" type="string" variable="$location">
            <type by_reference="false">string</type>
          </tag>
          <tag line="99" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="116" package="Library">
        <name>attachScriptScr</name>
        <full_name>attachScriptScr</full_name>
        <docblock line="108">
          <description>Appends the header adding a script tag for this view file</description>
          <long-description/>
          <tag line="108" name="param" description="The http location of the file" type="string" variable="$location">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="param" description="The script mime type, as it would be in the html script tag." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
        <argument line="116">
          <name>$type</name>
          <default>'text/javascript'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="123" package="Library">
        <name>getContents</name>
        <full_name>getContents</full_name>
        <docblock line="118">
          <description>Returns the view's contents, un-parsed</description>
          <long-description/>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="140" package="Library">
        <name>setContents</name>
        <full_name>setContents</full_name>
        <docblock line="128">
          <description>Sets the views contents</description>
          <long-description/>
          <tag line="128" name="param" description="The new contents of&#13;&#10;  this view file. Must be a string, or an object extending&#13;&#10;  this Class." type="string|\Library\View" variable="$contents">
            <type by_reference="false">string</type>
            <type by_reference="false">\Library\View</type>
          </tag>
          <tag line="128" name="throws" description="if the contents are not a string&#13;&#10;  or a subclass of View" type="\Library\InvalidViewContents">
            <type by_reference="false">\Library\InvalidViewContents</type>
          </tag>
          <tag line="128" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$contents</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="154" package="Library">
        <name>render</name>
        <full_name>render</full_name>
        <docblock line="149">
          <description>These methods parses the view contents and returns the source</description>
          <long-description/>
          <tag line="149" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="179" package="Library">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="174">
          <description>These methods parses the view contents and returns the source</description>
          <long-description/>
          <tag line="174" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Library" line="194" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>ViewNotFoundException</name>
      <full_name>\Library\ViewNotFoundException</full_name>
      <docblock line="187">
        <description>View Not Found Exception.</description>
        <long-description>&lt;p&gt;Thrown when a view file cannot be found&lt;/p&gt;</long-description>
        <tag line="187" name="package" description="Library"/>
        <tag line="187" name="subpackage" description="Exceptions"/>
        <tag line="187" name="file" description="System/Library/View.php"/>
        <tag line="187" name="see" description="\Library\View" refers="\Library\View"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="204" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidViewContents</name>
      <full_name>\Library\InvalidViewContents</full_name>
      <docblock line="196">
        <description>Invalid View Contents.</description>
        <long-description>&lt;p&gt;Thrown when the contents passed to a view, are
  not a string, or an extension of the \Library\View class&lt;/p&gt;</long-description>
        <tag line="196" name="package" description="Library"/>
        <tag line="196" name="subpackage" description="Exceptions"/>
        <tag line="196" name="file" description="System/Library/View.php"/>
        <tag line="196" name="see" description="\Library\View" refers="\Library\View"/>
      </docblock>
    </class>
  </file>
  <file path="system\library\ZipArchive.php" hash="cf27ba597c2d2a0068d27f2df8a65bb0" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Library/ZipArchive.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="ZipArchive"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="23" package="Library">
      <extends/>
      <name>ZipArchive</name>
      <full_name>\Library\ZipArchive</full_name>
      <docblock line="17">
        <description>A Recursive directory zipping class</description>
        <long-description/>
        <tag line="17" name="author" description="Steven Wilson"/>
        <tag line="17" name="package" description="Library"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="35" package="Library">
        <name>ZipDirectory</name>
        <full_name>ZipDirectory</full_name>
        <docblock line="25">
          <description>Main method used to Zip a directory recursively</description>
          <long-description/>
          <tag line="25" name="param" description="The source directory path we are zipping" type="string" variable="$source">
            <type by_reference="false">string</type>
          </tag>
          <tag line="25" name="param" description="The full path to the Ziparchive, including filename&#13;&#10;  and extension." type="string" variable="$destination">
            <type by_reference="false">string</type>
          </tag>
          <tag line="25" name="return" description="Returns the opened ZipArchive object of the newely&#13;&#10;  created Zip file" type="\ZipArchive">
            <type by_reference="false">\ZipArchive</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$source</name>
          <default/>
          <type/>
        </argument>
        <argument line="35">
          <name>$destination</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\Plexis.php" hash="ebdc530ef6b1960fc3d10ff505290ba7" package="System">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Plexis.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="package" description="System"/>
    </docblock>
    <include line="251" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="293" type="Include" package="Default">
      <name/>
    </include>
    <include line="309" type="Include" package="Default">
      <name/>
    </include>
    <include line="338" type="Require" package="Default">
      <name/>
    </include>
    <include line="371" type="Require" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="97" package="System">
      <name>SITE_URL</name>
      <full_name>\SITE_URL</full_name>
      <value>MOD_REWRITE ? \Core\Request::BaseUrl() : \Core\Request::BaseUrl() . '/?uri='</value>
    </constant>
    <constant namespace="global" line="382" package="System">
      <name>DEBUGGING</name>
      <full_name>\DEBUGGING</full_name>
      <value>\Core\Config::GetVar('debugging', 'Plexis') &amp;&amp; \Core\Request::Query('debug', false) !== false</value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="38" package="System">
      <extends/>
      <name>Plexis</name>
      <full_name>\Plexis</full_name>
      <docblock line="32">
        <description>The backend controller is the main method for running the Application</description>
        <long-description/>
        <tag line="32" name="author" description="Steven Wilson"/>
        <tag line="32" name="package" description="System"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="44" namespace="global" package="Default">
        <name>$isRunning</name>
        <default>false</default>
        <docblock line="40">
          <description>Internal var that prevents plexis from running twice</description>
          <long-description/>
          <tag line="40" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="50" namespace="global" package="Default">
        <name>$module</name>
        <default>false</default>
        <docblock line="46">
          <description>Holds the current module object, false if the module isn't yet dispatched</description>
          <long-description/>
          <tag line="46" name="var" description="" type="\Core\Module|bool">
            <type by_reference="false">\Core\Module</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="56" namespace="global" package="Default">
        <name>$log</name>
        <default/>
        <docblock line="52">
          <description>Holds the plexis Logger object</description>
          <long-description/>
          <tag line="52" name="var" description="" type="\Core\Logger">
            <type by_reference="false">\Core\Logger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="62" namespace="global" package="Default">
        <name>$realm</name>
        <default>null</default>
        <docblock line="58">
          <description>The Wowlib object</description>
          <long-description/>
          <tag line="58" name="var" description="" type="\Wowlib\Realm">
            <type by_reference="false">\Wowlib\Realm</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="68" namespace="global" package="Default">
        <name>$helpers</name>
        <default>array()</default>
        <docblock line="64">
          <description>An array of helpers that have been loaded</description>
          <long-description/>
          <tag line="64" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="74" namespace="global" package="Default">
        <name>$plugins</name>
        <default>array()</default>
        <docblock line="70">
          <description>An array of installed plugins</description>
          <long-description/>
          <tag line="70" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="80" namespace="global" package="Default">
        <name>$renderTemplate</name>
        <default>true</default>
        <docblock line="76">
          <description>Certain modules may not want the template to render.</description>
          <long-description/>
          <tag line="76" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="88" package="System">
        <name>Run</name>
        <full_name>Run</full_name>
        <docblock line="83">
          <description>Main method for running the Plexis application</description>
          <long-description/>
          <tag line="83" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="137" package="System">
        <name>Show404</name>
        <full_name>Show404</full_name>
        <docblock line="128">
          <description>Displays the 404 page not found page</description>
          <long-description>&lt;p&gt;Calling this method will clear all current output, render the 404 page
and kill all current running scripts. No code following this method
will be executed&lt;/p&gt;</long-description>
          <tag line="128" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="156" package="System">
        <name>Show403</name>
        <full_name>Show403</full_name>
        <docblock line="147">
          <description>Displays the 403 "Forbidden"</description>
          <long-description>&lt;p&gt;Calling this method will clear all current output, render the 403 page
and kill all current running scripts. No code following this method
will be executed&lt;/p&gt;</long-description>
          <tag line="147" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="177" package="System">
        <name>ShowSiteOffline</name>
        <full_name>ShowSiteOffline</full_name>
        <docblock line="166">
          <description>Displays the site offline page</description>
          <long-description>&lt;p&gt;Calling this method will clear all current output, render the site offline
page and kill all current running scripts. No code following this method
will be executed&lt;/p&gt;</long-description>
          <tag line="166" name="param" description="The meesage to also be displayed with the&#13;&#10;  Site Offline page." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$message</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="192" package="System">
        <name>GetRealm</name>
        <full_name>GetRealm</full_name>
        <docblock line="187">
          <description>Returns the Realm Object</description>
          <long-description/>
          <tag line="187" name="return" description="" type="\Wowlib\Realm">
            <type by_reference="false">\Wowlib\Realm</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="202" package="System">
        <name>ListPlugins</name>
        <full_name>ListPlugins</full_name>
        <docblock line="197">
          <description>Returns an array of installed plugins</description>
          <long-description/>
          <tag line="197" name="return" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="214" package="System">
        <name>PluginInstalled</name>
        <full_name>PluginInstalled</full_name>
        <docblock line="207">
          <description>Returns whether or not a plugin is installed and running</description>
          <long-description/>
          <tag line="207" name="param" description="The name of the plugin" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="226" package="System">
        <name>RenderTemplate</name>
        <full_name>RenderTemplate</full_name>
        <docblock line="219">
          <description>Sets whether plexis should render the full template or not</description>
          <long-description/>
          <tag line="219" name="param" description="Render the template?" type="bool" variable="$bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="219" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="226">
          <name>$bool</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="240" package="System">
        <name>LoadHelper</name>
        <full_name>LoadHelper</full_name>
        <docblock line="233">
          <description>Loads the requested helper name</description>
          <long-description/>
          <tag line="233" name="param" description="The helper name to load (no file extension)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="return" description="Returns false if the helper doesnt exist, true otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="240">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="268" package="System">
        <name>LoadDBConnection</name>
        <full_name>LoadDBConnection</full_name>
        <docblock line="260">
          <description>Internal method for loading the Plexis DB connection</description>
          <long-description/>
          <tag line="260" name="param" description="If set to false, the Site Offline page will&#13;&#10;  not be rendered if the plexis database connection is offline" type="bool" variable="$showOffline">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="260" name="return" description="" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
        <argument line="268">
          <name>$showOffline</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="290" package="System">
        <name>LoadPlugins</name>
        <full_name>LoadPlugins</full_name>
        <docblock line="285">
          <description>Internal method for loading, and running all plugins</description>
          <long-description/>
          <tag line="285" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="335" package="System">
        <name>LoadWowlib</name>
        <full_name>LoadWowlib</full_name>
        <docblock line="327">
          <description>Internal method for loading the wowlib</description>
          <long-description/>
          <tag line="327" name="param" description="If set to false, the Site Offline page will&#13;&#10;  not be rendered if the realm database connection is offline" type="bool" variable="$showOffline">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="327" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="335">
          <name>$showOffline</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="368" package="System">
        <name>LoadConfigs</name>
        <full_name>LoadConfigs</full_name>
        <docblock line="363">
          <description>Internal method for loading the plexis config files</description>
          <long-description/>
          <tag line="363" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\System.php" hash="e151d695f3b35d84b7faf18976ca59d6" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/System.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <include line="60" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="22" package="System">
      <extends/>
      <name>System</name>
      <full_name>\System</full_name>
      <docblock line="15">
        <description>The system acts as a  wrapper for plexis.</description>
        <long-description>&lt;p&gt;It catches un-caught
exceptions, and sets up a base for plexis to work on&lt;/p&gt;</long-description>
        <tag line="15" name="author" description="Steven Wilson"/>
        <tag line="15" name="package" description="System"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="28" namespace="global" package="Default">
        <name>$isInitiated</name>
        <default>false</default>
        <docblock line="24">
          <description>Internal var that prevents the system from running twice</description>
          <long-description/>
          <tag line="24" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="35" package="System">
        <name>Run</name>
        <full_name>Run</full_name>
        <docblock line="30">
          <description>Initiates the System wrapper for plexis</description>
          <long-description/>
          <tag line="30" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\wowlib\drivers\Driver.php" hash="f31a619b3ce71449d1964331018377c5" package="Wowlib">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Wowlib/Drivers/Driver.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="package" description="Wowlib"/>
      <tag line="2" name="contains" description="Driver"/>
    </docblock>
    <include line="81" type="Require" package="Default">
      <name/>
    </include>
    <include line="149" type="Require" package="Default">
      <name/>
    </include>
    <include line="241" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Wowlib" line="23" package="Wowlib">
      <extends/>
      <name>Driver</name>
      <full_name>\Wowlib\Driver</full_name>
      <docblock line="16">
        <description>This class is used to handle different drivers of all different
emulators</description>
        <long-description/>
        <tag line="16" name="author" description="Steven Wilson"/>
        <tag line="16" name="package" description="Wowlib"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" namespace="Wowlib" package="Default">
        <name>$CDB</name>
        <default/>
        <docblock line="25">
          <description>Character database object</description>
          <long-description/>
          <tag line="25" name="var" description="" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="35" namespace="Wowlib" package="Default">
        <name>$WDB</name>
        <default/>
        <docblock line="31">
          <description>World database object</description>
          <long-description/>
          <tag line="31" name="var" description="" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" namespace="Wowlib" package="Default">
        <name>$config</name>
        <default/>
        <docblock line="37">
          <description>Driver configuration array</description>
          <long-description/>
          <tag line="37" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" namespace="Wowlib" package="Default">
        <name>$driver</name>
        <default/>
        <docblock line="43">
          <description>Loaded driver name</description>
          <long-description/>
          <tag line="43" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" namespace="Wowlib" package="Default">
        <name>$emulator</name>
        <default/>
        <docblock line="49">
          <description>Selected emulator name</description>
          <long-description/>
          <tag line="49" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="Wowlib" package="Default">
        <name>$loaded</name>
        <default>array()</default>
        <docblock line="55">
          <description>Array of loaded driver extensions</description>
          <long-description/>
          <tag line="55" name="var" description="" type="object[]">
            <type by_reference="false">object[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Wowlib" line="72" package="Wowlib">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="62">
          <description>Constructor</description>
          <long-description/>
          <tag line="62" name="param" description="The name of the selected emulator" type="string" variable="$emulator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="param" description="The name of the driver to load" type="string" variable="$driver">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="param" description="An array of database connection for the characters database" type="string[]" variable="$char">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="62" name="param" description="An array of database connection for the world database" type="string[]" variable="$world">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="62" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$emulator</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$driver</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$char</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$world</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Wowlib" line="125" package="Wowlib">
        <name>driverHasExt</name>
        <full_name>driverHasExt</full_name>
        <docblock line="115">
          <description>Returns if the namespaced driver extension class exists, and has
been loaded</description>
          <long-description/>
          <tag line="115" name="param" description="The driver classname" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="115" name="param" description="If set to false, the class will not be loaded,&#13;&#10;  and this method will true if the class file exists only." type="bool" variable="$include">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="115" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="125">
          <name>$include</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Wowlib" line="161" package="Wowlib">
        <name>getConfig</name>
        <full_name>getConfig</full_name>
        <docblock line="156">
          <description>Returns the drivers config array</description>
          <long-description/>
          <tag line="156" name="return" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Wowlib" line="174" package="Wowlib">
        <name>getColumnById</name>
        <full_name>getColumnById</full_name>
        <docblock line="166">
          <description>Returns the column name for the given table id</description>
          <long-description/>
          <tag line="166" name="param" description="The table ID" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="param" description="The table column ID" type="string" variable="$col">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="return" description="" type="string|bool">
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="174">
          <name>$col</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Wowlib" line="187" package="Wowlib">
        <name>getDriverNamespace</name>
        <full_name>getDriverNamespace</full_name>
        <docblock line="182">
          <description>Returns the namespace to all driver classes</description>
          <long-description/>
          <tag line="182" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Wowlib" line="198" package="Wowlib">
        <name>getCDB</name>
        <full_name>getCDB</full_name>
        <docblock line="192">
          <description>Returns the character database connection object</description>
          <long-description/>
          <tag line="192" name="return" description="Return false only if the&#13;&#10;  character database connection fails" type="\Database\Driver|bool">
            <type by_reference="false">\Database\Driver</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Wowlib" line="209" package="Wowlib">
        <name>getWDB</name>
        <full_name>getWDB</full_name>
        <docblock line="203">
          <description>Returns the world database connection object</description>
          <long-description/>
          <tag line="203" name="return" description="Return false only if the&#13;&#10;  world database connection fails" type="\Database\Driver|bool">
            <type by_reference="false">\Database\Driver</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Wowlib" line="221" package="Wowlib">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="214">
          <description>Magic method used to automatically load called extensions</description>
          <long-description/>
          <tag line="214" name="param" description="The name of the requested extension" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="214" name="return" description="" type="object|bool">
            <type by_reference="false">object</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\wowlib\Wowlib.php" hash="4b6be0e7f8b3a64d1b6acd8306517c15" package="Wowlib">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description/>
      <tag line="2" name="file" description="System/Wowlib/Wowlib.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="package" description="Wowlib"/>
      <tag line="2" name="contains" description="Wowlib"/>
    </docblock>
    <include line="135" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="140" type="Require" package="Default">
      <name/>
    </include>
    <include line="212" type="Require" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="211" package="Wowlib">
      <name>WOWLIB_ROOT</name>
      <full_name>\WOWLIB_ROOT</full_name>
      <value>dirname(__FILE__)</value>
    </constant>
    <class final="false" abstract="false" namespace="Wowlib" line="25" package="Wowlib">
      <extends/>
      <name>Wowlib</name>
      <full_name>\Wowlib\Wowlib</full_name>
      <docblock line="19">
        <description>WowLib Framework for WoW Private Server CMS</description>
        <long-description/>
        <tag line="19" name="author" description="Steven Wilson"/>
        <tag line="19" name="package" description="Wowlib"/>
      </docblock>
      <constant namespace="Wowlib" line="31" package="Wowlib">
        <name>VERSION</name>
        <full_name>VERSION</full_name>
        <value>'3.0'</value>
        <docblock line="27">
          <description>Contains the wowlib version.</description>
          <long-description>&lt;p&gt;This constant only changes when the wowlib has a massive update,
or makes a change, that could cause drivers to not be fully compatible anymore.&lt;/p&gt;</long-description>
        </docblock>
      </constant>
      <constant namespace="Wowlib" line="37" package="Wowlib">
        <name>REVISION</name>
        <full_name>REVISION</full_name>
        <value>1</value>
        <docblock line="33">
          <description>Contains the wowlib revision.</description>
          <long-description>&lt;p&gt;This number changes with each wowlib update, but only reflects
minor changes, that will not affect the wowlib drivers in any way.&lt;/p&gt;</long-description>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="43" namespace="Wowlib" package="Default">
        <name>$emulator</name>
        <default>''</default>
        <docblock line="39">
          <description>Emulator string name</description>
          <long-description/>
          <tag line="39" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="49" namespace="Wowlib" package="Default">
        <name>$initilized</name>
        <default>false</default>
        <docblock line="45">
          <description>Internal var for knowing if the wowlib is initialized</description>
          <long-description/>
          <tag line="45" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="55" namespace="Wowlib" package="Default">
        <name>$realm</name>
        <default>array()</default>
        <docblock line="51">
          <description>Array of loaded realm instances</description>
          <long-description/>
          <tag line="51" name="var" description="" type="\Wowlib\Emulator[]">
            <type by_reference="false">\Wowlib\Emulator[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Wowlib" line="64" package="Wowlib">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="57">
          <description>Initializes the wowlib with the provided emulator name</description>
          <long-description/>
          <tag line="57" name="param" description="The name of the emulator to load" type="string" variable="$emulator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$emulator</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Wowlib" line="113" package="Wowlib">
        <name>GetRealm</name>
        <full_name>GetRealm</full_name>
        <docblock line="89">
          <description>Fetches or initiates a new emulator object with the provided realm id</description>
          <long-description>&lt;p&gt;This method returns a realm instance based off of the ID paramenter
if the realm isnt set, a new instance of the emulators realm
class is initiated and returned&lt;/p&gt;</long-description>
          <tag line="89" name="param" description="- The array key for this realm ID.&#13;&#10;  Can be a stringname, or Integer, and is used only for when&#13;&#10;  you need to use the getRealm() method." type="string|int" variable="$id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="89" name="param" description="An array of database connection&#13;&#10;  information as defined below. Not needed unless loading a new&#13;&#10;  realm that is previously unloaded.&#13;&#10;     array(&#13;&#10;         'driver'&#13;&#10;         'host'&#13;&#10;         'port'&#13;&#10;         'database'&#13;&#10;         'username'&#13;&#10;         'password'&#13;&#10;     )" type="string[]" variable="$DB">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="89" name="return" description="Returns false if the emulator couldnt be loaded" type="\Wowlib\Emulator|bool">
            <type by_reference="false">\Wowlib\Emulator</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$id</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="113">
          <name>$DB</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Wowlib" line="164" package="Wowlib">
        <name>Load</name>
        <full_name>Load</full_name>
        <docblock line="155">
          <description>This method is used to load, and return a new instance of a Driver</description>
          <long-description/>
          <tag line="155" name="param" description="The driver name to load" type="string" variable="$driver">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="param" description="An array of database connection for the characters database" type="string[]" variable="$char">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="155" name="param" description="An array of database connection for the world database" type="string[]" variable="$world">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="155" name="return" description="" type="\Wowlib\Driver">
            <type by_reference="false">\Wowlib\Driver</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$driver</name>
          <default/>
          <type/>
        </argument>
        <argument line="164">
          <name>$char</name>
          <default/>
          <type/>
        </argument>
        <argument line="164">
          <name>$world</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Wowlib" line="179" package="Wowlib">
        <name>GetDrivers</name>
        <full_name>GetDrivers</full_name>
        <docblock line="174">
          <description>Returns an array of all the available drivers for the selected emulator</description>
          <long-description/>
          <tag line="174" name="return" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Wowlib" line="194" package="Wowlib">
        <name>SetEmulator</name>
        <full_name>SetEmulator</full_name>
        <docblock line="186">
          <description>Sets the emulator name for all future drivers</description>
          <long-description/>
          <tag line="186" name="param" description="The name of the emulator." type="string" variable="$emu">
            <type by_reference="false">string</type>
          </tag>
          <tag line="186" name="return" description="Returns false if the emulator doesnt exist,&#13;&#10;  true otherwise." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$emu</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="Core" full_name="Core">
    <package name="Exceptions" full_name="Core\Exceptions"/>
    <package name="IO" full_name="Core\IO"/>
    <package name="Router" full_name="Core\Router"/>
  </package>
  <package name="Database" full_name="Database">
    <package name="Exceptions" full_name="Database\Exceptions"/>
  </package>
  <package name="Default" full_name="Default"/>
  <package name="Helpers" full_name="Helpers">
    <package name="Ajax" full_name="Helpers\Ajax"/>
    <package name="Html" full_name="Helpers\Html"/>
    <package name="IO" full_name="Helpers\IO"/>
    <package name="Validation" full_name="Helpers\Validation"/>
  </package>
  <package name="Library" full_name="Library">
    <package name="Exceptions" full_name="Library\Exceptions"/>
  </package>
  <package name="System" full_name="System"/>
  <package name="Wowlib" full_name="Wowlib"/>
  <package name="gravatarlib" full_name="gravatarlib"/>
  <namespace name="Core" full_name="Core">
    <namespace name="IO" full_name="Core\IO"/>
    <namespace name="Router" full_name="Core\Router"/>
  </namespace>
  <namespace name="Database" full_name="Database"/>
  <namespace name="Library" full_name="Library"/>
  <namespace name="Wowlib" full_name="Wowlib"/>
  <namespace name="global" full_name="global"/>
  <marker count="3">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
