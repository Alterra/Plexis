<?php/* | --------------------------------------------------------------| | Plexis|| --------------------------------------------------------------|| Author: 		Steven Wilson| Copyright:	Copyright (c) 2011, Steven Wilson| License: 		GNU GPL v3|*/namespace Application\Library;class Telnet{    protected $handle;    protected $Debug;    protected $debug = array();/*| ---------------------------------------------------------------| Method: connect()| ---------------------------------------------------------------|| This method is used to initiate the Telnet Connection|| @Param: (String) $server - The servers IP address| @Param: (Int) $port - The Telnet port| @Param: (String) $user - The login username| @Param: (String) $pass - The login password| @Return (Bool): True on success, FALSE otherwise|*/     public function connect($server, $port, $user, $pass)    {        // Turn off error reporting for this        $this->Debug = load_class('Debug');        $this->Debug->error_reporting( FALSE );                // Open the handle        $this->handle = fsockopen($host, $port, $errno, $errstr, 3);                // Re-enable error reporting        $this->Debug->error_reporting( TRUE );                // Check if we connected successfully        if($this->handle)         {            // get the Login prompt            $auth_prompt = $this->get_response();                        // Uppercase Username            $user = strtoupper($user);            // Write username and password to command window            $send1 = $this->send($user);            $send2 = $this->send($pass);                        // If our writing is successful            if($send1 == TRUE && $send2 == TRUE)            {                // Get the motd OR auth error, 1 of the 2                $response = $this->get_response();                if(strpos($response, "failed") !== FALSE)                {                    $this->debug[] = 'Authorization Failed.';                    $this->write_log();                    $this->disconnect();                    return FALSE;                }                return TRUE;            }            else            {                $this->debug[] = 'Writing to console failed!';            }        }        else        {            $this->debug[] = 'Connection to '.$host.' @ '.$port.' Failed!';        }                // If we are here, we had errors :(        $this->write_log();        return FALSE;    }	/*| ---------------------------------------------------------------| Method: disconnect()| ---------------------------------------------------------------|| This method is used to close the Telnet Connection|| @Param: (String) $exit - Use the "exit" command?| @Return (None)|*/     public function disconnect($exit = TRUE)     {        if($this->handle)         {            if($exit == TRUE) $this->send('exit');            fclose($this->handle);            $this->handle = NULL;        }    }/*| ---------------------------------------------------------------| Method: send()| ---------------------------------------------------------------|| This method is used to send a command to the Telnet Connection|| @Param: (String) $command - The command string| @Return (Bool): TRUE on success, or FALSE|*/     public function send($command)     {        if($this->handle)         {            $send = fputs($this->handle, $command . PHP_EOL);            $this->sleep();            return $send;        }        return FALSE;    }/*| ---------------------------------------------------------------| Method: get_response()| ---------------------------------------------------------------|| This method is used to get the last response of the Connection|| @Return (String): Repsonse String|*/ 	    public function get_response()    {        // Set our return variable, and read how many bytes our return is        if($this->handle)        {            return fgets($this->handle, 8096);        }        // No handle        return FALSE;    }/*| ---------------------------------------------------------------| Method: sleep()| ---------------------------------------------------------------|| Delays the next command to prevent errors|*/ 	    public function sleep()     {        usleep(300);        return;    }/*| ---------------------------------------------------------------| Method: write_log()| ---------------------------------------------------------------|| Logs any and all errors|*/         private function write_log()    {        $date = date('Y-m-d H:i:s');        $outmsg = array();        $outmsg[] = "******************************************************************";        $outmsg[] = "Ra Debugging Log for date: ". $date . PHP_EOL;                foreach($this->debug as $line)        {            $outmsg[] = $line;        }                $outmsg[] = "******************************************************************" . PHP_EOL;        $file = fopen( SYSTEM_PATH . DS . 'logs' . DS . 'ra_debug.log', 'a' );        foreach($outmsg as $msg)        {            fwrite($file, " ". $msg . PHP_EOL);        }        fclose($file);    }}// EOF