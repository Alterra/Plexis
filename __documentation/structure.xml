<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="Plexis CMS">
  <file path="index.php" hash="6b0bfca418823ff3a566d1ce53c9ac26" package="System">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="author" description="Steven Wilson (Wilson212)"/>
      <tag line="2" name="author" description="Tony (Syke)"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="package" description="System"/>
    </docblock>
    <include line="35" type="Require" package="Default">
      <name/>
    </include>
    <include line="36" type="Require" package="Default">
      <name/>
    </include>
    <include line="37" type="Require" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="17" package="System">
      <name>TIME_START</name>
      <full_name>\TIME_START</full_name>
      <value>microtime(true)</value>
    </constant>
    <constant namespace="global" line="20" package="System">
      <name>DS</name>
      <full_name>\DS</full_name>
      <value>DIRECTORY_SEPARATOR</value>
    </constant>
    <constant namespace="global" line="23" package="System">
      <name>ROOT</name>
      <full_name>\ROOT</full_name>
      <value>dirname(__FILE__)</value>
    </constant>
    <constant namespace="global" line="26" package="System">
      <name>SYSTEM_PATH</name>
      <full_name>\SYSTEM_PATH</full_name>
      <value>ROOT . DS . 'system'</value>
    </constant>
    <constant namespace="global" line="29" package="System">
      <name>MOD_REWRITE</name>
      <full_name>\MOD_REWRITE</full_name>
      <value>isset($_SERVER["HTTP_MOD_REWRITE"]) &amp;&amp; $_SERVER["HTTP_MOD_REWRITE"] == "On"</value>
    </constant>
  </file>
  <file path="system\core\AutoLoader.php" hash="e934528160f45d0dd2b1505b123b7caf" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Autoloader.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Autoloader"/>
    </docblock>
    <include line="156" type="Require" package="Default">
      <name/>
    </include>
    <include line="174" type="Require" package="Default">
      <name/>
    </include>
    <include line="188" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="20" package="Core">
      <extends/>
      <name>AutoLoader</name>
      <full_name>\Core\AutoLoader</full_name>
      <docblock line="12">
        <description>This class is an advanced autoloader for missing class references.</description>
        <long-description>&lt;p&gt;Able to register namespace specific paths, as well as prefix
specific paths.&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="26" namespace="Core" package="Default">
        <name>$isRegistered</name>
        <default>false</default>
        <docblock line="22">
          <description>A bool that states whether the Autoloader is registered with spl_autoload</description>
          <long-description></long-description>
          <tag line="22" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="32" namespace="Core" package="Default">
        <name>$paths</name>
        <default>array()</default>
        <docblock line="28">
          <description>An array of registered paths</description>
          <long-description></long-description>
          <tag line="28" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="38" namespace="Core" package="Default">
        <name>$namespaces</name>
        <default>array()</default>
        <docblock line="34">
          <description>An array of registered namepace =&gt; path</description>
          <long-description></long-description>
          <tag line="34" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="44" namespace="Core" package="Default">
        <name>$prefixes</name>
        <default>array()</default>
        <docblock line="40">
          <description>An array of registered prefix =&gt; path</description>
          <long-description></long-description>
          <tag line="40" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="49" package="Core">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="46">
          <description>Registers the AutoLoader class with spl_autoload (Done automatically)</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="66" package="Core">
        <name>Register</name>
        <full_name>Register</full_name>
        <docblock line="58">
          <description>Registers a path for the autoload to search for classes.</description>
          <long-description>&lt;p&gt;Namespaced
and prefixed registered paths will be searched first if the class
is namespaced, or prefixed.&lt;/p&gt;</long-description>
          <tag line="58" name="param" description="Full path to search for a class" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="84" package="Core">
        <name>RegisterNamespace</name>
        <full_name>RegisterNamespace</full_name>
        <docblock line="73">
          <description>Registers a path for the autoloader to search in when searching
for a specific namespaced class.</description>
          <long-description>&lt;p&gt;When calling this method more
than once with the same namespace, the path(s) will just be added
to the current ruuning list of paths for that namespace&lt;/p&gt;</long-description>
          <tag line="73" name="param" description="The namespace we are registering" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="param" description="Full path, or an array of paths&#13;&#10;  to search for the namespaced class'." type="string|array" variable="$path">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="73" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$namespace</name>
          <default></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="103" package="Core">
        <name>RegisterPrefix</name>
        <full_name>RegisterPrefix</full_name>
        <docblock line="92">
          <description>Registers a path for the autoload to search for when searching
for a prefixed class.</description>
          <long-description>&lt;p&gt;When calling this method more than once
with the same prefix, the path(s) will just be added to the current
ruuning list of paths for that prefix&lt;/p&gt;</long-description>
          <tag line="92" name="param" description="The class prefix we are registering" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="param" description="Full path, or an array of paths&#13;&#10;  to search for the prefixed class'" type="string|array" variable="$path">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="92" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$prefix</name>
          <default></default>
          <type/>
        </argument>
        <argument line="103">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="117" package="Core">
        <name>GetNamespaces</name>
        <full_name>GetNamespaces</full_name>
        <docblock line="111">
          <description>Returns an array of all registered namespaces as keys, and an array
of registered paths for that namespace as values</description>
          <long-description></long-description>
          <tag line="111" name="return" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="128" package="Core">
        <name>GetPrefixes</name>
        <full_name>GetPrefixes</full_name>
        <docblock line="122">
          <description>Returns an array of all registered prefixes as keys, and an array
of registered paths for that prefix as values</description>
          <long-description></long-description>
          <tag line="122" name="return" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="141" package="Core">
        <name>LoadClass</name>
        <full_name>LoadClass</full_name>
        <docblock line="133">
          <description>Method used to search all registered paths for a missing class
reference (used by the spl_autoload method)</description>
          <long-description></long-description>
          <tag line="133" name="param" description="The class being loaded" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="133" name="return" description="Returns TRUE if the class is found, and file was&#13;&#10;  included successfully." type="Bool">
            <type by_reference="false">Bool</type>
          </tag>
        </docblock>
        <argument line="141">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\Benchmark.php" hash="ce9ebaee81f35887c5a49251e46c3d5c" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Benchmark.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Benchmark"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="19" package="Core">
      <extends/>
      <name>Benchmark</name>
      <full_name>\Core\Benchmark</full_name>
      <docblock line="12">
        <description>This class is used to benchmark certain parts of the system.</description>
        <long-description>&lt;p&gt;You
can define new start and stop times, and get elapsed times as well&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="25" namespace="Core" package="Default">
        <name>$start</name>
        <default>array()</default>
        <docblock line="21">
          <description>An array of benchmark start times ($name =&gt; time)</description>
          <long-description></long-description>
          <tag line="21" name="var" description="" type="float[]">
            <type by_reference="false">float[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="31" namespace="Core" package="Default">
        <name>$stop</name>
        <default>array()</default>
        <docblock line="27">
          <description>An array of benchmark stop times ($name =&gt; time)</description>
          <long-description></long-description>
          <tag line="27" name="var" description="" type="float[]">
            <type by_reference="false">float[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="38" package="Core">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="33">
          <description>When this method is called (automatically), the system start time is defined</description>
          <long-description></long-description>
          <tag line="33" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="52" package="Core">
        <name>Start</name>
        <full_name>Start</full_name>
        <docblock line="43">
          <description>Starts a new timer</description>
          <long-description>&lt;p&gt;When this method is called, a new timer will begin for the provided
benchmark name&lt;/p&gt;</long-description>
          <tag line="43" name="param" description="The name given for this benchmark timer" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="65" package="Core">
        <name>Stop</name>
        <full_name>Stop</full_name>
        <docblock line="57">
          <description>Stops a defined timer</description>
          <long-description>&lt;p&gt;When this method is called, the provided timer name will be stopped&lt;/p&gt;</long-description>
          <tag line="57" name="param" description="The name given for this benchmark timer" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="79" package="Core">
        <name>ElapsedTime</name>
        <full_name>ElapsedTime</full_name>
        <docblock line="70">
          <description>Returns the final time from start to finish for a benchmark</description>
          <long-description></long-description>
          <tag line="70" name="param" description="The name given for this benchmark timer" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="param" description="How many numbers after the &quot;.&quot; do we show?" type="int" variable="$round">
            <type by_reference="false">int</type>
          </tag>
          <tag line="70" name="param" description="Stop the timer as well?" type="bool" variable="$stop">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="70" name="return" description="The time it took from start to finish. FALSE&#13;&#10;if no timer was set in the first place." type="float|bool">
            <type by_reference="false">float</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$round</name>
          <default>3</default>
          <type/>
        </argument>
        <argument line="79">
          <name>$stop</name>
          <default>FALSE</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="101" package="Core">
        <name>MemoryUsage</name>
        <full_name>MemoryUsage</full_name>
        <docblock line="96">
          <description>Returns the amount of memory the system has used to load the page</description>
          <long-description></long-description>
          <tag line="96" name="return" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Common.php" hash="4a2d7ae7de949b63261d7c2627ac1c25" package="Core\Functions">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Common.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="author" description="Plexis Dev Team"/>
      <tag line="2" name="package" description="Core"/>
      <tag line="2" name="subpackage" description="Functions"/>
    </docblock>
    <function namespace="global" line="23" package="Core\Functions">
      <name>path</name>
      <full_name>\path</full_name>
      <docblock line="13">
        <description>Combines several strings into a file path.</description>
        <long-description></long-description>
        <tag line="13" name="param" description="The pieces of the path, passed as&#13;&#10;individual arguments. Each argument can be an array of paths,&#13;&#10;a string foldername, or a mixture of the two." type="string|string[]" variable="$parts">
          <type by_reference="false">string</type>
          <type by_reference="false">string[]</type>
        </tag>
        <tag line="13" name="return" description="Full path using the correct system&#13;&#10;  directory separater" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="23">
        <name>$parts</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="37" package="Core\Functions">
      <name>isValidIp</name>
      <full_name>\isValidIp</full_name>
      <docblock line="30">
        <description>Checks an IP address, returning whether its a valid, Non-Private IP.</description>
        <long-description></long-description>
        <tag line="30" name="param" description="The ip address to check." type="string" variable="$ip">
          <type by_reference="false">string</type>
        </tag>
        <tag line="30" name="return" description="Returns true if the given IP address is a valid, Non-Private IP, false otherwise" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="37">
        <name>$ip</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="72" package="Core\Functions">
      <name>br</name>
      <full_name>\br</full_name>
      <docblock line="65">
        <description>Creates a number of html breaks to be repeated</description>
        <long-description></long-description>
        <tag line="65" name="param" description="The number of breaks" type="int" variable="$count">
          <type by_reference="false">int</type>
        </tag>
        <tag line="65" name="return" description="A string containing the number ($count) of breaks" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="72">
        <name>$count</name>
        <default></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="system\core\Config.php" hash="df5a1b906de1955451066d5339c9cb9d" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Config.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Config"/>
    </docblock>
    <include line="129" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="19" package="Core">
      <extends/>
      <name>Config</name>
      <full_name>\Core\Config</full_name>
      <docblock line="12">
        <description>Main Config class.</description>
        <long-description>&lt;p&gt;Used to load, set, and save variables used
in the config file.&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="25" namespace="Core" package="Default">
        <name>$data</name>
        <default>array()</default>
        <docblock line="21">
          <description>An array of all out stored containers / variables</description>
          <long-description></long-description>
          <tag line="21" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="31" namespace="Core" package="Default">
        <name>$files</name>
        <default>array()</default>
        <docblock line="27">
          <description>A list of our loaded config files</description>
          <long-description></long-description>
          <tag line="27" name="var" description="" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="40" package="Core">
        <name>GetVar</name>
        <full_name>GetVar</full_name>
        <docblock line="33">
          <description>Returns the variable ($key) value in a config file.</description>
          <long-description></long-description>
          <tag line="33" name="param" description="Config variable name" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="return" description="May return NULL if the var is not set" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="40">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="56" package="Core">
        <name>FetchVars</name>
        <full_name>FetchVars</full_name>
        <docblock line="49">
          <description>Returns all variables in an array from the the config file.</description>
          <long-description></long-description>
          <tag line="49" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="return" description="Array of variables ($key =&gt; $value).&#13;&#10;May return NULL if the var is not set" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="75" package="Core">
        <name>SetVar</name>
        <full_name>SetVar</full_name>
        <docblock line="65">
          <description>Sets the variable ($key) value.</description>
          <long-description>&lt;p&gt;If not saved, default value
will be returned as soon as page is re-loaded / changed.&lt;/p&gt;</long-description>
          <tag line="65" name="param" description="Config variable name to be set, or an&#13;&#10;array of $key =&gt; $value" type="string|array" variable="$key">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="param" description="The config variable's new value" type="string" variable="$val">
            <type by_reference="false">string</type>
          </tag>
          <tag line="65" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="65" name="return" description="Returns false if the config file denies set perms" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="75">
          <name>$val</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="75">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="114" package="Core">
        <name>Load</name>
        <full_name>Load</full_name>
        <docblock line="100">
          <description>Loads a config file, and adds its defined variables to the $data array</description>
          <long-description></long-description>
          <tag line="100" name="param" description="Full path to the config file, includeing name" type="string" variable="$_Cfile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="param" description="The container name we are storing this configs" type="string" variable="$_Cname">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="param" description="If all of the config vars are stored in an array,&#13;&#10;   whats the array variable name?" type="string" variable="$_Carray">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="param" description="If set to false, config values are readonly, and cannot&#13;&#10;   be set via the 'SetVar' method." type="bool" variable="$_CallowSet">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="100" name="param" description="If set to true, the config file cannot be written&#13;&#10;   to by the 'Save' method. Also, if $_CallowSet is false, this value is&#13;&#10;   false as well, no matter the actual set value." type="bool" variable="$_CallowSave">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="100" name="return" description="Returns false if the config file cannot be found or read" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$_Cfile</name>
          <default></default>
          <type/>
        </argument>
        <argument line="114">
          <name>$_Cname</name>
          <default></default>
          <type/>
        </argument>
        <argument line="114">
          <name>$_Carray</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="114">
          <name>$_CallowSet</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="114">
          <name>$_CallowSave</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="166" package="Core">
        <name>UnLoad</name>
        <full_name>UnLoad</full_name>
        <docblock line="160">
          <description>This method is used to unload a config</description>
          <long-description></long-description>
          <tag line="160" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="177" package="Core">
        <name>IsLoaded</name>
        <full_name>IsLoaded</full_name>
        <docblock line="171">
          <description>This method returns if a config name is loaded</description>
          <long-description></long-description>
          <tag line="171" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="171" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="189" package="Core">
        <name>Save</name>
        <full_name>Save</full_name>
        <docblock line="182">
          <description>Saves all set config variables to the config file, and makes
a backup of the current config file</description>
          <long-description></long-description>
          <tag line="182" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="182" name="return" description="true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="265" package="Core">
        <name>Restore</name>
        <full_name>Restore</full_name>
        <docblock line="258">
          <description>This method is used to undo the last Save.</description>
          <long-description>&lt;p&gt;.bak file must be
in the config folder&lt;/p&gt;</long-description>
          <tag line="258" name="param" description="Config id or name given when loaded" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="258" name="return" description="true on success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="265">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\Controller.php" hash="d160f5819af3ad14692a2d3b9017cb46" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Controller.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Controller"/>
    </docblock>
    <include line="77" type="Require" package="Default">
      <name/>
    </include>
    <include line="114" type="Require" package="Default">
      <name/>
    </include>
    <include line="213" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="29" package="Core">
      <extends/>
      <name>Controller</name>
      <full_name>\Core\Controller</full_name>
      <docblock line="20">
        <description>Class used to assist modules, by providing useful methods.</description>
        <long-description>&lt;p&gt;This class is to be extended by modules, in order to provide some common
and useful methods for the child class.&lt;/p&gt;</long-description>
        <tag line="20" name="author" description="Steven Wilson"/>
        <tag line="20" name="package" description="Core"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" namespace="Core" package="Default">
        <name>$modulePath</name>
        <default></default>
        <docblock line="31">
          <description>The root path to the module extending this class</description>
          <long-description></long-description>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" namespace="Core" package="Default">
        <name>$moduleName</name>
        <default></default>
        <docblock line="37">
          <description>The child module name</description>
          <long-description></long-description>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="48" package="Core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="43">
          <description>Sets up the correct $modulePath and $moduleName variables</description>
          <long-description></long-description>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="67" package="Core">
        <name>loadModel</name>
        <full_name>loadModel</full_name>
        <docblock line="55">
          <description>Loads a model for the child controller.</description>
          <long-description>&lt;p&gt;The model will be searched for in the modules "models" folder.&lt;/p&gt;</long-description>
          <tag line="55" name="param" description="The modal name to load" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="param" description="An array or parameters to pass to the constructor.&#13;&#10;  Default empty array." type="mixed[]" variable="$params">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="55" name="return" description="The constructed modal object, or false if the model&#13;&#10;  could not be located." type="object|bool">
            <type by_reference="false">object</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="103" package="Core">
        <name>loadHelper</name>
        <full_name>loadHelper</full_name>
        <docblock line="93">
          <description>Loads a helper file for the child controller</description>
          <long-description></long-description>
          <tag line="93" name="param" description="The helper filename to load" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="param" description="When set to true, the helper will be searched for&#13;&#10;  in the &lt;ROOT&gt;/system/helpers folder instead of the modules helper&#13;&#10;  folder. Default value is false." type="bool" variable="$global">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="93" name="return" description="Returns true if the helper file was found, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="103">
          <name>$global</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="137" package="Core">
        <name>loadView</name>
        <full_name>loadView</full_name>
        <docblock line="118">
          <description>Loads a view file for the child controller (See detailed description)</description>
          <long-description>&lt;p&gt;The first path searched is the current template's module/views
folder. If the template does not contain a view for the current module,
then the modules view folder will be checked... If a view file cannot
be located on either of those paths, a ViewNotFoundException will be thrown
unless the variable $silence is set to true, in which case a false will be retuned.&lt;/p&gt;</long-description>
          <tag line="118" name="param" description="The view filename to load (no extension)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="param" description="If set to true, This method will return false instead&#13;&#10;  of throwing a \Library\ViewNotFoundException. Default value is false." type="bool" variable="$silence">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="118" name="throws" description="Thrown if $silence is false, and the&#13;&#10;  view file cannot be found/" type="\Library\ViewNotFoundException">
            <type by_reference="false">\Library\ViewNotFoundException</type>
          </tag>
          <tag line="118" name="return" description="Returns false if the view file cannot be located,&#13;&#10;  (and $silence is set to true), a Library\View object otherwise" type="\Library\View|bool">
            <type by_reference="false">\Library\View</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="137">
          <name>$silence</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="180" package="Core">
        <name>loadPartialView</name>
        <full_name>loadPartialView</full_name>
        <docblock line="163">
          <description>Loads a template partial view, such as a content or news box</description>
          <long-description>&lt;p&gt;This method loads a layout piece of the template, or rather a "partial".
An example of this, is a news box. The news box itself requires contents
to be set inside of it.&lt;/p&gt;</long-description>
          <tag line="163" name="param" description="The partial view filename to load (no extension)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="163" name="param" description="If set to true, This method will return false instead&#13;&#10;  of throwing a \Library\ViewNotFoundException. Default value is false." type="bool" variable="$silence">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="163" name="throws" description="Thrown if $silence is false, and the&#13;&#10;  view file cannot be found/" type="\Library\ViewNotFoundException">
            <type by_reference="false">\Library\ViewNotFoundException</type>
          </tag>
          <tag line="163" name="return" description="Returns false if the view file cannot be located,&#13;&#10;  (and $silence is set to true), a Library\View object otherwise" type="\Library\View|bool">
            <type by_reference="false">\Library\View</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="180">
          <name>$silence</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="203" package="Core">
        <name>loadController</name>
        <full_name>loadController</full_name>
        <docblock line="194">
          <description>Loads a controller from the current modules folder, and returns a new
  instance of that class</description>
          <long-description></long-description>
          <tag line="194" name="param" description="The name of the controller to load" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="return" description="Returns the constructed controller or false if&#13;&#10;  the controller doesnt exist" type="object|bool">
            <type by_reference="false">object</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="231" package="Core">
        <name>loadConfig</name>
        <full_name>loadConfig</full_name>
        <docblock line="219">
          <description>Loads a config file from the modules config folder</description>
          <long-description></long-description>
          <tag line="219" name="param" description="The name of the config file to load (no exension)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="219" name="param" description="The config file id (name of the config, used for&#13;&#10;  fetching and setting variables)" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="219" name="param" description="If all the config varaiables are in an array,&#13;&#10;  what is the name of the array?" type="string" variable="$arrayName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="219" name="return" description="Returns false if the file cannot be read or located, true&#13;&#10;  otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="231">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="231">
          <name>$arrayName</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="253" package="Core">
        <name>requireAuth</name>
        <full_name>requireAuth</full_name>
        <docblock line="240">
          <description>When called, if the user is not logged in, the login screen will be shown.</description>
          <long-description>&lt;p&gt;NOTE: This method will stop execution of the current request if the user
is not logged in (Guest), and the current script will stop executing.&lt;/p&gt;</long-description>
          <tag line="240" name="param" description="When set to true, the login screen will be displayed.&#13;&#10;  If set to false, a 403 &quot;Forbidden&quot; screen is shown instead." type="bool" variable="$showLogin">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="240" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="240" name="todo" description="Finish the requireAuth method"/>
        </docblock>
        <argument line="253">
          <name>$showLogin</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="282" package="Core">
        <name>requirePermission</name>
        <full_name>requirePermission</full_name>
        <docblock line="269">
          <description>When called, if the user does not have the specified permission, a 403 "forbidden"
screen will be displayed, or a redirection will occur (depending on vars).</description>
          <long-description>&lt;p&gt;NOTE: This method will stop execution of the current request when called if the user
does not have the specified permission, and the current script will stop executing.&lt;/p&gt;</long-description>
          <tag line="269" name="param" description="The name of the permission this user is required to have." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="269" name="param" description="The redirect URI (or url). If set to false, a 403 &quot;forbidden&quot;&#13;&#10;  screen will be displayed instead of a redirect." type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="269" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="282">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="282">
          <name>$uri</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\database\Driver.php" hash="0bd4640493c80b897098ead2c7eae4a8" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Database/Driver.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Driver"/>
    </docblock>
    <include line="477" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Database" line="21" package="Database">
      <extends>\PDO</extends>
      <name>Driver</name>
      <full_name>\Database\Driver</full_name>
      <docblock line="12">
        <description>PDO extension driver</description>
        <long-description>&lt;p&gt;This class is returned from the Database::Connect() method&lt;/p&gt;</long-description>
        <tag line="12" name="see" description="\Core\Database::Connect()" refers="\Core\Database::Connect()"/>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Database"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" namespace="Database" package="Default">
        <name>$driver</name>
        <default></default>
        <docblock line="23">
          <description>The PDO object</description>
          <long-description></long-description>
          <tag line="23" name="var" description="Object" type="\PDO">
            <type by_reference="false">\PDO</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" namespace="Database" package="Default">
        <name>$last_query</name>
        <default>''</default>
        <docblock line="29">
          <description>The last query string</description>
          <long-description></long-description>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" namespace="Database" package="Default">
        <name>$queries</name>
        <default>array()</default>
        <docblock line="35">
          <description>All sql statements that have been ran</description>
          <long-description></long-description>
          <tag line="35" name="var" description="" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" namespace="Database" package="Default">
        <name>$sprints</name>
        <default></default>
        <docblock line="41">
          <description>Replacements for the last query</description>
          <long-description></long-description>
          <tag line="41" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" namespace="Database" package="Default">
        <name>$num_rows</name>
        <default></default>
        <docblock line="47">
          <description>Our last queries number of rows / affected rows</description>
          <long-description></long-description>
          <tag line="47" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" namespace="Database" package="Default">
        <name>$statistics</name>
        <default>array('total_time' =&gt; 0, 'total_queries' =&gt; 0)</default>
        <docblock line="53">
          <description>Queries statistics.</description>
          <long-description></long-description>
          <tag line="53" name="var" description="" type="int[]">
            <type by_reference="false">int[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="65" namespace="Database" package="Default">
        <name>$result</name>
        <default></default>
        <docblock line="62">
          <description>The result of the last query</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="73" package="Database">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="67">
          <description>Creates the connection to the database using PDO</description>
          <long-description></long-description>
          <tag line="67" name="param" description="The database connection info array" type="string[]" variable="$i">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$i</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="97" package="Database">
        <name>query</name>
        <full_name>query</full_name>
        <docblock line="87">
          <description>Main method for querying the database.</description>
          <long-description>&lt;p&gt;This method also
benchmarks times for each query, as well as stores the query
in the $sql array.&lt;/p&gt;</long-description>
          <tag line="87" name="param" description="The query to run" type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="param" description="An array or replacemtnts of (?)'s in the $query" type="mixed[]" variable="$sprints">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="87" name="param" description="Trigger an error upon error?" type="bool" variable="$report_error">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="87" name="return" description="Returns this object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$query</name>
          <default></default>
          <type/>
        </argument>
        <argument line="97">
          <name>$sprints</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="97">
          <name>$report_error</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="156" package="Database">
        <name>exec</name>
        <full_name>exec</full_name>
        <docblock line="147">
          <description>Wrapper for PDO's exec method.</description>
          <long-description>&lt;p&gt;We are intercepting
so we can add the query to our statistics, and catch errors&lt;/p&gt;</long-description>
          <tag line="147" name="param" description="The query to run" type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="147" name="param" description="Trigger an error upon error?" type="bool" variable="$report_error">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="147" name="return" description="Returns false on error, or the number of rows affected&#13;&#10;  on success." type="int|bool">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$query</name>
          <default></default>
          <type/>
        </argument>
        <argument line="156">
          <name>$report_error</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="195" package="Database">
        <name>fetchAll</name>
        <full_name>fetchAll</full_name>
        <docblock line="187">
          <description>Fetches a multi demensional array (multiple rows) of data from the database.</description>
          <long-description></long-description>
          <tag line="187" name="param" description="The PDO array type to return" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="param" description="" type="string" variable="$param">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="return" description="Returns false if there are no rows to return, or&#13;&#10;  an array of rows on success" type="mixed[]|bool">
            <type by_reference="false">mixed[]</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$type</name>
          <default>'ASSOC'</default>
          <type/>
        </argument>
        <argument line="195">
          <name>$param</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="218" package="Database">
        <name>fetchRow</name>
        <full_name>fetchRow</full_name>
        <docblock line="211">
          <description>Fetches an array of columns from the database.</description>
          <long-description></long-description>
          <tag line="211" name="param" description="The PDO array type to return" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="211" name="return" description="Returns false if there was no result, or&#13;&#10;  an array of columns on success" type="mixed[]|bool">
            <type by_reference="false">mixed[]</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$type</name>
          <default>'ASSOC'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="237" package="Database">
        <name>fetchColumn</name>
        <full_name>fetchColumn</full_name>
        <docblock line="230">
          <description>Fetches a column from the last query result</description>
          <long-description></long-description>
          <tag line="230" name="param" description="The column index id" type="int" variable="$col">
            <type by_reference="false">int</type>
          </tag>
          <tag line="230" name="return" description="Returns false if there was no result, or&#13;&#10;  the value of the column" type="mixed|bool">
            <type by_reference="false">mixed</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$col</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="250" package="Database">
        <name>getFetchType</name>
        <full_name>getFetchType</full_name>
        <docblock line="244">
          <description>Return the PDO fetch type</description>
          <long-description></long-description>
          <tag line="244" name="param" description="The PDO array type to return" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="244" name="return" description="The PDO fetch type ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="274" package="Database">
        <name>insert</name>
        <full_name>insert</full_name>
        <docblock line="267">
          <description>An easy method that will insert data into a table</description>
          <long-description></long-description>
          <tag line="267" name="param" description="The table name we are inserting into" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="267" name="param" description="An array of &quot;column =&gt; value&quot;'s" type="mixed[]" variable="$data">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="267" name="return" description="Returns TRUE on success of FALSE on error" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="274">
          <name>$table</name>
          <default></default>
          <type/>
        </argument>
        <argument line="274">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="307" package="Database">
        <name>update</name>
        <full_name>update</full_name>
        <docblock line="299">
          <description>An easy method that will update an existing row in a table</description>
          <long-description></long-description>
          <tag line="299" name="param" description="The table name we are updating" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="299" name="param" description="An array of &quot;column =&gt; value&quot;'s" type="mixed[]" variable="$data">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="299" name="param" description="The where statement Ex: &quot;id = 5&quot;" type="string" variable="$where">
            <type by_reference="false">string</type>
          </tag>
          <tag line="299" name="return" description="Returns TRUE on success of FALSE on error" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="307">
          <name>$table</name>
          <default></default>
          <type/>
        </argument>
        <argument line="307">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="307">
          <name>$where</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="340" package="Database">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="333">
          <description>An easy method that will delete data from a table</description>
          <long-description></long-description>
          <tag line="333" name="param" description="The table name we are updating" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="333" name="param" description="The where statement Ex: &quot;id = 5&quot;" type="string" variable="$where">
            <type by_reference="false">string</type>
          </tag>
          <tag line="333" name="return" description="Returns TRUE on success of FALSE on error" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="340">
          <name>$table</name>
          <default></default>
          <type/>
        </argument>
        <argument line="340">
          <name>$where</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="362" package="Database">
        <name>numRows</name>
        <full_name>numRows</full_name>
        <docblock line="349">
          <description>Returns the number of rows affected, or number of rows in the result.</description>
          <long-description>&lt;p&gt;This method returns 1 of 2 things. A) either the number of
affected rows during the last insert/delete/update query. Or
B) The number of rows (count) in the result array.&lt;/p&gt;</long-description>
          <tag line="349" name="param" description="- Setting this to TRUE will return The&#13;&#10;  real number of rows. This is not needed unless the last&#13;&#10;  query was a SELECT query, and you are NOT using the mysql&#13;&#10;  driver." type="bool" variable="$real">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="349" name="return" description="Returns the number of rows in the last query" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="362">
          <name>$real</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="409" package="Database">
        <name>serverInfo</name>
        <full_name>serverInfo</full_name>
        <docblock line="404">
          <description>Returns the DB server information</description>
          <long-description></long-description>
          <tag line="404" name="return" description="Returns the driver, and database server version" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="423" package="Database">
        <name>statistics</name>
        <full_name>statistics</full_name>
        <docblock line="417">
          <description>Returns the statistic information of this connection</description>
          <long-description></long-description>
          <tag line="417" name="return" description="Returns the total query time for all queries, and&#13;&#10;  total number of queries ran on this connection" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="434" package="Database">
        <name>getAllQueries</name>
        <full_name>getAllQueries</full_name>
        <docblock line="428">
          <description>Returns an array of all queries thus far and each queries
statistical data such as query time.</description>
          <long-description></long-description>
          <tag line="428" name="return" description="" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="444" package="Database">
        <name>reset</name>
        <full_name>reset</full_name>
        <docblock line="439">
          <description>Clears out and resets the query statistics</description>
          <long-description></long-description>
          <tag line="439" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Database" line="460" package="Database">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="453">
          <description>Magic method to load driver extensions</description>
          <long-description></long-description>
          <tag line="453" name="param" description="Name of the extension we are searching for." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="453" name="return" description="Returns false if the extension class&#13;&#10;  doesnt exist" type="object|bool">
            <type by_reference="false">object</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="460">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Database" line="490" package="Database">
        <name>triggerError</name>
        <full_name>triggerError</full_name>
        <docblock line="485">
          <description>Triggers a database error</description>
          <long-description></long-description>
          <tag line="485" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Database.php" hash="ff5c521db092036f2897d77478aa5bc3" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Database.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Database"/>
      <tag line="2" name="contains" description="DatabaseConnectError"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="22" package="Database">
      <extends/>
      <name>Database</name>
      <full_name>\Core\Database</full_name>
      <docblock line="16">
        <description>Database Factory Class</description>
        <long-description></long-description>
        <tag line="16" name="author" description="Steven Wilson"/>
        <tag line="16" name="package" description="Database"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="28" namespace="Core" package="Default">
        <name>$connections</name>
        <default>array()</default>
        <docblock line="24">
          <description>An array of all stored connections</description>
          <long-description></long-description>
          <tag line="24" name="var" description="" type="\Database\Driver[]">
            <type by_reference="false">\Database\Driver[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="47" package="Database">
        <name>Connect</name>
        <full_name>Connect</full_name>
        <docblock line="30">
          <description>Initiates a new database connection.</description>
          <long-description></long-description>
          <tag line="30" name="param" description="Name or ID of the connection" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="30" name="param" description="The database connection information&#13;&#10;    array(&#13;&#10;      'driver'&#13;&#10;      'host'&#13;&#10;      'port'&#13;&#10;      'database'&#13;&#10;      'username'&#13;&#10;      'password')" type="array" variable="$info">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="param" description="If connection already exists, setting to true&#13;&#10;   will overwrite the old connection ID with the new connection" type="bool" variable="$new">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="30" name="return" description="Returns a Database Driver Object" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
          <tag line="30" name="throws" description="if there is a database connection error" type="\Core\DatabaseConnectError">
            <type by_reference="false">\Core\DatabaseConnectError</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$info</name>
          <default></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$new</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="71" package="Database">
        <name>GetConnection</name>
        <full_name>GetConnection</full_name>
        <docblock line="64">
          <description>Returns the connection object for the given Name or ID</description>
          <long-description></long-description>
          <tag line="64" name="param" description="Name or ID of the connection" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="Returns a Database Driver Object,&#13;&#10;   or false of the connection $name doesnt exist" type="bool|\Database\Driver">
            <type by_reference="false">bool</type>
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Core" line="84" package="Database\Exceptions">
      <extends>\Exception</extends>
      <name>DatabaseConnectError</name>
      <full_name>\Core\DatabaseConnectError</full_name>
      <docblock line="79">
        <description>Database connection exception.</description>
        <long-description>&lt;p&gt;Thrown when there is an error connecting to the database&lt;/p&gt;</long-description>
        <tag line="79" name="package" description="Database"/>
        <tag line="79" name="subpackage" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\Dispatch.php" hash="6e7e0c524ccb24f56c2f29fafd84d96b" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Dispatch.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Dispatch"/>
      <tag line="2" name="contains" description="NotFoundException"/>
      <tag line="2" name="contains" description="ControllerNotFoundException"/>
      <tag line="2" name="contains" description="MethodNotFoundException"/>
    </docblock>
    <include line="70" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="22" package="Core">
      <extends/>
      <name>Dispatch</name>
      <full_name>\Core\Dispatch</full_name>
      <docblock line="15">
        <description>Responsible for initializing the controller, and
calling on the action method.</description>
        <long-description></long-description>
        <tag line="15" name="author" description="Steven Wilson"/>
        <tag line="15" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="28" namespace="Core" package="Default">
        <name>$controllerDir</name>
        <default></default>
        <docblock line="24">
          <description>The path to the controller directory</description>
          <long-description></long-description>
          <tag line="24" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="34" namespace="Core" package="Default">
        <name>$controller</name>
        <default></default>
        <docblock line="30">
          <description>The controller class name</description>
          <long-description></long-description>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="40" namespace="Core" package="Default">
        <name>$action</name>
        <default></default>
        <docblock line="36">
          <description>The method to be called in the controller class</description>
          <long-description></long-description>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="46" namespace="Core" package="Default">
        <name>$params</name>
        <default>array()</default>
        <docblock line="42">
          <description>Arrat of parameters to be passed to the action method</description>
          <long-description></long-description>
          <tag line="42" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="56" package="Core">
        <name>Execute</name>
        <full_name>Execute</full_name>
        <docblock line="48">
          <description>This method executes the controller and action</description>
          <long-description></long-description>
          <tag line="48" name="throws" description="when the controller file cant be found" type="\Core\ControllerNotFoundException">
            <type by_reference="false">\Core\ControllerNotFoundException</type>
          </tag>
          <tag line="48" name="throws" description="when the controller doesnt have the given action" type="\Core\MethodNotFoundException">
            <type by_reference="false">\Core\MethodNotFoundException</type>
          </tag>
          <tag line="48" name="return" description="Returns what the action method returned" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="91" package="Core">
        <name>SetControllerPath</name>
        <full_name>SetControllerPath</full_name>
        <docblock line="84">
          <description>Sets the path to the controller class files.</description>
          <long-description></long-description>
          <tag line="84" name="param" description="The path to the controller files" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="84" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="102" package="Core">
        <name>GetControllerPath</name>
        <full_name>GetControllerPath</full_name>
        <docblock line="96">
          <description>Returns the path to the controller class files.</description>
          <long-description></long-description>
          <tag line="96" name="return" description="Returns the set controller path, or false&#13;&#10;  if the path isnt set" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="114" package="Core">
        <name>SetController</name>
        <full_name>SetController</full_name>
        <docblock line="107">
          <description>Sets the controller name, overriding the controller the router finds</description>
          <long-description></long-description>
          <tag line="107" name="param" description="The name of the controller to load" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="107" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="126" package="Core">
        <name>SetAction</name>
        <full_name>SetAction</full_name>
        <docblock line="119">
          <description>Sets the action name, overriding the action the router finds</description>
          <long-description></long-description>
          <tag line="119" name="param" description="The name of the action to load" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="119" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="138" package="Core">
        <name>SetParams</name>
        <full_name>SetParams</full_name>
        <docblock line="131">
          <description>Sets the actions' parameters, overriding the params the router finds</description>
          <long-description></long-description>
          <tag line="131" name="param" description="- An array of params to pass to the action" type="mixed[]" variable="$params">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="131" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$params</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Core" line="154" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>NotFoundException</name>
      <full_name>\Core\NotFoundException</full_name>
      <docblock line="146">
        <description>Thrown when the action does not exist in the controller, or the controller
class does not exists.</description>
        <long-description>&lt;p&gt;This exeption is mainly thrown for a 404&lt;/p&gt;</long-description>
        <tag line="146" name="package" description="Core"/>
        <tag line="146" name="subpackage" description="Exceptions"/>
        <tag line="146" name="file" description="System/Core/Dispatch.php"/>
        <tag line="146" name="see" description="\Core\Dispatch::Execute()" refers="\Core\Dispatch::Execute()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Core" line="163" package="Core\Exceptions">
      <extends>\Core\NotFoundException</extends>
      <name>ControllerNotFoundException</name>
      <full_name>\Core\ControllerNotFoundException</full_name>
      <docblock line="156">
        <description>Thrown when the controller class does not exist in the controllers path</description>
        <long-description></long-description>
        <tag line="156" name="package" description="Core"/>
        <tag line="156" name="subpackage" description="Exceptions"/>
        <tag line="156" name="file" description="System/Core/Dispatch.php"/>
        <tag line="156" name="see" description="\Core\Dispatch::Execute()" refers="\Core\Dispatch::Execute()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Core" line="172" package="Core\Exceptions">
      <extends>\Core\NotFoundException</extends>
      <name>MethodNotFoundException</name>
      <full_name>\Core\MethodNotFoundException</full_name>
      <docblock line="165">
        <description>Thrown when the action method does not exist in the controller</description>
        <long-description></long-description>
        <tag line="165" name="package" description="Core"/>
        <tag line="165" name="subpackage" description="Exceptions"/>
        <tag line="165" name="file" description="System/Core/Dispatch.php"/>
        <tag line="165" name="see" description="\Core\Dispatch::Execute()" refers="\Core\Dispatch::Execute()"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\ErrorHandler.php" hash="fcb43550ca2ca9d0e609b88f6d08bba6" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/ErrorHandler.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="ErrorHandler"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="19" package="Core">
      <extends/>
      <name>ErrorHandler</name>
      <full_name>\Core\ErrorHandler</full_name>
      <docblock line="12">
        <description>Responsible for handling all errors, and execptions, and displaying
an error page</description>
        <long-description></long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="26" package="Core">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="21">
          <description>Class Constructor (Internally called)</description>
          <long-description></long-description>
          <tag line="21" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="38" package="Core">
        <name>SetErrorHandler</name>
        <full_name>SetErrorHandler</full_name>
        <docblock line="31">
          <description>This method is used to set a custom class and method for displaying errors</description>
          <long-description></long-description>
          <tag line="31" name="param" description="The controller class name" type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="31" name="param" description="The method to the classname for displaying the error" type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="31" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$controller</name>
          <default></default>
          <type/>
        </argument>
        <argument line="38">
          <name>$action</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="53" package="Core">
        <name>TriggerError</name>
        <full_name>TriggerError</full_name>
        <docblock line="43">
          <description>Main method for showing an error.</description>
          <long-description>&lt;p&gt;Not garunteed to display the error, just
depends on the users error reporting level.&lt;/p&gt;</long-description>
          <tag line="43" name="param" description="Error level. the error levels share the php constants error levels" type="int" variable="$lvl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="43" name="param" description="The error message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="The filename in which the error was triggered from" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="The line number in which the error was triggered from" type="int" variable="$line">
            <type by_reference="false">int</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$lvl</name>
          <default></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="67" package="Core">
        <name>HandlePHPError</name>
        <full_name>HandlePHPError</full_name>
        <docblock line="58">
          <description>Same method as TriggerError, except this method is called by php internally</description>
          <long-description></long-description>
          <tag line="58" name="param" description="Error level. the error levels share the php constants error levels" type="int" variable="$lvl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="param" description="The error message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The filename in which the error was triggered from" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The line number in which the error was triggered from" type="int" variable="$line">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$lvl</name>
          <default></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="78" package="Core">
        <name>HandleException</name>
        <full_name>HandleException</full_name>
        <docblock line="72">
          <description>Main method for handling exceptions</description>
          <long-description></long-description>
          <tag line="72" name="param" description="The thrown exception" type="\Exception" variable="$e">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$e</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="94" package="Core">
        <name>DisplayError</name>
        <full_name>DisplayError</full_name>
        <docblock line="83">
          <description>Displays the error screen</description>
          <long-description></long-description>
          <tag line="83" name="param" description="Error level. the error levels share the php constants error levels" type="int" variable="$lvl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="83" name="param" description="The error message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="83" name="param" description="The filename in which the error was triggered from" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="83" name="param" description="The line number in which the error was triggered from" type="int" variable="$line">
            <type by_reference="false">int</type>
          </tag>
          <tag line="83" name="param" description="Php thrown error or exception?" type="bool" variable="$php">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="83" name="param" description="Is this an exception?" type="bool" variable="$exception">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="83" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$lvl</name>
          <default></default>
          <type/>
        </argument>
        <argument line="94">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
        <argument line="94">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
        <argument line="94">
          <name>$line</name>
          <default></default>
          <type/>
        </argument>
        <argument line="94">
          <name>$php</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="94">
          <name>$exception</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\EventHandler.php" hash="6580cc548c9ce9f24646252d82c3a246" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/EventHandler.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="EventHandler"/>
      <tag line="2" name="contains" description="InvalidCallableException"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="20" package="Core">
      <extends/>
      <name>EventHandler</name>
      <full_name>\Core\EventHandler</full_name>
      <docblock line="13">
        <description>Responsible for initializing the controller, and
calling on the action method.</description>
        <long-description></long-description>
        <tag line="13" name="author" description="Steven Wilson"/>
        <tag line="13" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="26" namespace="Core" package="Default">
        <name>$events</name>
        <default>array()</default>
        <docblock line="22">
          <description>An array of eventname =&gt; callbacks[]</description>
          <long-description></long-description>
          <tag line="22" name="var" description="" type="callable[]">
            <type by_reference="false">callable[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="36" package="Core">
        <name>Trigger</name>
        <full_name>Trigger</full_name>
        <docblock line="28">
          <description>Triggers an event.</description>
          <long-description></long-description>
          <tag line="28" name="param" description="The event name" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="28" name="param" description="Array of params to be passed to all callbacks&#13;&#10;   registered for this event." type="mixed[]" variable="$params">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="28" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="99" package="Core">
        <name>Register</name>
        <full_name>Register</full_name>
        <docblock line="90">
          <description>Registers a new class-&gt;method or function to be called when an
event is fired.</description>
          <long-description></long-description>
          <tag line="90" name="param" description="Name of the event to register for" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="param" description="the callback to proccess the event when fired" type="callable" variable="$callback">
            <type by_reference="false">callable</type>
          </tag>
          <tag line="90" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="90" name="throws" description="if the callback is not a callable" type="\Core\InvalidCallableException">
            <type by_reference="false">\Core\InvalidCallableException</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
        <argument line="99">
          <name>$callback</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Core" line="115" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidCallableException</name>
      <full_name>\Core\InvalidCallableException</full_name>
      <docblock line="110">
        <description>Invalid Callable Exception, Thrown when a callback is invalid</description>
        <long-description></long-description>
        <tag line="110" name="package" description="Core"/>
        <tag line="110" name="subpackage" description="Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\Filesystem.php" hash="17f8350fb8c22d74831db0abbe5cc797" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Filesystem.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Filesystem"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="18" package="Core">
      <extends/>
      <name>Filesystem</name>
      <full_name>\Core\Filesystem</full_name>
      <docblock line="12">
        <description>A class built to easily manage files and directories</description>
        <long-description></long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="26" package="Core">
        <name>IsWritable</name>
        <full_name>IsWritable</full_name>
        <docblock line="20">
          <description>This method is used to return whether a file OR directory is writable.</description>
          <long-description></long-description>
          <tag line="20" name="param" description="The complete path to the file or directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="69" package="Core">
        <name>IsReadable</name>
        <full_name>IsReadable</full_name>
        <docblock line="62">
          <description>This method is used to return whether a file OR directory is
readable and can be opened.</description>
          <long-description></long-description>
          <tag line="62" name="param" description="The complete path to the file or directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="113" package="Core">
        <name>CreateDir</name>
        <full_name>CreateDir</full_name>
        <docblock line="106">
          <description>Creates a new directory</description>
          <long-description></long-description>
          <tag line="106" name="param" description="The complete path to the new directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="106" name="param" description="The desired chmod on the folder" type="int" variable="$chmod">
            <type by_reference="false">int</type>
          </tag>
          <tag line="106" name="return" description="Returns true if the directory was created successfully." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$chmod</name>
          <default>511</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="143" package="Core">
        <name>RemoveDir</name>
        <full_name>RemoveDir</full_name>
        <docblock line="135">
          <description>Removes a directory.</description>
          <long-description>&lt;p&gt;You must use caution
with this method as its recursive, and will delete all sub files
and directories&lt;/p&gt;</long-description>
          <tag line="135" name="param" description="The complete path to the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="135" name="return" description="Returns true if the directory was removed successfully." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="218" package="Core">
        <name>ReadDir</name>
        <full_name>ReadDir</full_name>
        <docblock line="197">
          <description>Reads the contents a directory.</description>
          <long-description></long-description>
          <tag line="197" name="param" description="The complete path to the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="197" name="param" description="Detailed information about files and fodlers?" type="bool" variable="$detailed">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="197" name="param" description="Set the desired level or sub levels to read&#13;&#10;as well, -1 is unlimited." type="int" variable="$recursive">
            <type by_reference="false">int</type>
          </tag>
          <tag line="197" name="return" description="| string[] &lt;br /&gt;&#13;&#10;     &lt;ul&gt;&#13;&#10;          &lt;li&gt;'type' =&gt; &quot;file&quot; OR &quot;folder&quot;&lt;/li&gt;&#13;&#10;          &lt;li&gt;'name' =&gt; &quot;Name of the file / folder&quot;&lt;/li&gt;&#13;&#10;          &lt;li&gt;'path' =&gt; &quot;/path/to/folder/&quot; (with trailing slash)&lt;/li&gt;&#13;&#10;          &lt;li&gt;'file_list' =&gt; array() // Array of sub files and Dirs // Folders Only!&lt;/li&gt;&#13;&#10;     &lt;/ul&gt;&#13;&#10;     IF $detailed is TRUE:&#13;&#10;     &lt;ul&gt;&#13;&#10;          &lt;li&gt;'size' =&gt; (int) filesize // Files only!&lt;/li&gt;&#13;&#10;          &lt;li&gt;'modified' =&gt; (int) Last modification timestamp&lt;/li&gt;&#13;&#10;          &lt;li&gt;'accessed' =&gt; (int) Last accessed timestamp&lt;/li&gt;&#13;&#10;     &lt;/ul&gt;" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
        <argument line="218">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="218">
          <name>$detailed</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="218">
          <name>$recursive</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="311" package="Core">
        <name>CreateFile</name>
        <full_name>CreateFile</full_name>
        <docblock line="302">
          <description>Creates a new file.</description>
          <long-description></long-description>
          <tag line="302" name="param" description="The complete path to the new file" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="302" name="param" description="The contents to place in the file.&#13;&#10;  If contents are an array, they will be serialized using the php&#13;&#10;  function &lt;i&gt;serialize()&lt;/i&gt;. Default value is null" type="string|mixed[]" variable="$contents">
            <type by_reference="false">string</type>
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="302" name="return" description="Returns true if the file was created successfully" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="311">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
        <argument line="311">
          <name>$contents</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="348" package="Core">
        <name>DeleteFile</name>
        <full_name>DeleteFile</full_name>
        <docblock line="342">
          <description>Deletes a file</description>
          <long-description></long-description>
          <tag line="342" name="param" description="The complete path to the file" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="342" name="return" description="Returns true if the file was deleted successfully" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="348">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="372" package="Core">
        <name>ListFiles</name>
        <full_name>ListFiles</full_name>
        <docblock line="366">
          <description>Lists an array of files in a directory</description>
          <long-description></long-description>
          <tag line="366" name="param" description="The complete path to the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="366" name="return" description="Returns an array of all the filenames in the directory" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="372">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="429" package="Core">
        <name>ListFolders</name>
        <full_name>ListFolders</full_name>
        <docblock line="413">
          <description>Lists an array of folders in a directory</description>
          <long-description></long-description>
          <tag line="413" name="param" description="The complete path to the directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="413" name="param" description="Set the desired level or sub levels to read&#13;&#10;   as well, -1 is unlimited." type="int" variable="$recursive">
            <type by_reference="false">int</type>
          </tag>
          <tag line="413" name="return" description="&lt;br /&gt;&#13;&#10;     &lt;ul&gt;&#13;&#10;         &lt;li&gt;No Sub-Directories =&gt; (String) foldername&lt;/li&gt;&#13;&#10;         &lt;li&gt;With Sub-Directories =&gt; Array&#13;&#10;             &lt;ul&gt;&#13;&#10;                 &lt;li&gt;(String) Sub Directory Name&lt;/li&gt;&#13;&#10;             &lt;/ul&gt;&#13;&#10;         &lt;/li&gt;&#13;&#10;     &lt;/ul&gt;" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="429">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="429">
          <name>$recursive</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="485" package="Core">
        <name>Size</name>
        <full_name>Size</full_name>
        <docblock line="478">
          <description>Method is used to get the size of a file or folder</description>
          <long-description></long-description>
          <tag line="478" name="param" description="The complete path to the file / directory" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="478" name="param" description="Format the bytes into human readable? ( 11.7 MB )" type="bool" variable="$format">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="478" name="return" description="" type="int|string">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="485">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="485">
          <name>$format</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="553" package="Core">
        <name>Copy</name>
        <full_name>Copy</full_name>
        <docblock line="546">
          <description>Copies the contents of a source file, to another file</description>
          <long-description></long-description>
          <tag line="546" name="param" description="The complete path to the source file" type="string" variable="$src">
            <type by_reference="false">string</type>
          </tag>
          <tag line="546" name="param" description="The complete path to the destination file" type="string" variable="$dest">
            <type by_reference="false">string</type>
          </tag>
          <tag line="546" name="return" description="Returns true on success, or false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="553">
          <name>$src</name>
          <default></default>
          <type/>
        </argument>
        <argument line="553">
          <name>$dest</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="587" package="Core">
        <name>Rename</name>
        <full_name>Rename</full_name>
        <docblock line="580">
          <description>Rename's a file</description>
          <long-description></long-description>
          <tag line="580" name="param" description="The complete path to the source file / folder" type="string" variable="$src">
            <type by_reference="false">string</type>
          </tag>
          <tag line="580" name="param" description="The complete path to the destination file / folder" type="string" variable="$dest">
            <type by_reference="false">string</type>
          </tag>
          <tag line="580" name="return" description="Returns true on success, or false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="587">
          <name>$src</name>
          <default></default>
          <type/>
        </argument>
        <argument line="587">
          <name>$dest</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="617" package="Core">
        <name>Delete</name>
        <full_name>Delete</full_name>
        <docblock line="608">
          <description>Determines if the path given is a folder OR a file,
and removes it accordinly using this class's RemoveDir and
DeleteFile methods</description>
          <long-description></long-description>
          <tag line="608" name="param" description="The complete path to the source file / folder" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="608" name="param" description="An array of files / folders to remove" type="string[]" variable="$files">
            <type by_reference="false">string[]</type>
          </tag>
          <tag line="608" name="return" description="Returns true on success, or false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="617">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="617">
          <name>$files</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="663" package="Core">
        <name>FormatSize</name>
        <full_name>FormatSize</full_name>
        <docblock line="657">
          <description>Converts an int or float size into a human readable format</description>
          <long-description></long-description>
          <tag line="657" name="param" description="The size to be converted" type="int|float" variable="$size">
            <type by_reference="false">int</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="657" name="return" description="The human readable size" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="663">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\core\Request.php" hash="572f118739909aa4013070445b320058" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Request.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Request"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="20" package="Core">
      <extends/>
      <name>Request</name>
      <full_name>\Core\Request</full_name>
      <docblock line="12">
        <description>This class provides information for the current Request.</description>
        <long-description>&lt;p&gt;Such information
like all the Post and GET data, the URI string, the Remote IP, Referer,
the base URL, website root, and more.&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <constant namespace="Core" line="23" package="Core">
        <name>PROTOCOL_HTTP</name>
        <full_name>PROTOCOL_HTTP</full_name>
        <value>'http'</value>
      </constant>
      <constant namespace="Core" line="24" package="Core">
        <name>PROTOCOL_HTTPS</name>
        <full_name>PROTOCOL_HTTPS</full_name>
        <value>'https'</value>
      </constant>
      <constant namespace="Core" line="25" package="Core">
        <name>PROTOCOL_FTP</name>
        <full_name>PROTOCOL_FTP</full_name>
        <value>'ftp'</value>
      </constant>
      <constant namespace="Core" line="26" package="Core">
        <name>PROTOCOL_SSL</name>
        <full_name>PROTOCOL_SSL</full_name>
        <value>'ssl'</value>
      </constant>
      <constant namespace="Core" line="29" package="Core">
        <name>METHOD_POST</name>
        <full_name>METHOD_POST</full_name>
        <value>'POST'</value>
      </constant>
      <constant namespace="Core" line="30" package="Core">
        <name>METHOD_GET</name>
        <full_name>METHOD_GET</full_name>
        <value>'GET'</value>
      </constant>
      <constant namespace="Core" line="31" package="Core">
        <name>METHOD_PUT</name>
        <full_name>METHOD_PUT</full_name>
        <value>'PUT'</value>
      </constant>
      <constant namespace="Core" line="32" package="Core">
        <name>METHOD_DELETE</name>
        <full_name>METHOD_DELETE</full_name>
        <value>'DELETE'</value>
      </constant>
      <property final="false" static="true" visibility="protected" line="38" namespace="Core" package="Default">
        <name>$protocol</name>
        <default>'http'</default>
        <docblock line="34">
          <description>Current protocol</description>
          <long-description></long-description>
          <tag line="34" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="44" namespace="Core" package="Default">
        <name>$baseurl</name>
        <default></default>
        <docblock line="40">
          <description>the site's base url (the root of the website)</description>
          <long-description></long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="50" namespace="Core" package="Default">
        <name>$domain</name>
        <default></default>
        <docblock line="46">
          <description>Http domain name (no trailing paths after the .com)</description>
          <long-description></long-description>
          <tag line="46" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="57" namespace="Core" package="Default">
        <name>$webroot</name>
        <default></default>
        <docblock line="52">
          <description>The web root is the trailing path after the domain name.</description>
          <long-description>&lt;p&gt;The base url is the Domain name, plus the webroot&lt;/p&gt;</long-description>
          <tag line="52" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="63" namespace="Core" package="Default">
        <name>$queryString</name>
        <default></default>
        <docblock line="59">
          <description>The query string passed with the request</description>
          <long-description></long-description>
          <tag line="59" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="69" namespace="Core" package="Default">
        <name>$clientIp</name>
        <default></default>
        <docblock line="65">
          <description>The remote IP address connected to this request</description>
          <long-description></long-description>
          <tag line="65" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="78" package="Core">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="72">
          <description>Class Constructor (called automatically)</description>
          <long-description>&lt;p&gt;Initializes the class properties&lt;/p&gt;</long-description>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="109" package="Core">
        <name>Input</name>
        <full_name>Input</full_name>
        <docblock line="104">
          <description>Returns data from the 'php://input'</description>
          <long-description></long-description>
          <tag line="104" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="119" package="Core">
        <name>Method</name>
        <full_name>Method</full_name>
        <docblock line="114">
          <description>Returns the request http method (GET, POST, PUT etc)</description>
          <long-description></long-description>
          <tag line="114" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="135" package="Core">
        <name>Referer</name>
        <full_name>Referer</full_name>
        <docblock line="130">
          <description>Returns the reffering website url</description>
          <long-description></long-description>
          <tag line="130" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="155" package="Core">
        <name>Query</name>
        <full_name>Query</full_name>
        <docblock line="146">
          <description>Returns the url query string</description>
          <long-description></long-description>
          <tag line="146" name="param" description="The GET array id to return. Leave null to return all GET data" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="146" name="param" description="The default return value if the GET array key doesnt&#13;&#10;   exist. Default is null." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="146" name="return" description="Returns $default if the GET key doesnt exist. Returns a&#13;&#10;  string[] if no $key is provided, or the value of $key if the array key exists" type="string|string[]|mixed">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="155">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="155">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="172" package="Core">
        <name>Post</name>
        <full_name>Post</full_name>
        <docblock line="163">
          <description>Returns the POST var specified, or all POST data</description>
          <long-description></long-description>
          <tag line="163" name="param" description="The POST array id to return. Leave null to return all POST data" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="163" name="param" description="The default return value if the POST array key doesnt&#13;&#10;   exist. Default is null." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="163" name="return" description="Returns $default if the POST key doesnt exist. Returns a&#13;&#10;  string[] if no $key is provided, or the value of $key if the array key exists." type="string|string[]|mixed">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="172">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="189" package="Core">
        <name>Cookie</name>
        <full_name>Cookie</full_name>
        <docblock line="180">
          <description>Returns the Cookie name specified, or all Cookie data</description>
          <long-description></long-description>
          <tag line="180" name="param" description="The cookie name to return. Leave null to return all cookie data" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="180" name="param" description="The default return value if the Cookie name doesnt&#13;&#10;   exist. Default is null." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="180" name="return" description="Returns $default if the Cookie name doesnt exist. Returns a&#13;&#10;  string[] if no $key is provided, or the value of $key if the cookie exists." type="string|string[]|mixed">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="189">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="204" package="Core">
        <name>Accepts</name>
        <full_name>Accepts</full_name>
        <docblock line="197">
          <description>Returns the an array of what formats the client is accepting</description>
          <long-description></long-description>
          <tag line="197" name="param" description="The type to return" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="197" name="todo" description="Finish the method, and provide better description"/>
          <tag line="197" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="204">
          <name>$type</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="215" package="Core">
        <name>AcceptsLanguage</name>
        <full_name>AcceptsLanguage</full_name>
        <docblock line="206">
          <description>Returns a string or string[] of what languages the client accepts</description>
          <long-description></long-description>
          <tag line="206" name="param" description="If a language is provided here, the method will return&#13;&#10;   true or false based on whehter the client accepts the language" type="string" variable="$lang">
            <type by_reference="false">string</type>
          </tag>
          <tag line="206" name="return" description="Returns the language, or an array of&#13;&#10;languages the client accpets. If $lang is set, then this method returns&#13;&#10;a bool based on whehter the client accepts the language" type="string|string[]|bool">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$lang</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="233" package="Core">
        <name>ClientIp</name>
        <full_name>ClientIp</full_name>
        <docblock line="227">
          <description>Returns the Remote connected IP address</description>
          <long-description></long-description>
          <tag line="227" name="return" description="The validated remote IP address. Returns 0.0.0.0 if&#13;&#10;  the IP address could not be determined" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="292" package="Core">
        <name>IsAjax</name>
        <full_name>IsAjax</full_name>
        <docblock line="287">
          <description>Returns the whether the request is an ajax request</description>
          <long-description></long-description>
          <tag line="287" name="return" description="If the requeset is an ajax request (HTTP_X_REQUESTED_WITH =&gt; xmlhttprequest)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="303" package="Core">
        <name>Header</name>
        <full_name>Header</full_name>
        <docblock line="297">
          <description>Returns the value of the specified header passed</description>
          <long-description></long-description>
          <tag line="297" name="param" description="The header name to be returned" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="297" name="return" description="Returns false if the header isnt set" type="string|bool">
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="303">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="314" package="Core">
        <name>BaseUrl</name>
        <full_name>BaseUrl</full_name>
        <docblock line="309">
          <description>Returns the site's base URL</description>
          <long-description></long-description>
          <tag line="309" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="324" package="Core">
        <name>Protocol</name>
        <full_name>Protocol</full_name>
        <docblock line="319">
          <description>Returns the current requests protocol</description>
          <long-description></long-description>
          <tag line="319" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\core\Response.php" hash="ada09151f1166ec3ad11a013b89d7bbf" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Response.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Response"/>
      <tag line="2" name="contains" description="OutputSentException"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="21" package="Core">
      <extends/>
      <name>Response</name>
      <full_name>\Core\Response</full_name>
      <docblock line="13">
        <description>This class is used to send a proper formated reponse to the client.</description>
        <long-description>&lt;p&gt;You can set headers, cookies, status codes, and protocol within
this class.&lt;/p&gt;</long-description>
        <tag line="13" name="author" description="Steven Wilson"/>
        <tag line="13" name="package" description="Core"/>
      </docblock>
      <constant namespace="Core" line="24" package="Core">
        <name>HTTP_10</name>
        <full_name>HTTP_10</full_name>
        <value>'HTTP/1.0'</value>
      </constant>
      <constant namespace="Core" line="25" package="Core">
        <name>HTTP_11</name>
        <full_name>HTTP_11</full_name>
        <value>'HTTP/1.1'</value>
      </constant>
      <property final="false" static="true" visibility="protected" line="31" namespace="Core" package="Default">
        <name>$status</name>
        <default>200</default>
        <docblock line="27">
          <description>Status code to be returned in the response</description>
          <long-description></long-description>
          <tag line="27" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="37" namespace="Core" package="Default">
        <name>$protocol</name>
        <default>self::HTTP_11</default>
        <docblock line="33">
          <description>Response Protocol (HTTP/1.0 | 1.1)</description>
          <long-description></long-description>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="43" namespace="Core" package="Default">
        <name>$charset</name>
        <default>'UTF-8'</default>
        <docblock line="39">
          <description>Content encoding</description>
          <long-description></long-description>
          <tag line="39" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="49" namespace="Core" package="Default">
        <name>$contentType</name>
        <default>'text/html'</default>
        <docblock line="45">
          <description>Content Mime Type</description>
          <long-description></long-description>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="55" namespace="Core" package="Default">
        <name>$headers</name>
        <default>array()</default>
        <docblock line="51">
          <description>Array of headers to be sent with the response</description>
          <long-description></long-description>
          <tag line="51" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="61" namespace="Core" package="Default">
        <name>$cookies</name>
        <default>array()</default>
        <docblock line="57">
          <description>Array of cookies to be sent with the response</description>
          <long-description></long-description>
          <tag line="57" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="67" namespace="Core" package="Default">
        <name>$body</name>
        <default>null</default>
        <docblock line="63">
          <description>The response body (contents)</description>
          <long-description></long-description>
          <tag line="63" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="73" namespace="Core" package="Default">
        <name>$cacheDirectives</name>
        <default>array()</default>
        <docblock line="69">
          <description>Array of cahce directives to be sent with the response</description>
          <long-description></long-description>
          <tag line="69" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="79" namespace="Core" package="Default">
        <name>$outputSent</name>
        <default>false</default>
        <docblock line="75">
          <description>Used to determine if output / headers have been sent already</description>
          <long-description></long-description>
          <tag line="75" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="85" namespace="Core" package="Default">
        <name>$statusCodes</name>
        <default>array(100 =&gt; 'Continue', 101 =&gt; 'Switching Protocols', 200 =&gt; 'OK', 201 =&gt; 'Created', 202 =&gt; 'Accepted', 203 =&gt; 'Non-Authoritative Information', 204 =&gt; 'No Content', 205 =&gt; 'Reset Content', 206 =&gt; 'Partial Content', 300 =&gt; 'Multiple Choices', 301 =&gt; 'Moved Permanently', 302 =&gt; 'Found', 303 =&gt; 'See Other', 304 =&gt; 'Not Modified', 305 =&gt; 'Use Proxy', 307 =&gt; 'Temporary Redirect', 400 =&gt; 'Bad Request', 401 =&gt; 'Unauthorized', 402 =&gt; 'Payment Required', 403 =&gt; 'Forbidden', 404 =&gt; 'Not Found', 405 =&gt; 'Method Not Allowed', 406 =&gt; 'Not Acceptable', 407 =&gt; 'Proxy Authentication Required', 408 =&gt; 'Request Timeout', 409 =&gt; 'Conflict', 410 =&gt; 'Gone', 411 =&gt; 'Length Required', 412 =&gt; 'Precondition Failed', 413 =&gt; 'Request Entity Too Large', 414 =&gt; 'Request-URI Too Long', 415 =&gt; 'Unsupported Media Type', 416 =&gt; 'Requested Range Not Satisfiable', 417 =&gt; 'Expectation Failed', 500 =&gt; 'Internal Server Error', 501 =&gt; 'Not Implemented', 502 =&gt; 'Bad Gateway', 503 =&gt; 'Service Unavailable', 504 =&gt; 'Gateway Timeout', 505 =&gt; 'HTTP Version Not Supported', 509 =&gt; 'Bandwidth Limit Exceeded')</default>
        <docblock line="81">
          <description>Array of $statusCode =&gt; $description</description>
          <long-description></long-description>
          <tag line="81" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="146" package="Core">
        <name>Send</name>
        <full_name>Send</full_name>
        <docblock line="138">
          <description>This method takes all the response headers, cookies, and current
buffered contents, and sends them back to the client.</description>
          <long-description>&lt;p&gt;After this
methid is called, any output will most likely cause a content length
error for our client.&lt;/p&gt;</long-description>
          <tag line="138" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="182" package="Core">
        <name>Body</name>
        <full_name>Body</full_name>
        <docblock line="173">
          <description>Sets or returns the body of the response, based on
if a variable is passed setting the contents or not.</description>
          <long-description></long-description>
          <tag line="173" name="param" description="The body contents. Leave null if retrieving&#13;&#10;  the current set contents." type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="173" name="return" description="If $content is left null, the current&#13;&#10;  contents are returned" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$content</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="201" package="Core">
        <name>AppendBody</name>
        <full_name>AppendBody</full_name>
        <docblock line="195">
          <description>Appends data to the current body</description>
          <long-description></long-description>
          <tag line="195" name="param" description="The body contents to append." type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="195" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="217" package="Core">
        <name>StatusCode</name>
        <full_name>StatusCode</full_name>
        <docblock line="210">
          <description>Sets or returns the status code</description>
          <long-description></long-description>
          <tag line="210" name="param" description="The status code to be set" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="210" name="return" description="If $code is left null, the current status&#13;&#10;  code is returned" type="int|void">
            <type by_reference="false">int</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="217">
          <name>$code</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="244" package="Core">
        <name>ContentType</name>
        <full_name>ContentType</full_name>
        <docblock line="237">
          <description>Sets or returns the content type</description>
          <long-description></long-description>
          <tag line="237" name="param" description="The content type to be set" type="string" variable="$val">
            <type by_reference="false">string</type>
          </tag>
          <tag line="237" name="return" description="If $val is left null, the current content&#13;&#10;  type is returned" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="244">
          <name>$val</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="264" package="Core">
        <name>Encoding</name>
        <full_name>Encoding</full_name>
        <docblock line="257">
          <description>Sets or returns the content encoding</description>
          <long-description></long-description>
          <tag line="257" name="param" description="The content encoding to be set" type="string" variable="$val">
            <type by_reference="false">string</type>
          </tag>
          <tag line="257" name="return" description="If $val is left null, the current content&#13;&#10;  encoding is returned" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="264">
          <name>$val</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="284" package="Core">
        <name>SetHeader</name>
        <full_name>SetHeader</full_name>
        <docblock line="277">
          <description>Sets a header $key to the given $value</description>
          <long-description></long-description>
          <tag line="277" name="param" description="The header key or name" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="277" name="param" description="The header key's or name's value to be set" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="277" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="284">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="284">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="314" package="Core">
        <name>SetCookie</name>
        <full_name>SetCookie</full_name>
        <docblock line="305">
          <description>Sets a cookies value</description>
          <long-description></long-description>
          <tag line="305" name="param" description="The cookie name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="305" name="param" description="The cookies value" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="305" name="param" description="The UNIX timestamp the cookie expires" type="int" variable="$expires">
            <type by_reference="false">int</type>
          </tag>
          <tag line="305" name="param" description="The cookie path" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="305" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="314">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="314">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="314">
          <name>$expires</name>
          <default></default>
          <type/>
        </argument>
        <argument line="314">
          <name>$path</name>
          <default>'/'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="334" package="Core">
        <name>Protocol</name>
        <full_name>Protocol</full_name>
        <docblock line="327">
          <description>Sets or returns the http protocol</description>
          <long-description></long-description>
          <tag line="327" name="param" description="The protocol to use (HTTP_10 | HTTP_11)" type="string" variable="$code">
            <type by_reference="false">string</type>
          </tag>
          <tag line="327" name="return" description="If $code is null, the current protocol&#13;&#10;  is returned" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="334">
          <name>$code</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="366" package="Core">
        <name>Redirect</name>
        <full_name>Redirect</full_name>
        <docblock line="352">
          <description>This method sets a redirect header, and status code.</description>
          <long-description>&lt;p&gt;When this
method is called, if the $wait param is greater then 1, headers
will be sent.&lt;/p&gt;</long-description>
          <tag line="352" name="param" description="The redirect URL. If a relative path&#13;&#10;  is passed here, the site's URL will be appended" type="string" variable="$location">
            <type by_reference="false">string</type>
          </tag>
          <tag line="352" name="param" description="The wait time (in seconds) before the redirect&#13;&#10;  takes affect. If set to a non 0 value, the page will still be&#13;&#10;   rendered. Default is 0 seconds." type="int" variable="$wait">
            <type by_reference="false">int</type>
          </tag>
          <tag line="352" name="param" description="The redirect status. 301 is moved permanently,&#13;&#10;  and 307 is a temporary redirect. Default is 301." type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="352" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="366">
          <name>$location</name>
          <default></default>
          <type/>
        </argument>
        <argument line="366">
          <name>$wait</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="366">
          <name>$status</name>
          <default>301</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="399" package="Core">
        <name>HasRedirects</name>
        <full_name>HasRedirects</full_name>
        <docblock line="394">
          <description>Returns a bool of whether a redirect has been set or not</description>
          <long-description></long-description>
          <tag line="394" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="409" package="Core">
        <name>ClearRedirects</name>
        <full_name>ClearRedirects</full_name>
        <docblock line="404">
          <description>Removes all current redirects that are set</description>
          <long-description></long-description>
          <tag line="404" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="423" package="Core">
        <name>ClearHeaders</name>
        <full_name>ClearHeaders</full_name>
        <docblock line="418">
          <description>Removes all current headers that are set</description>
          <long-description></long-description>
          <tag line="418" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="433" package="Core">
        <name>ClearCookies</name>
        <full_name>ClearCookies</full_name>
        <docblock line="428">
          <description>Removes all current cookies that are modified</description>
          <long-description></long-description>
          <tag line="428" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="444" package="Core">
        <name>Reset</name>
        <full_name>Reset</full_name>
        <docblock line="438">
          <description>Removes all current changes to the response, including the current
body buffer</description>
          <long-description></long-description>
          <tag line="438" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="460" package="Core">
        <name>OutputSent</name>
        <full_name>OutputSent</full_name>
        <docblock line="455">
          <description>Returns a bool based on whether the headers and output have been sent</description>
          <long-description></long-description>
          <tag line="455" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="478" package="Core">
        <name>SendCookies</name>
        <full_name>SendCookies</full_name>
        <docblock line="473">
          <description>Sends all cookies</description>
          <long-description></long-description>
          <tag line="473" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="493" package="Core">
        <name>SendHeader</name>
        <full_name>SendHeader</full_name>
        <docblock line="486">
          <description>Sends a header</description>
          <long-description></long-description>
          <tag line="486" name="param" description="The name of the header" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="486" name="param" description="The value of the header" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="486" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="493">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="493">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="514" package="Core">
        <name>SendContentLength</name>
        <full_name>SendContentLength</full_name>
        <docblock line="509">
          <description>Sends the contents length</description>
          <long-description></long-description>
          <tag line="509" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="528" package="Core">
        <name>SendContentType</name>
        <full_name>SendContentType</full_name>
        <docblock line="523">
          <description>Sends the content type</description>
          <long-description></long-description>
          <tag line="523" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Core" line="545" package="Core">
        <name>SendBody</name>
        <full_name>SendBody</full_name>
        <docblock line="540">
          <description>Echo's out the body contents</description>
          <long-description></long-description>
          <tag line="540" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Core" line="557" package="Core\Exceptions">
      <extends>\Exception</extends>
      <name>OutputSentException</name>
      <full_name>\Core\OutputSentException</full_name>
      <docblock line="551">
        <description>Output Sent Exception, Thrown when headers have already been set, and a Repsonse method is called</description>
        <long-description></long-description>
        <tag line="551" name="package" description="Core"/>
        <tag line="551" name="subpackage" description="Exceptions"/>
        <tag line="551" name="file" description="System/Core/Response.php"/>
      </docblock>
    </class>
  </file>
  <file path="system\core\Router.php" hash="c47d919f025c3bd633fff55fde0f160b" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Core/Router.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Router"/>
    </docblock>
    <class final="false" abstract="false" namespace="Core" line="21" package="Core">
      <extends/>
      <name>Router</name>
      <full_name>\Core\Router</full_name>
      <docblock line="12">
        <description>This class is used to determine our controller / action.</description>
        <long-description>&lt;p&gt;When called
this object works with the Request object to determine the current
url, and analyze it to determine which controller, and method the
Dispatch class will use.&lt;/p&gt;</long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Core"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="27" namespace="Core" package="Default">
        <name>$routed</name>
        <default>false</default>
        <docblock line="23">
          <description>Have we routed the url yet?</description>
          <long-description></long-description>
          <tag line="23" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="33" namespace="Core" package="Default">
        <name>$controller</name>
        <default></default>
        <docblock line="29">
          <description>The requested cotnroller name</description>
          <long-description></long-description>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="39" namespace="Core" package="Default">
        <name>$action</name>
        <default></default>
        <docblock line="35">
          <description>The requested method name</description>
          <long-description></long-description>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="45" namespace="Core" package="Default">
        <name>$uri</name>
        <default></default>
        <docblock line="41">
          <description>The request uri</description>
          <long-description></long-description>
          <tag line="41" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="51" namespace="Core" package="Default">
        <name>$params</name>
        <default></default>
        <docblock line="47">
          <description>The querystring parameters</description>
          <long-description></long-description>
          <tag line="47" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="58" package="Core">
        <name>GetRequest</name>
        <full_name>GetRequest</full_name>
        <docblock line="53">
          <description>Returns all the url information</description>
          <long-description></long-description>
          <tag line="53" name="return" description="Returns array('controller' =&gt; , 'action' =&gt; , 'params' =&gt; );" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="72" package="Core">
        <name>GetController</name>
        <full_name>GetController</full_name>
        <docblock line="67">
          <description>Returns the controller name from the URI</description>
          <long-description></long-description>
          <tag line="67" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="82" package="Core">
        <name>GetAction</name>
        <full_name>GetAction</full_name>
        <docblock line="77">
          <description>Returns the method name from the URI</description>
          <long-description></long-description>
          <tag line="77" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="92" package="Core">
        <name>GetParams</name>
        <full_name>GetParams</full_name>
        <docblock line="87">
          <description>Returns the action parameters from the URI</description>
          <long-description></long-description>
          <tag line="87" name="return" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="103" package="Core">
        <name>GetUriSegement</name>
        <full_name>GetUriSegement</full_name>
        <docblock line="97">
          <description>Returns the specified URI segement</description>
          <long-description></long-description>
          <tag line="97" name="param" description="The uri segement index" type="int" variable="$index">
            <type by_reference="false">int</type>
          </tag>
          <tag line="97" name="return" description="Returns false if the URI index is out of range" type="string|bool">
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$index</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="117" package="Core">
        <name>RouteUrl</name>
        <full_name>RouteUrl</full_name>
        <docblock line="111">
          <description>This method analyzes the url to determine the controller / action
and query string</description>
          <long-description></long-description>
          <tag line="111" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\library\Auth.php" hash="d35f9fe3ae6ea52a785902181a9c3247" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Library/Auth.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Auth"/>
      <tag line="2" name="contains" description="InvalidUsernameException"/>
      <tag line="2" name="contains" description="InvalidPasswordException"/>
      <tag line="2" name="contains" description="InvalidEmailException"/>
      <tag line="2" name="contains" description="AccountBannedException"/>
      <tag line="2" name="contains" description="IpBannedException"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="31" package="Library">
      <extends/>
      <name>Auth</name>
      <full_name>\Library\Auth</full_name>
      <docblock line="23">
        <description>Authorization and User class.</description>
        <long-description>&lt;p&gt;This class is used to proccess user's, and thier permissions&lt;/p&gt;</long-description>
        <tag line="23" name="author" description="Steven Wilson"/>
        <tag line="23" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="37" namespace="Library" package="Default">
        <name>$started</name>
        <default>false</default>
        <docblock line="33">
          <description>Session started? Used internally</description>
          <long-description></long-description>
          <tag line="33" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="43" namespace="Library" package="Default">
        <name>$expireTime</name>
        <default></default>
        <docblock line="39">
          <description>When the sessoin expires</description>
          <long-description></long-description>
          <tag line="39" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="49" namespace="Library" package="Default">
        <name>$DB</name>
        <default></default>
        <docblock line="45">
          <description>Database Driver object for the Plexis database</description>
          <long-description></long-description>
          <tag line="45" name="var" description="" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="55" namespace="Library" package="Default">
        <name>$realm</name>
        <default></default>
        <docblock line="51">
          <description>The Realm object from the wowlib</description>
          <long-description></long-description>
          <tag line="51" name="var" description="" type="\Wowlib\Realm">
            <type by_reference="false">\Wowlib\Realm</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="61" namespace="Library" package="Default">
        <name>$sessionid</name>
        <default>0</default>
        <docblock line="57">
          <description>The sessions id</description>
          <long-description></long-description>
          <tag line="57" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="67" namespace="Library" package="Default">
        <name>$permissions</name>
        <default></default>
        <docblock line="63">
          <description>Current users access permissions</description>
          <long-description></long-description>
          <tag line="63" name="var" description="" type="int[]">
            <type by_reference="false">int[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="73" namespace="Library" package="Default">
        <name>$data</name>
        <default>array('logged_in' =&gt; false, 'id' =&gt; 0, 'username' =&gt; 'Guest')</default>
        <docblock line="69">
          <description>Users data array</description>
          <long-description></long-description>
          <tag line="69" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="86" package="Library">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="79">
          <description>Contructor method (called internally)</description>
          <long-description>&lt;p&gt;Initiates the user sessions and such&lt;/p&gt;</long-description>
          <tag line="79" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="121" package="Library">
        <name>StartSession</name>
        <full_name>StartSession</full_name>
        <docblock line="114">
          <description>Internal method used to check to if the user is logged in by session.</description>
          <long-description>&lt;p&gt;If not then a username, id, and account level are set at guest.
Also checks for login expire time.&lt;/p&gt;</long-description>
          <tag line="114" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="217" package="Library">
        <name>Login</name>
        <full_name>Login</full_name>
        <docblock line="204">
          <description>Method used to proccess a user login</description>
          <long-description></long-description>
          <tag line="204" name="param" description="The username to proccess" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="204" name="param" description="Unencrypted password to the account" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="204" name="throws" description="Thrown if the username contains illegal characters, or is too short/long" type="\Library\InvalidUsernameException">
            <type by_reference="false">\Library\InvalidUsernameException</type>
          </tag>
          <tag line="204" name="throws" description="Thrown if the password contains illegal characters, or is too short" type="\Library\InvalidPasswordException">
            <type by_reference="false">\Library\InvalidPasswordException</type>
          </tag>
          <tag line="204" name="throws" description="Thrown if the username or password is incorrect" type="\Library\InvalidCredentialsException">
            <type by_reference="false">\Library\InvalidCredentialsException</type>
          </tag>
          <tag line="204" name="throws" description="Thrown if the account is banned" type="\Library\AccountBannedException">
            <type by_reference="false">\Library\AccountBannedException</type>
          </tag>
          <tag line="204" name="return" description="Return true if the user is logged in, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="217">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="217">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="304" package="Library">
        <name>Register</name>
        <full_name>Register</full_name>
        <docblock line="287">
          <description>Method used to create a new account</description>
          <long-description></long-description>
          <tag line="287" name="param" description="The account username to create" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="287" name="param" description="Unencrypted password to the account" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="287" name="param" description="New accounts email address" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="287" name="param" description="The secret question ID. Leave null for no secrect question" type="int" variable="$sq">
            <type by_reference="false">int</type>
          </tag>
          <tag line="287" name="param" description="The secret question answer. Leave null for no secrect question" type="string" variable="$sa">
            <type by_reference="false">string</type>
          </tag>
          <tag line="287" name="throws" description="Thrown if the username is invalid." type="\Library\InvalidUsernameException">
            <type by_reference="false">\Library\InvalidUsernameException</type>
          </tag>
          <tag line="287" name="throws" description="Thrown if the password is invalid" type="\Library\InvalidPasswordException">
            <type by_reference="false">\Library\InvalidPasswordException</type>
          </tag>
          <tag line="287" name="throws" description="Thrown if the email is not a real email" type="\Library\InvalidEmailException">
            <type by_reference="false">\Library\InvalidEmailException</type>
          </tag>
          <tag line="287" name="throws" description="Thrown if the account name is already taken" type="\Library\AccountExistsException">
            <type by_reference="false">\Library\AccountExistsException</type>
          </tag>
          <tag line="287" name="throws" description="Thrown if the ip address is banned" type="\Library\IpBannedException">
            <type by_reference="false">\Library\IpBannedException</type>
          </tag>
          <tag line="287" name="return" description="The account ID upon success, false otherwise" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="304">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="304">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
        <argument line="304">
          <name>$email</name>
          <default></default>
          <type/>
        </argument>
        <argument line="304">
          <name>$sq</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="304">
          <name>$sa</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="412" package="Library">
        <name>LoadPermissions</name>
        <full_name>LoadPermissions</full_name>
        <docblock line="404">
          <description>Loads the permissions specific to this user</description>
          <long-description></long-description>
          <tag line="404" name="param" description="The group id" type="int" variable="$gid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="404" name="param" description="The list of all permissions for the usergroup" type="int[]" variable="$perms">
            <type by_reference="false">int[]</type>
          </tag>
          <tag line="404" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="412">
          <name>$gid</name>
          <default></default>
          <type/>
        </argument>
        <argument line="412">
          <name>$perms</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="449" package="Library">
        <name>HasPermission</name>
        <full_name>HasPermission</full_name>
        <docblock line="442">
          <description>Used to find if user has a specified permission</description>
          <long-description></long-description>
          <tag line="442" name="param" description="Permission name" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="442" name="return" description="Returns true if the user has permissions, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="449">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="466" package="Library">
        <name>Logout</name>
        <full_name>Logout</full_name>
        <docblock line="458">
          <description>Logs the user out and sets all session variables to Guest.</description>
          <long-description></long-description>
          <tag line="458" name="param" description="Start a new session? Should only&#13;&#10;be set internally in this class." type="bool" variable="$newSession">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="458" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="466">
          <name>$newSession</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="494" package="Library">
        <name>IsGuest</name>
        <full_name>IsGuest</full_name>
        <docblock line="488">
          <description>Returns whether the current connected client is a guest.</description>
          <long-description></long-description>
          <tag line="488" name="return" description="Returns true if the client is a guest, or true if&#13;&#10;  a user session is valid (logged in)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="506" package="Library">
        <name>IsLoggedIn</name>
        <full_name>IsLoggedIn</full_name>
        <docblock line="499">
          <description>Returns whether the current connected client is a guest.</description>
          <long-description>&lt;p&gt;This method is opposite of Auth::IsGuest()&lt;/p&gt;</long-description>
          <tag line="499" name="return" description="Returns true if the client is logged in, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="516" package="Library">
        <name>GetUserData</name>
        <full_name>GetUserData</full_name>
        <docblock line="511">
          <description>Returns the clients information such as username and user id</description>
          <long-description></long-description>
          <tag line="511" name="return" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="528" package="Library">
        <name>_initUser</name>
        <full_name>_initUser</full_name>
        <docblock line="521">
          <description>This method is used to initiate a user when an ID or username is determined</description>
          <long-description></long-description>
          <tag line="521" name="param" description="The account id" type="int" variable="$userid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="521" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="528">
          <name>$userid</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Library" line="645" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidUsernameException</name>
      <full_name>\Library\InvalidUsernameException</full_name>
      <docblock line="637">
        <description>Thrown by the Auth Class when the provided username is invalid in format (Too long, Too short)</description>
        <long-description></long-description>
        <tag line="637" name="package" description="Library"/>
        <tag line="637" name="subpackage" description="Exceptions"/>
        <tag line="637" name="file" description="System/Library/Auth.php"/>
        <tag line="637" name="see" description="\Library\Auth" refers="\Library\Auth"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="655" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidPasswordException</name>
      <full_name>\Library\InvalidPasswordException</full_name>
      <docblock line="647">
        <description>Thrown by the Auth Class when the provided password is invalid in format too short</description>
        <long-description></long-description>
        <tag line="647" name="package" description="Library"/>
        <tag line="647" name="subpackage" description="Exceptions"/>
        <tag line="647" name="file" description="System/Library/Auth.php"/>
        <tag line="647" name="see" description="\Library\Auth" refers="\Library\Auth"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="663" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidEmailException</name>
      <full_name>\Library\InvalidEmailException</full_name>
      <docblock line="657">
        <description>Thrown by the Auth Class when the provided email is invalid.</description>
        <long-description></long-description>
        <tag line="657" name="package" description="Library"/>
        <tag line="657" name="subpackage" description="Exceptions"/>
        <tag line="657" name="see" description="\Library\Auth::Login()" refers="\Library\Auth::Login()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="671" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidCredentialsException</name>
      <full_name>\Library\InvalidCredentialsException</full_name>
      <docblock line="665">
        <description>Thrown by the Auth Class when a login fails due to invalid username or password</description>
        <long-description></long-description>
        <tag line="665" name="package" description="Library"/>
        <tag line="665" name="subpackage" description="Exceptions"/>
        <tag line="665" name="see" description="\Library\Auth" refers="\Library\Auth"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="680" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>AccountExistsException</name>
      <full_name>\Library\AccountExistsException</full_name>
      <docblock line="673">
        <description>Thrown by the Auth Class during the Register method, if the account name provided already exists</description>
        <long-description></long-description>
        <tag line="673" name="package" description="Library"/>
        <tag line="673" name="subpackage" description="Exceptions"/>
        <tag line="673" name="file" description="System/Library/Auth.php"/>
        <tag line="673" name="see" description="\Library\Auth::Register()" refers="\Library\Auth::Register()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="689" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>AccountBannedException</name>
      <full_name>\Library\AccountBannedException</full_name>
      <docblock line="682">
        <description>Thrown by the Auth Class when logging in, and the account name is banned</description>
        <long-description></long-description>
        <tag line="682" name="package" description="Library"/>
        <tag line="682" name="subpackage" description="Exceptions"/>
        <tag line="682" name="file" description="System/Library/Auth.php"/>
        <tag line="682" name="see" description="\Library\Auth::Login()" refers="\Library\Auth::Login()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="698" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>IpBannedException</name>
      <full_name>\Library\IpBannedException</full_name>
      <docblock line="691">
        <description>Thrown by the Auth Class when registering an account, and the Remote IP is banned.</description>
        <long-description></long-description>
        <tag line="691" name="package" description="Library"/>
        <tag line="691" name="subpackage" description="Exceptions"/>
        <tag line="691" name="file" description="System/Library/Auth.php"/>
        <tag line="691" name="see" description="\Library\Auth::Register()" refers="\Library\Auth::Register()"/>
      </docblock>
    </class>
  </file>
  <file path="system\library\Cache.php" hash="d00ba39f6fb6b741d3655055ae5fb7e2" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Library/Cache.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Cache"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>Cache</name>
      <full_name>\Library\Cache</full_name>
      <docblock line="12">
        <description>Simple Cache class for the CMS</description>
        <long-description></long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="24" namespace="Library" package="Default">
        <name>$path</name>
        <default></default>
        <docblock line="20">
          <description>The cache path</description>
          <long-description></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="33" package="Library">
        <name>Init</name>
        <full_name>Init</full_name>
        <docblock line="26">
          <description>Contructor method (called internally)</description>
          <long-description>&lt;p&gt;Initiates the default cache path&lt;/p&gt;</long-description>
          <tag line="26" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="45" package="Library">
        <name>SetPath</name>
        <full_name>SetPath</full_name>
        <docblock line="38">
          <description>Sets the cache folder path</description>
          <long-description></long-description>
          <tag line="38" name="param" description="The path to the new cache folder" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="59" package="Library">
        <name>Get</name>
        <full_name>Get</full_name>
        <docblock line="52">
          <description>Reads and returns the contents of a cache file</description>
          <long-description></long-description>
          <tag line="52" name="param" description="The name of the cache file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="return" description="Returns the cache files contents" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="91" package="Library">
        <name>Save</name>
        <full_name>Save</full_name>
        <docblock line="82">
          <description>Reads and returns the contents of a cache file</description>
          <long-description></long-description>
          <tag line="82" name="param" description="The name of the cache file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="param" description="The contents to be stored in the cache" type="string" variable="$contents">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="param" description="The expire time in seconds from now" type="int" variable="$expire">
            <type by_reference="false">int</type>
          </tag>
          <tag line="82" name="return" description="Returns true if the save is successfull, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="91">
          <name>$contents</name>
          <default></default>
          <type/>
        </argument>
        <argument line="91">
          <name>$expire</name>
          <default>86400</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="119" package="Library">
        <name>Delete</name>
        <full_name>Delete</full_name>
        <docblock line="112">
          <description>Deletes a cache file</description>
          <long-description></long-description>
          <tag line="112" name="param" description="The name of the cache file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="return" description="Returns true of the delete was successfull, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="143" package="Library">
        <name>Clear</name>
        <full_name>Clear</full_name>
        <docblock line="138">
          <description>Deletes all cache files from the cache folder</description>
          <long-description></long-description>
          <tag line="138" name="return" description="Returns true of the delete was successfull, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="168" package="Library">
        <name>ExpireTime</name>
        <full_name>ExpireTime</full_name>
        <docblock line="161">
          <description>Reads and returns the expire time for the file in UNIX timestamp</description>
          <long-description></long-description>
          <tag line="161" name="param" description="The name of the cache file" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="161" name="return" description="Returns UNIX timestamp expire time" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\library\Mime.php" hash="d9bb933f5573d01f85906d4c6464e6ee" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Library/Mime.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Mime"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>Mime</name>
      <full_name>\Library\Mime</full_name>
      <docblock line="12">
        <description>A File extension mime parser.</description>
        <long-description></long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" namespace="Library" package="Default">
        <name>$mimeTypes</name>
        <default>array('htm' =&gt; 'text/html', 'html' =&gt; 'text/html', 'xhtml' =&gt; array('application/xhtml+xml', 'application/xhtml', 'text/xhtml'), 'xhtml-mobile' =&gt; 'application/vnd.wap.xhtml+xml', 'xml' =&gt; array('application/xml', 'text/xml'), 'css' =&gt; 'text/css', 'js' =&gt; 'text/javascript', 'javascript' =&gt; 'text/javascript', 'rss' =&gt; 'application/rss+xml', 'json' =&gt; 'application/json', 'csv' =&gt; array('text/csv', 'application/vnd.ms-excel', 'text/plain'), 'file' =&gt; 'multipart/form-data', 'php' =&gt; 'text/x-php', 'gif' =&gt; 'image/gif', 'jpe' =&gt; 'image/jpeg', 'jpeg' =&gt; 'image/jpeg', 'jpg' =&gt; 'image/jpeg', 'png' =&gt; 'image/png', 'svg' =&gt; 'image/svg+xml', 'svgz' =&gt; 'image/svg+xml', 'ico' =&gt; array('image/x-icon', 'image/vnd.microsoft.icon'), 'exe' =&gt; 'application/octet-stream', 'bin' =&gt; 'application/octet-stream', 'sh' =&gt; 'application/x-sh', 'zip' =&gt; 'application/zip', 'rar' =&gt; 'application/x-rar-compressed', 'gtar' =&gt; 'application/x-gtar', 'gz' =&gt; 'application/x-gzip', 'bz2' =&gt; 'application/x-bzip', '7z' =&gt; 'application/x-7z-compressed', 'tar' =&gt; 'application/x-tar', 'otf' =&gt; 'font/otf', 'ttf' =&gt; 'font/ttf', 'mp2' =&gt; 'audio/mpeg', 'mp3' =&gt; 'audio/mpeg', 'mpga' =&gt; 'audio/mpeg', 'ogg' =&gt; 'audio/ogg', 'oga' =&gt; 'audio/ogg', 'spx' =&gt; 'audio/ogg', 'ra' =&gt; 'audio/x-realaudio', 'ram' =&gt; 'audio/x-pn-realaudio', 'rm' =&gt; 'audio/x-pn-realaudio', 'rpm' =&gt; 'audio/x-pn-realaudio-plugin', 'wav' =&gt; 'audio/x-wav', 'aac' =&gt; 'audio/aac', 'flac' =&gt; 'audio/flac', 'avi' =&gt; array('video/x-msvideo', 'video/avi'), 'mov' =&gt; 'video/quicktime', 'mpe' =&gt; 'video/mpeg', 'mpeg' =&gt; 'video/mpeg', 'mpg' =&gt; 'video/mpeg', 'qt' =&gt; 'video/quicktime', 'ogv' =&gt; 'video/ogg', 'webm' =&gt; 'video/webm', 'mp4' =&gt; 'video/mp4', 'flv' =&gt; 'video/x-flv', 'ics' =&gt; 'text/calendar', 'rtf' =&gt; 'text/rtf', 'rtx' =&gt; 'text/richtext', 'tsv' =&gt; 'text/tab-separated-values', 'tpl' =&gt; 'text/template', 'txt' =&gt; 'text/plain', 'text' =&gt; 'text/plain', 'ief' =&gt; 'image/ief', 'pbm' =&gt; 'image/x-portable-bitmap', 'pgm' =&gt; 'image/x-portable-graymap', 'pnm' =&gt; 'image/x-portable-anymap', 'ppm' =&gt; 'image/x-portable-pixmap', 'ras' =&gt; 'image/cmu-raster', 'rgb' =&gt; 'image/x-rgb', 'tif' =&gt; 'image/tiff', 'tiff' =&gt; 'image/tiff', 'xbm' =&gt; 'image/x-xbitmap', 'xpm' =&gt; 'image/x-xpixmap', 'xwd' =&gt; 'image/x-xwindowdump', 'pdf' =&gt; 'application/pdf', 'psd' =&gt; array('image/vnd.adobe.photoshop', 'application/octet-stream'), 'swf' =&gt; 'application/x-shockwave-flash', 'doc' =&gt; 'application/msword', 'docx' =&gt; 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'xlc' =&gt; 'application/vnd.ms-excel', 'xll' =&gt; 'application/vnd.ms-excel', 'xlm' =&gt; 'application/vnd.ms-excel', 'xls' =&gt; 'application/vnd.ms-excel', 'xlsx' =&gt; 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xlw' =&gt; 'application/vnd.ms-excel', 'pot' =&gt; 'application/vnd.ms-powerpoint', 'pps' =&gt; 'application/vnd.ms-powerpoint', 'ppt' =&gt; 'application/vnd.ms-powerpoint', 'pptx' =&gt; 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'ppz' =&gt; 'application/vnd.ms-powerpoint')</default>
        <docblock line="20">
          <description>An array of ext =&gt; (mime type | mime types[])</description>
          <long-description></long-description>
          <tag line="20" name="var" description="" type="string[]|array[]">
            <type by_reference="false">string[]</type>
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="147" package="Library">
        <name>GetType</name>
        <full_name>GetType</full_name>
        <docblock line="137">
          <description>Returns a mime type for the provided file extension</description>
          <long-description></long-description>
          <tag line="137" name="param" description="The file extension" type="string" variable="$ext">
            <type by_reference="false">string</type>
          </tag>
          <tag line="137" name="return" description="Returns an array if there is more then&#13;&#10;1 mime type (Ordered by most common to least), or a string if&#13;&#10;there is only 1 mime type. Returns false if there is no entry&#13;&#10;for the given file extenstion" type="string|string[]">
            <type by_reference="false">string</type>
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$ext</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="165" package="Library">
        <name>SetType</name>
        <full_name>SetType</full_name>
        <docblock line="157">
          <description>Sets a mime type for the provided file extension</description>
          <long-description></long-description>
          <tag line="157" name="param" description="The file extension" type="string" variable="$ext">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="param" description="A string or array of mime types" type="string|array" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="157" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$ext</name>
          <default></default>
          <type/>
        </argument>
        <argument line="165">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\library\Parser.php" hash="fb1640a63f4dfb417b5503a504adebbe" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Library/Parser.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Parser"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="18" package="Library">
      <extends/>
      <name>Parser</name>
      <full_name>\Library\Parser</full_name>
      <docblock line="12">
        <description>A source parsing class</description>
        <long-description></long-description>
        <tag line="12" name="author" description="Steven Wilson"/>
        <tag line="12" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="24" namespace="Library" package="Default">
        <name>$l_delim</name>
        <default>'{'</default>
        <docblock line="20">
          <description>Left parsing delimiter</description>
          <long-description></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="30" namespace="Library" package="Default">
        <name>$r_delim</name>
        <default>'}'</default>
        <docblock line="26">
          <description>Right parsing delimeter</description>
          <long-description></long-description>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="40" package="Library">
        <name>SetDelimiters</name>
        <full_name>SetDelimiters</full_name>
        <docblock line="32">
          <description>Sets the template delimiters for psuedo blocks</description>
          <long-description></long-description>
          <tag line="32" name="param" description="The left delimiter" type="string" variable="$l">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="param" description="The right delimiter" type="string" variable="$r">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$l</name>
          <default>'{'</default>
          <type/>
        </argument>
        <argument line="40">
          <name>$r</name>
          <default>'}'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="56" package="Library">
        <name>Parse</name>
        <full_name>Parse</full_name>
        <docblock line="46">
          <description>This method uses all defined template assigned variables
to loop through and replace the Psuedo blocks that contain
variable names</description>
          <long-description></long-description>
          <tag line="46" name="param" description="The source with all the {variables}" type="string" variable="$source">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="Array of variables to be parsed" type="mixed[]" variable="$data">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="46" name="return" description="The parsed contents are returned" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$source</name>
          <default></default>
          <type/>
        </argument>
        <argument line="56">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="195" package="Library">
        <name>ParseArray</name>
        <full_name>ParseArray</full_name>
        <docblock line="187">
          <description>Parses an array such as {user.userinfo.username}</description>
          <long-description></long-description>
          <tag line="187" name="param" description="The full unparsed array ( { something.else} )" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="param" description="The actual array that holds the value of $key" type="mixed[]" variable="$array">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="187" name="return" description="Returns the parsed value of the array key" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="195">
          <name>$array</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="248" package="Library">
        <name>ParsePair</name>
        <full_name>ParsePair</full_name>
        <docblock line="240">
          <description>Parses array blocks (  {key} ,,, {/key} ), acts like a foreach loop</description>
          <long-description></long-description>
          <tag line="240" name="param" description="The preg_match of the block {key} (what we need) {/key}" type="string" variable="$match">
            <type by_reference="false">string</type>
          </tag>
          <tag line="240" name="param" description="The array that contains the variables inside the blocks" type="mixed[]" variable="$val">
            <type by_reference="false">mixed[]</type>
          </tag>
          <tag line="240" name="return" description="Returns the parsed foreach loop block" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="248">
          <name>$match</name>
          <default></default>
          <type/>
        </argument>
        <argument line="248">
          <name>$val</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="system\library\Template.php" hash="c81c49713f9ebec3b6ef84746ad8a149" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Library/Template.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="Template"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="24" package="Library">
      <extends/>
      <name>Template</name>
      <full_name>\Library\Template</full_name>
      <docblock line="18">
        <description>Template Engine for the CMS</description>
        <long-description></long-description>
        <tag line="18" name="author" description="Steven Wilson"/>
        <tag line="18" name="package" description="Library"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="30" namespace="Library" package="Default">
        <name>$buffer</name>
        <default>null</default>
        <docblock line="26">
          <description>The current body view contents</description>
          <long-description></long-description>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="36" namespace="Library" package="Default">
        <name>$themePath</name>
        <default></default>
        <docblock line="32">
          <description>The root path to the themes folder</description>
          <long-description></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="42" namespace="Library" package="Default">
        <name>$themeName</name>
        <default></default>
        <docblock line="38">
          <description>The selected theme name</description>
          <long-description></long-description>
          <tag line="38" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="48" namespace="Library" package="Default">
        <name>$themeUrl</name>
        <default></default>
        <docblock line="44">
          <description>The complete http path to the theme root</description>
          <long-description></long-description>
          <tag line="44" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="54" namespace="Library" package="Default">
        <name>$themeConfig</name>
        <default></default>
        <docblock line="50">
          <description>Theme xml config object</description>
          <long-description></long-description>
          <tag line="50" name="var" description="" type="\Library\SimpleXMLElement">
            <type by_reference="false">\Library\SimpleXMLElement</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="60" namespace="Library" package="Default">
        <name>$pageTitle</name>
        <default></default>
        <docblock line="56">
          <description>The page title for the title tag (appended after server name)</description>
          <long-description></long-description>
          <tag line="56" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="66" namespace="Library" package="Default">
        <name>$headers</name>
        <default>array()</default>
        <docblock line="62">
          <description>An array of lines to be injected into the layout head tags</description>
          <long-description></long-description>
          <tag line="62" name="var" description="" type="string[]">
            <type by_reference="false">string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="72" namespace="Library" package="Default">
        <name>$messages</name>
        <default>array()</default>
        <docblock line="68">
          <description>Array of template messages</description>
          <long-description></long-description>
          <tag line="68" name="var" description="('level', 'message')" type="array[]">
            <type by_reference="false">array[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="78" namespace="Library" package="Default">
        <name>$variables</name>
        <default>array()</default>
        <docblock line="74">
          <description>Variables to be parsed in the layout view</description>
          <long-description></long-description>
          <tag line="74" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="84" namespace="Library" package="Default">
        <name>$jsVars</name>
        <default>array()</default>
        <docblock line="80">
          <description>Javascript Variables to be added in the header</description>
          <long-description></long-description>
          <tag line="80" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="99" package="Library">
        <name>Render</name>
        <full_name>Render</full_name>
        <docblock line="86">
          <description>Renders the current body contents into the template layout</description>
          <long-description>&lt;p&gt;If the $return param is false, the Response object will be called
internally, and the Reponse headers and content will be sent to the
browser.&lt;/p&gt;</long-description>
          <tag line="86" name="param" description="When set to true, final rendered template&#13;&#10;  is returned instead of sending the response." type="bool" variable="$return">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="86" name="param" description="Load the layout?" type="bool" variable="$loadLayout">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="86" name="return" description="Only returns the parsed page if $return is true" type="string|void">
            <type by_reference="false">string</type>
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$return</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="99">
          <name>$loadLayout</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="144" package="Library">
        <name>LoadView</name>
        <full_name>LoadView</full_name>
        <docblock line="128">
          <description>Loads a view file from the template's module view folder.</description>
          <long-description></long-description>
          <tag line="128" name="param" description="The name of the module (where the view is located)&#13;&#10;  If the $name parameter is false, then this param becomes becomes the&#13;&#10;  partial view name, and a partial view is loaded rather then a full&#13;&#10;  module view." type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="param" description="The name of the view file (no extension). If set&#13;&#10;  to false, then the $module param becomes the view name, and a&#13;&#10;  template partial view is loaded instead." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="throws" description="if the template does not have the view&#13;&#10;  file for the specified module" type="\Library\ViewNotFoundException">
            <type by_reference="false">\Library\ViewNotFoundException</type>
          </tag>
          <tag line="128" name="return" description="" type="\Library\View">
            <type by_reference="false">\Library\View</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$module</name>
          <default></default>
          <type/>
        </argument>
        <argument line="144">
          <name>$name</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="168" package="Library">
        <name>Add</name>
        <full_name>Add</full_name>
        <docblock line="155">
          <description>Adds more to contents to be added into the contents section of
the final rendered template.</description>
          <long-description></long-description>
          <tag line="155" name="param" description="The contents to add to the template body" type="string|\Library\View" variable="$contents">
            <type by_reference="false">string</type>
            <type by_reference="false">\Library\View</type>
          </tag>
          <tag line="155" name="param" description="The css file to be loaded for this view" type="string|bool" variable="$css">
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
          <tag line="155" name="param" description="The javascript file to be loaded for this view. When the&#13;&#10;  Template::Render() method is called, a view JS file will be located automatically." type="string|bool" variable="$js">
            <type by_reference="false">string</type>
            <type by_reference="false">bool</type>
          </tag>
          <tag line="155" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="155" name="todo" description="Finish the $css and $js variables"/>
        </docblock>
        <argument line="168">
          <name>$contents</name>
          <default></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$css</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="168">
          <name>$js</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="190" package="Library">
        <name>SetVar</name>
        <full_name>SetVar</full_name>
        <docblock line="182">
          <description>Sets variables to be parsed in the layout</description>
          <long-description></long-description>
          <tag line="182" name="param" description="Name of the variable" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="182" name="param" description="The value of the variable" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="182" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="190">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="213" package="Library">
        <name>SetJsVar</name>
        <full_name>SetJsVar</full_name>
        <docblock line="205">
          <description>Sets javascript variables to be added in the head tags</description>
          <long-description></long-description>
          <tag line="205" name="param" description="Name of the variable" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="205" name="param" description="The value of the variable" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="205" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="213">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="213">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="239" package="Library">
        <name>SetThemePath</name>
        <full_name>SetThemePath</full_name>
        <docblock line="228">
          <description>Sets the path to the theme folder</description>
          <long-description></long-description>
          <tag line="228" name="param" description="The full path to the theme folder" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="228" name="param" description="The theme name. Set only if you want to also define&#13;&#10;  the theme name as well as the path" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="228" name="throws" description="If the theme config cannot be found" type="\Library\InvalidThemePathException">
            <type by_reference="false">\Library\InvalidThemePathException</type>
          </tag>
          <tag line="228" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="239">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="239">
          <name>$name</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="262" package="Library">
        <name>SetTheme</name>
        <full_name>SetTheme</full_name>
        <docblock line="253">
          <description>Sets the name of the theme to render, where the layout.tpl is located</description>
          <long-description></long-description>
          <tag line="253" name="param" description="The theme name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="253" name="throws" description="If the theme doesnt exist in the theme path" type="\Library\InvalidThemePathException">
            <type by_reference="false">\Library\InvalidThemePathException</type>
          </tag>
          <tag line="253" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="262">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="284" package="Library">
        <name>Message</name>
        <full_name>Message</full_name>
        <docblock line="276">
          <description>Adds a global message to be parsed into the template</description>
          <long-description></long-description>
          <tag line="276" name="param" description="The message level (error, warning, info etc)" type="string" variable="$lvl">
            <type by_reference="false">string</type>
          </tag>
          <tag line="276" name="param" description="The message to be displayed within the rendered template" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="276" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="284">
          <name>$lvl</name>
          <default></default>
          <type/>
        </argument>
        <argument line="284">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="294" package="Library">
        <name>ClearContents</name>
        <full_name>ClearContents</full_name>
        <docblock line="289">
          <description>Clears the current output buffer of the template</description>
          <long-description></long-description>
          <tag line="289" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="313" package="Library">
        <name>AddCssFile</name>
        <full_name>AddCssFile</full_name>
        <docblock line="306">
          <description>Appends the header adding a css tag</description>
          <long-description></long-description>
          <tag line="306" name="param" description="The http location of the file" type="string" variable="$location">
            <type by_reference="false">string</type>
          </tag>
          <tag line="306" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="313">
          <name>$location</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="337" package="Library">
        <name>AddJsFile</name>
        <full_name>AddJsFile</full_name>
        <docblock line="330">
          <description>Appends the header adding a script tag</description>
          <long-description></long-description>
          <tag line="330" name="param" description="The http location of the file" type="string" variable="$location">
            <type by_reference="false">string</type>
          </tag>
          <tag line="330" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="337">
          <name>$location</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="361" package="Library">
        <name>PageTitle</name>
        <full_name>PageTitle</full_name>
        <docblock line="354">
          <description>Sets the page title (After server title)</description>
          <long-description></long-description>
          <tag line="354" name="param" description="The title of the page" type="string" variable="$title">
            <type by_reference="false">string</type>
          </tag>
          <tag line="354" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="361">
          <name>$title</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Library" line="373" package="Library">
        <name>AppendHeader</name>
        <full_name>AppendHeader</full_name>
        <docblock line="366">
          <description>Adds a new line of code to the head tags</description>
          <long-description></long-description>
          <tag line="366" name="param" description="The line to add" type="string" variable="$line">
            <type by_reference="false">string</type>
          </tag>
          <tag line="366" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="373">
          <name>$line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="389" package="Library">
        <name>BuildHeader</name>
        <full_name>BuildHeader</full_name>
        <docblock line="384">
          <description>Builds the plexis header</description>
          <long-description></long-description>
          <tag line="384" name="return" description="The rendered header data" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="447" package="Library">
        <name>ParseGlobalMessages</name>
        <full_name>ParseGlobalMessages</full_name>
        <docblock line="442">
          <description>Parse the global messages for the template renderer</description>
          <long-description></long-description>
          <tag line="442" name="return" description="The parsed global message contents" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="481" package="Library">
        <name>LoadThemeConfig</name>
        <full_name>LoadThemeConfig</full_name>
        <docblock line="472">
          <description>Internal method for loading the theme's config xml file</description>
          <long-description></long-description>
          <tag line="472" name="throws" description="if the theme isnt set before rendering" type="\Library\ThemeNotSetException">
            <type by_reference="false">\Library\ThemeNotSetException</type>
          </tag>
          <tag line="472" name="throws" description="if the theme is missing its theme&#13;&#10;config file (theme.xml)" type="\Library\MissingThemeConfigException">
            <type by_reference="false">\Library\MissingThemeConfigException</type>
          </tag>
          <tag line="472" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="Library" line="501" package="Library">
        <name>RenderLayout</name>
        <full_name>RenderLayout</full_name>
        <docblock line="496">
          <description>Internal method for parsing template tags and rendering the layout</description>
          <long-description></long-description>
          <tag line="496" name="return" description="The parsed contents" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Library" line="546" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>ThemeNotSetException</name>
      <full_name>\Library\ThemeNotSetException</full_name>
      <docblock line="539">
        <description>Thrown by the Template Class when the render method is called, but not theme path was set</description>
        <long-description></long-description>
        <tag line="539" name="package" description="Library"/>
        <tag line="539" name="subpackage" description="Exceptions"/>
        <tag line="539" name="file" description="System/Library/Template.php"/>
        <tag line="539" name="see" description="\Library\Template::Render()" refers="\Library\Template::Render()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="555" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidThemePathException</name>
      <full_name>\Library\InvalidThemePathException</full_name>
      <docblock line="548">
        <description>Thrown by the Template Class if the theme path provided is an invalid path</description>
        <long-description></long-description>
        <tag line="548" name="package" description="Library"/>
        <tag line="548" name="subpackage" description="Exceptions"/>
        <tag line="548" name="file" description="System/Library/Template.php"/>
        <tag line="548" name="see" description="\Library\Template::SetThemePath()" refers="\Library\Template::SetThemePath()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="564" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidPageContents</name>
      <full_name>\Library\InvalidPageContents</full_name>
      <docblock line="557">
        <description>Thrown by the Template Class if the contents provided are not a string, or subclass of the View method</description>
        <long-description></long-description>
        <tag line="557" name="package" description="Library"/>
        <tag line="557" name="subpackage" description="Exceptions"/>
        <tag line="557" name="file" description="System/Library/Template.php"/>
        <tag line="557" name="see" description="\Library\Template::Add()" refers="\Library\Template::Add()"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="573" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>MissingThemeConfigException</name>
      <full_name>\Library\MissingThemeConfigException</full_name>
      <docblock line="566">
        <description>Thrown by the Template Class if the theme is missing its config file</description>
        <long-description></long-description>
        <tag line="566" name="package" description="Library"/>
        <tag line="566" name="subpackage" description="Exceptions"/>
        <tag line="566" name="file" description="System/Library/Template.php"/>
        <tag line="566" name="see" description="\Library\Template::SetThemePath()" refers="\Library\Template::SetThemePath()"/>
      </docblock>
    </class>
  </file>
  <file path="system\library\View.php" hash="e09d7e884f449958df655ebc7201da29" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Library/View.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="contains" description="View"/>
      <tag line="2" name="contains" description="ViewNotFoundException"/>
      <tag line="2" name="contains" description="InvalidPageContents"/>
    </docblock>
    <class final="false" abstract="false" namespace="Library" line="20" package="Library">
      <extends/>
      <name>View</name>
      <full_name>\Library\View</full_name>
      <docblock line="14">
        <description>An individual view template class</description>
        <long-description></long-description>
        <tag line="14" name="author" description="Steven Wilson"/>
        <tag line="14" name="package" description="Library"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" namespace="Library" package="Default">
        <name>$contents</name>
        <default></default>
        <docblock line="22">
          <description>View contents as a string</description>
          <long-description></long-description>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" namespace="Library" package="Default">
        <name>$variables</name>
        <default>array()</default>
        <docblock line="28">
          <description>Assigned template variables and values</description>
          <long-description></long-description>
          <tag line="28" name="var" description="" type="mixed[]">
            <type by_reference="false">mixed[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="46" package="Library">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="34">
          <description>Contructor</description>
          <long-description></long-description>
          <tag line="34" name="param" description="The file path to the template file, or the tempalte&#13;&#10;  as a string" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="If set to true, $string becomes a filename, and is&#13;&#10;  loaded. If false, $string is treated as the view's contents." type="bool" variable="$isFile">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="34" name="throws" description="if the view file cannot be located" type="\Library\ViewNotFoundException">
            <type by_reference="false">\Library\ViewNotFoundException</type>
          </tag>
          <tag line="34" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$isFile</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="64" package="Library">
        <name>Set</name>
        <full_name>Set</full_name>
        <docblock line="54">
          <description>Sets variables to be replaced in the view</description>
          <long-description></long-description>
          <tag line="54" name="param" description="Name of the variable to be set,&#13;&#10;  or can be an array of key =&gt; value" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="param" description="The value of the variable (not set if $name&#13;&#10;  is an array)" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="54" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="64">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="84" package="Library">
        <name>ClearVars</name>
        <full_name>ClearVars</full_name>
        <docblock line="79">
          <description>These method clears all the set variables for this view</description>
          <long-description></long-description>
          <tag line="79" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="94" package="Library">
        <name>GetContents</name>
        <full_name>GetContents</full_name>
        <docblock line="89">
          <description>Returns the view's contents, un-parsed</description>
          <long-description></long-description>
          <tag line="89" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="111" package="Library">
        <name>SetContents</name>
        <full_name>SetContents</full_name>
        <docblock line="99">
          <description>Sets the views contents</description>
          <long-description></long-description>
          <tag line="99" name="param" description="The new contents of&#13;&#10;  this view file. Must be a string, or an object extending&#13;&#10;  this Class." type="string|\Library\View" variable="$contents">
            <type by_reference="false">string</type>
            <type by_reference="false">\Library\View</type>
          </tag>
          <tag line="99" name="throws" description="if the contents are not a string&#13;&#10;  or a subclass of View" type="\Library\InvalidViewContents">
            <type by_reference="false">\Library\InvalidViewContents</type>
          </tag>
          <tag line="99" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$contents</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="125" package="Library">
        <name>Render</name>
        <full_name>Render</full_name>
        <docblock line="120">
          <description>These methods parses the view contents and returns the source</description>
          <long-description></long-description>
          <tag line="120" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Library" line="150" package="Library">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="145">
          <description>These methods parses the view contents and returns the source</description>
          <long-description></long-description>
          <tag line="145" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="Library" line="165" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>ViewNotFoundException</name>
      <full_name>\Library\ViewNotFoundException</full_name>
      <docblock line="158">
        <description>View Not Found Exception.</description>
        <long-description>&lt;p&gt;Thrown when a view file cannot be found&lt;/p&gt;</long-description>
        <tag line="158" name="package" description="Library"/>
        <tag line="158" name="subpackage" description="Exceptions"/>
        <tag line="158" name="file" description="System/Library/View.php"/>
        <tag line="158" name="see" description="\Library\View" refers="\Library\View"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="Library" line="175" package="Library\Exceptions">
      <extends>\Exception</extends>
      <name>InvalidViewContents</name>
      <full_name>\Library\InvalidViewContents</full_name>
      <docblock line="167">
        <description>Invalid View Contents.</description>
        <long-description>&lt;p&gt;Thrown when the contents passed to a view, are
  not a string, or an extension of the \Library\View class&lt;/p&gt;</long-description>
        <tag line="167" name="package" description="Library"/>
        <tag line="167" name="subpackage" description="Exceptions"/>
        <tag line="167" name="file" description="System/Library/View.php"/>
        <tag line="167" name="see" description="\Library\View" refers="\Library\View"/>
      </docblock>
    </class>
  </file>
  <file path="system\Plexis.php" hash="02cf8eaf863ec9b99d6df9fdd79d3a7a" package="System">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/Plexis.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
      <tag line="2" name="package" description="System"/>
    </docblock>
    <include line="271" type="Include" package="Default">
      <name/>
    </include>
    <include line="286" type="Include" package="Default">
      <name/>
    </include>
    <include line="312" type="Require" package="Default">
      <name/>
    </include>
    <include line="345" type="Require" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="363" package="System">
      <name>SITE_URL</name>
      <full_name>\SITE_URL</full_name>
      <value>\Core\Request::BaseUrl()</value>
    </constant>
    <constant namespace="global" line="370" package="System">
      <name>SITE_URL</name>
      <full_name>\SITE_URL</full_name>
      <value>\Core\Request::BaseUrl() . '/?uri='</value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="32" package="System">
      <extends/>
      <name>Plexis</name>
      <full_name>\Plexis</full_name>
      <docblock line="26">
        <description>The backend controller is the main method for running the Application</description>
        <long-description></long-description>
        <tag line="26" name="author" description="Steven Wilson"/>
        <tag line="26" name="package" description="System"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="38" namespace="global" package="Default">
        <name>$isRunning</name>
        <default>false</default>
        <docblock line="34">
          <description>Internal var that prevents plexis from running twice</description>
          <long-description></long-description>
          <tag line="34" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="44" namespace="global" package="Default">
        <name>$modulePath</name>
        <default></default>
        <docblock line="40">
          <description>Declares the root controller path for the current module</description>
          <long-description></long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="50" namespace="global" package="Default">
        <name>$realm</name>
        <default></default>
        <docblock line="46">
          <description>The Wowlib object</description>
          <long-description></long-description>
          <tag line="46" name="var" description="" type="\Wowlib\Realm">
            <type by_reference="false">\Wowlib\Realm</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="56" namespace="global" package="Default">
        <name>$renderTemplate</name>
        <default>true</default>
        <docblock line="52">
          <description>Certain modules may not want the template to render.</description>
          <long-description></long-description>
          <tag line="52" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="64" package="System">
        <name>Run</name>
        <full_name>Run</full_name>
        <docblock line="59">
          <description>Main method for running the Plexis application</description>
          <long-description></long-description>
          <tag line="59" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="109" package="System">
        <name>Show404</name>
        <full_name>Show404</full_name>
        <docblock line="100">
          <description>Displays the 404 page not found page</description>
          <long-description>&lt;p&gt;Calling this method will clear all current output, render the 404 page
and kill all current running scripts. No code following this method
will be executed&lt;/p&gt;</long-description>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="137" package="System">
        <name>Show403</name>
        <full_name>Show403</full_name>
        <docblock line="128">
          <description>Displays the 403 "Forbidden"</description>
          <long-description>&lt;p&gt;Calling this method will clear all current output, render the 403 page
and kill all current running scripts. No code following this method
will be executed&lt;/p&gt;</long-description>
          <tag line="128" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="167" package="System">
        <name>ShowSiteOffline</name>
        <full_name>ShowSiteOffline</full_name>
        <docblock line="156">
          <description>Displays the site offline page</description>
          <long-description>&lt;p&gt;Calling this method will clear all current output, render the site offline
page and kill all current running scripts. No code following this method
will be executed&lt;/p&gt;</long-description>
          <tag line="156" name="param" description="The meesage to also be displayed with the&#13;&#10;  Site Offline page." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="156" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="167">
          <name>$message</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="192" package="System">
        <name>GetRealm</name>
        <full_name>GetRealm</full_name>
        <docblock line="187">
          <description>Returns the Realm Object</description>
          <long-description></long-description>
          <tag line="187" name="return" description="" type="\Wowlib\Realm">
            <type by_reference="false">\Wowlib\Realm</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="204" package="System">
        <name>RenderTemplate</name>
        <full_name>RenderTemplate</full_name>
        <docblock line="197">
          <description>Sets whether plexis should render the full template or not</description>
          <long-description></long-description>
          <tag line="197" name="param" description="Render the template?" type="bool" variable="$bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="197" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="204">
          <name>$bool</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="219" package="System">
        <name>LoadDBConnection</name>
        <full_name>LoadDBConnection</full_name>
        <docblock line="211">
          <description>Internal method for loading the Plexis DB connection</description>
          <long-description></long-description>
          <tag line="211" name="param" description="If set to false, the Site Offline page will&#13;&#10;  not be rendered if the plexis database connection is offline" type="bool" variable="$showOffline">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="211" name="return" description="" type="\Database\Driver">
            <type by_reference="false">\Database\Driver</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$showOffline</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="241" package="System">
        <name>RunModule</name>
        <full_name>RunModule</full_name>
        <docblock line="236">
          <description>Internal method for running the controller and action</description>
          <long-description></long-description>
          <tag line="236" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="268" package="System">
        <name>LoadPlugins</name>
        <full_name>LoadPlugins</full_name>
        <docblock line="263">
          <description>Internal method for loading, and running all plugins</description>
          <long-description></long-description>
          <tag line="263" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="309" package="System">
        <name>LoadWowlib</name>
        <full_name>LoadWowlib</full_name>
        <docblock line="301">
          <description>Internal method for loading the wowlib</description>
          <long-description></long-description>
          <tag line="301" name="param" description="If set to false, the Site Offline page will&#13;&#10;  not be rendered if the realm database connection is offline" type="bool" variable="$showOffline">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="301" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="309">
          <name>$showOffline</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="342" package="System">
        <name>LoadConfigs</name>
        <full_name>LoadConfigs</full_name>
        <docblock line="337">
          <description>Internal method for loading the plexis config files</description>
          <long-description></long-description>
          <tag line="337" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="system\System.php" hash="db89fbd73693b5fec4eca2c489e15a73" package="Default">
    <docblock line="2">
      <description>Plexis Content Management System</description>
      <long-description></long-description>
      <tag line="2" name="file" description="System/System.php"/>
      <tag line="2" name="copyright" description="2011-2012, Plexis Dev Team"/>
      <tag line="2" name="license" description="GNU GPL v3"/>
    </docblock>
    <include line="61" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="System">
      <extends/>
      <name>System</name>
      <full_name>\System</full_name>
      <docblock line="17">
        <description>The system acts as a  wrapper for plexis.</description>
        <long-description>&lt;p&gt;It catches un-caught
exceptions, and sets up a base for plexis to work on&lt;/p&gt;</long-description>
        <tag line="17" name="author" description="Steven Wilson"/>
        <tag line="17" name="package" description="System"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="30" namespace="global" package="Default">
        <name>$isInitiated</name>
        <default>false</default>
        <docblock line="26">
          <description>Internal var that prevents the system from running twice</description>
          <long-description></long-description>
          <tag line="26" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="37" package="System">
        <name>Run</name>
        <full_name>Run</full_name>
        <docblock line="32">
          <description>Initiates the System wrapper for plexis</description>
          <long-description></long-description>
          <tag line="32" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="78" package="System\Exceptions">
      <extends>\Exception</extends>
      <name>SystemError</name>
      <full_name>\SystemError</full_name>
      <docblock line="72">
        <description>System Error exception</description>
        <long-description></long-description>
        <tag line="72" name="package" description="System"/>
        <tag line="72" name="subpackage" description="Exceptions"/>
        <tag line="72" name="file" description="System/System.php"/>
      </docblock>
    </class>
  </file>
  <package name="Core" full_name="Core">
    <package name="Exceptions" full_name="Core\Exceptions"/>
    <package name="Functions" full_name="Core\Functions"/>
  </package>
  <package name="Database" full_name="Database">
    <package name="Exceptions" full_name="Database\Exceptions"/>
  </package>
  <package name="Default" full_name="Default"/>
  <package name="Library" full_name="Library">
    <package name="Exceptions" full_name="Library\Exceptions"/>
  </package>
  <package name="System" full_name="System">
    <package name="Exceptions" full_name="System\Exceptions"/>
  </package>
  <namespace name="Core" full_name="Core"/>
  <namespace name="Database" full_name="Database"/>
  <namespace name="Library" full_name="Library"/>
  <namespace name="global" full_name="global"/>
  <marker count="3">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
